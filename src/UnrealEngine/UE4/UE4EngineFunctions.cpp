#pragma once
#include "stdafx.h"

#ifdef UE4

#include "UnrealEngine\Engine\UE4\UE4EngineFStructs.h"

#ifdef _MSC_VER
#pragma pack(push, 0x4)
#endif

void UActorComponent::ToggleActive() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ActorComponent.ToggleActive");
	UActorComponent_ToggleActive_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UActorComponent::SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ActorComponent.SetTickGroup");
	UActorComponent_SetTickGroup_Params params;

	params.NewTickGroup = NewTickGroup;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UActorComponent::SetTickableWhenPaused(bool bTickableWhenPaused) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ActorComponent.SetTickableWhenPaused");
	UActorComponent_SetTickableWhenPaused_Params params;

	params.bTickableWhenPaused = bTickableWhenPaused;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UActorComponent::SetOwningSceneCapture(class USceneCaptureComponent* InOwningSceneCapture) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ActorComponent.SetOwningSceneCapture");
	UActorComponent_SetOwningSceneCapture_Params params;

	params.InOwningSceneCapture = InOwningSceneCapture;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UActorComponent::SetIsReplicated(bool ShouldReplicate) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ActorComponent.SetIsReplicated");
	UActorComponent_SetIsReplicated_Params params;

	params.ShouldReplicate = ShouldReplicate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UActorComponent::SetComponentTickInterval(float TickInterval) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ActorComponent.SetComponentTickInterval");
	UActorComponent_SetComponentTickInterval_Params params;

	params.TickInterval = TickInterval;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UActorComponent::SetComponentTickEnabled(bool bEnabled) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ActorComponent.SetComponentTickEnabled");
	UActorComponent_SetComponentTickEnabled_Params params;

	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UActorComponent::SetAutoActivate(bool bNewAutoActivate) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ActorComponent.SetAutoActivate");
	UActorComponent_SetAutoActivate_Params params;

	params.bNewAutoActivate = bNewAutoActivate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UActorComponent::SetActive(bool bNewActive, bool bReset) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ActorComponent.SetActive");
	UActorComponent_SetActive_Params params;

	params.bNewActive = bNewActive;
	params.bReset = bReset;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UActorComponent::RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ActorComponent.RemoveTickPrerequisiteComponent");
	UActorComponent_RemoveTickPrerequisiteComponent_Params params;

	params.PrerequisiteComponent = PrerequisiteComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UActorComponent::RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ActorComponent.RemoveTickPrerequisiteActor");
	UActorComponent_RemoveTickPrerequisiteActor_Params params;

	params.PrerequisiteActor = PrerequisiteActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UActorComponent::ReceiveTick(float DeltaSeconds) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ActorComponent.ReceiveTick");
	UActorComponent_ReceiveTick_Params params;

	params.DeltaSeconds = DeltaSeconds;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UActorComponent::ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ActorComponent.ReceiveEndPlay");
	UActorComponent_ReceiveEndPlay_Params params;

	params.EndPlayReason = EndPlayReason;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UActorComponent::ReceiveBeginPlay() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ActorComponent.ReceiveBeginPlay");
	UActorComponent_ReceiveBeginPlay_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UActorComponent::OnRep_IsActive() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ActorComponent.OnRep_IsActive");
	UActorComponent_OnRep_IsActive_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UActorComponent::MarkNetDirty() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ActorComponent.MarkNetDirty");
	UActorComponent_MarkNetDirty_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UActorComponent::K2_DestroyComponent(class UObject* Object) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ActorComponent.K2_DestroyComponent");
	UActorComponent_K2_DestroyComponent_Params params;

	params.Object = Object;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UActorComponent::IsComponentTickEnabled() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ActorComponent.IsComponentTickEnabled");
	UActorComponent_IsComponentTickEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UActorComponent::IsBeingDestroyed() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ActorComponent.IsBeingDestroyed");
	UActorComponent_IsBeingDestroyed_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UActorComponent::IsActive() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ActorComponent.IsActive");
	UActorComponent_IsActive_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class USceneCaptureComponent* UActorComponent::GetOwningSceneCapture() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ActorComponent.GetOwningSceneCapture");
	UActorComponent_GetOwningSceneCapture_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class AActor* UActorComponent::GetOwner() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ActorComponent.GetOwner");
	UActorComponent_GetOwner_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UActorComponent::GetComponentTickInterval() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ActorComponent.GetComponentTickInterval");
	UActorComponent_GetComponentTickInterval_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UActorComponent::Deactivate() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ActorComponent.Deactivate");
	UActorComponent_Deactivate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UActorComponent::ComponentHasTag(const struct FName& Tag) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ActorComponent.ComponentHasTag");
	UActorComponent_ComponentHasTag_Params params;

	params.Tag = Tag;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UActorComponent::AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ActorComponent.AddTickPrerequisiteComponent");
	UActorComponent_AddTickPrerequisiteComponent_Params params;

	params.PrerequisiteComponent = PrerequisiteComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UActorComponent::AddTickPrerequisiteActor(class AActor* PrerequisiteActor) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ActorComponent.AddTickPrerequisiteActor");
	UActorComponent_AddTickPrerequisiteActor_Params params;

	params.PrerequisiteActor = PrerequisiteActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UActorComponent::Activate(bool bReset) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ActorComponent.Activate");
	UActorComponent_Activate_Params params;

	params.bReset = bReset;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USceneComponent::ToggleVisibility(bool bPropagateToChildren) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.ToggleVisibility");
	USceneComponent_ToggleVisibility_Params params;

	params.bPropagateToChildren = bPropagateToChildren;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool USceneComponent::SnapTo(class USceneComponent* InParent, const struct FName& InSocketName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.SnapTo");
	USceneComponent_SnapTo_Params params;

	params.InParent = InParent;
	params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void USceneComponent::SetWorldScale3D(const struct FVector& NewScale) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.SetWorldScale3D");
	USceneComponent_SetWorldScale3D_Params params;

	params.NewScale = NewScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USceneComponent::SetVisibility(bool bNewVisibility, bool bPropagateToChildren) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.SetVisibility");
	USceneComponent_SetVisibility_Params params;

	params.bNewVisibility = bNewVisibility;
	params.bPropagateToChildren = bPropagateToChildren;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USceneComponent::SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.SetShouldUpdatePhysicsVolume");
	USceneComponent_SetShouldUpdatePhysicsVolume_Params params;

	params.bInShouldUpdatePhysicsVolume = bInShouldUpdatePhysicsVolume;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USceneComponent::SetRelativeScale3D(const struct FVector& NewScale3D) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.SetRelativeScale3D");
	USceneComponent_SetRelativeScale3D_Params params;

	params.NewScale3D = NewScale3D;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USceneComponent::SetHiddenInGame(bool NewHidden, bool bPropagateToChildren) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.SetHiddenInGame");
	USceneComponent_SetHiddenInGame_Params params;

	params.NewHidden = NewHidden;
	params.bPropagateToChildren = bPropagateToChildren;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USceneComponent::SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.SetAbsolute");
	USceneComponent_SetAbsolute_Params params;

	params.bNewAbsoluteLocation = bNewAbsoluteLocation;
	params.bNewAbsoluteRotation = bNewAbsoluteRotation;
	params.bNewAbsoluteScale = bNewAbsoluteScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USceneComponent::ResetRelativeTransform() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.ResetRelativeTransform");
	USceneComponent_ResetRelativeTransform_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USceneComponent::OnRep_Visibility(bool OldValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.OnRep_Visibility");
	USceneComponent_OnRep_Visibility_Params params;

	params.OldValue = OldValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USceneComponent::OnRep_Transform() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.OnRep_Transform");
	USceneComponent_OnRep_Transform_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USceneComponent::OnRep_AttachSocketName() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.OnRep_AttachSocketName");
	USceneComponent_OnRep_AttachSocketName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USceneComponent::OnRep_AttachParent() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.OnRep_AttachParent");
	USceneComponent_OnRep_AttachParent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USceneComponent::OnRep_AttachChildren() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.OnRep_AttachChildren");
	USceneComponent_OnRep_AttachChildren_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USceneComponent::K2_SetWorldTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.K2_SetWorldTransform");
	USceneComponent_K2_SetWorldTransform_Params params;

	params.NewTransform = NewTransform;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;
	params.SweepHitResult = *SweepHitResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USceneComponent::K2_SetWorldRotation(const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.K2_SetWorldRotation");
	USceneComponent_K2_SetWorldRotation_Params params;

	params.NewRotation = NewRotation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;
	params.SweepHitResult = *SweepHitResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USceneComponent::K2_SetWorldLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.K2_SetWorldLocationAndRotation");
	USceneComponent_K2_SetWorldLocationAndRotation_Params params;

	params.NewLocation = NewLocation;
	params.NewRotation = NewRotation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;
	params.SweepHitResult = *SweepHitResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USceneComponent::K2_SetWorldLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.K2_SetWorldLocation");
	USceneComponent_K2_SetWorldLocation_Params params;

	params.NewLocation = NewLocation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;
	params.SweepHitResult = *SweepHitResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USceneComponent::K2_SetRelativeTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.K2_SetRelativeTransform");
	USceneComponent_K2_SetRelativeTransform_Params params;

	params.NewTransform = NewTransform;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;
	params.SweepHitResult = *SweepHitResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USceneComponent::K2_SetRelativeRotation(const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.K2_SetRelativeRotation");
	USceneComponent_K2_SetRelativeRotation_Params params;

	params.NewRotation = NewRotation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;
	params.SweepHitResult = *SweepHitResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USceneComponent::K2_SetRelativeLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.K2_SetRelativeLocationAndRotation");
	USceneComponent_K2_SetRelativeLocationAndRotation_Params params;

	params.NewLocation = NewLocation;
	params.NewRotation = NewRotation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;
	params.SweepHitResult = *SweepHitResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USceneComponent::K2_SetRelativeLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.K2_SetRelativeLocation");
	USceneComponent_K2_SetRelativeLocation_Params params;

	params.NewLocation = NewLocation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;
	params.SweepHitResult = *SweepHitResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

struct FTransform USceneComponent::K2_GetComponentToWorld() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.K2_GetComponentToWorld");
	USceneComponent_K2_GetComponentToWorld_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector USceneComponent::K2_GetComponentScale() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.K2_GetComponentScale");
	USceneComponent_K2_GetComponentScale_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FRotator USceneComponent::K2_GetComponentRotation() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.K2_GetComponentRotation");
	USceneComponent_K2_GetComponentRotation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector USceneComponent::K2_GetComponentLocation() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.K2_GetComponentLocation");
	USceneComponent_K2_GetComponentLocation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void USceneComponent::K2_DetachFromComponent(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule, bool bCallModify) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.K2_DetachFromComponent");
	USceneComponent_K2_DetachFromComponent_Params params;

	params.LocationRule = LocationRule;
	params.RotationRule = RotationRule;
	params.ScaleRule = ScaleRule;
	params.bCallModify = bCallModify;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool USceneComponent::K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.K2_AttachToComponent");
	USceneComponent_K2_AttachToComponent_Params params;

	params.Parent = Parent;
	params.SocketName = SocketName;
	params.LocationRule = LocationRule;
	params.RotationRule = RotationRule;
	params.ScaleRule = ScaleRule;
	params.bWeldSimulatedBodies = bWeldSimulatedBodies;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool USceneComponent::K2_AttachTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachType, bool bWeldSimulatedBodies) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.K2_AttachTo");
	USceneComponent_K2_AttachTo_Params params;

	params.InParent = InParent;
	params.InSocketName = InSocketName;
	params.AttachType = AttachType;
	params.bWeldSimulatedBodies = bWeldSimulatedBodies;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void USceneComponent::K2_AddWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.K2_AddWorldTransform");
	USceneComponent_K2_AddWorldTransform_Params params;

	params.DeltaTransform = DeltaTransform;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;
	params.SweepHitResult = *SweepHitResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USceneComponent::K2_AddWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.K2_AddWorldRotation");
	USceneComponent_K2_AddWorldRotation_Params params;

	params.DeltaRotation = DeltaRotation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;
	params.SweepHitResult = *SweepHitResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USceneComponent::K2_AddWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.K2_AddWorldOffset");
	USceneComponent_K2_AddWorldOffset_Params params;

	params.DeltaLocation = DeltaLocation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;
	params.SweepHitResult = *SweepHitResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USceneComponent::K2_AddRelativeRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.K2_AddRelativeRotation");
	USceneComponent_K2_AddRelativeRotation_Params params;

	params.DeltaRotation = DeltaRotation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;
	params.SweepHitResult = *SweepHitResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USceneComponent::K2_AddRelativeLocation(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.K2_AddRelativeLocation");
	USceneComponent_K2_AddRelativeLocation_Params params;

	params.DeltaLocation = DeltaLocation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;
	params.SweepHitResult = *SweepHitResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USceneComponent::K2_AddLocalTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.K2_AddLocalTransform");
	USceneComponent_K2_AddLocalTransform_Params params;

	params.DeltaTransform = DeltaTransform;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;
	params.SweepHitResult = *SweepHitResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USceneComponent::K2_AddLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.K2_AddLocalRotation");
	USceneComponent_K2_AddLocalRotation_Params params;

	params.DeltaRotation = DeltaRotation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;
	params.SweepHitResult = *SweepHitResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USceneComponent::K2_AddLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.K2_AddLocalOffset");
	USceneComponent_K2_AddLocalOffset_Params params;

	params.DeltaLocation = DeltaLocation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;
	params.SweepHitResult = *SweepHitResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool USceneComponent::IsVisible() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.IsVisible");
	USceneComponent_IsVisible_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool USceneComponent::IsSimulatingPhysics(const struct FName& BoneName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.IsSimulatingPhysics");
	USceneComponent_IsSimulatingPhysics_Params params;

	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool USceneComponent::IsAnySimulatingPhysics() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.IsAnySimulatingPhysics");
	USceneComponent_IsAnySimulatingPhysics_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector USceneComponent::GetUpVector() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.GetUpVector");
	USceneComponent_GetUpVector_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FTransform USceneComponent::GetSocketTransform(const struct FName& InSocketName, TEnumAsByte<ERelativeTransformSpace> TransformSpace) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.GetSocketTransform");
	USceneComponent_GetSocketTransform_Params params;

	params.InSocketName = InSocketName;
	params.TransformSpace = TransformSpace;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FRotator USceneComponent::GetSocketRotation(const struct FName& InSocketName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.GetSocketRotation");
	USceneComponent_GetSocketRotation_Params params;

	params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FQuat USceneComponent::GetSocketQuaternion(const struct FName& InSocketName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.GetSocketQuaternion");
	USceneComponent_GetSocketQuaternion_Params params;

	params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector USceneComponent::GetSocketLocation(const struct FName& InSocketName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.GetSocketLocation");
	USceneComponent_GetSocketLocation_Params params;

	params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool USceneComponent::GetShouldUpdatePhysicsVolume() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.GetShouldUpdatePhysicsVolume");
	USceneComponent_GetShouldUpdatePhysicsVolume_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector USceneComponent::GetRightVector() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.GetRightVector");
	USceneComponent_GetRightVector_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FTransform USceneComponent::GetRelativeTransform() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.GetRelativeTransform");
	USceneComponent_GetRelativeTransform_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class APhysicsVolume* USceneComponent::GetPhysicsVolume() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.GetPhysicsVolume");
	USceneComponent_GetPhysicsVolume_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void USceneComponent::GetParentComponents(TArray<class USceneComponent*>* Parents) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.GetParentComponents");
	USceneComponent_GetParentComponents_Params params;

	params.Parents = *Parents;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

int USceneComponent::GetNumChildrenComponents() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.GetNumChildrenComponents");
	USceneComponent_GetNumChildrenComponents_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector USceneComponent::GetForwardVector() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.GetForwardVector");
	USceneComponent_GetForwardVector_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector USceneComponent::GetComponentVelocity() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.GetComponentVelocity");
	USceneComponent_GetComponentVelocity_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void USceneComponent::GetChildrenComponents(bool bIncludeAllDescendants, TArray<class USceneComponent*>* Children) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.GetChildrenComponents");
	USceneComponent_GetChildrenComponents_Params params;

	params.bIncludeAllDescendants = bIncludeAllDescendants;
	params.Children = *Children;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

class USceneComponent* USceneComponent::GetChildComponent(int ChildIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.GetChildComponent");
	USceneComponent_GetChildComponent_Params params;

	params.ChildIndex = ChildIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FName USceneComponent::GetAttachSocketName() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.GetAttachSocketName");
	USceneComponent_GetAttachSocketName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class USceneComponent* USceneComponent::GetAttachParent() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.GetAttachParent");
	USceneComponent_GetAttachParent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool USceneComponent::DoesSocketExist(const struct FName& InSocketName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.DoesSocketExist");
	USceneComponent_DoesSocketExist_Params params;

	params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void USceneComponent::DetachFromParent(bool bMaintainWorldPosition, bool bCallModify) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneComponent.DetachFromParent");
	USceneComponent_DetachFromParent_Params params;

	params.bMaintainWorldPosition = bMaintainWorldPosition;
	params.bCallModify = bCallModify;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool AActor::WasRecentlyRendered(float Tolerance) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.WasRecentlyRendered");
	AActor_WasRecentlyRendered_Params params;

	params.Tolerance = Tolerance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void AActor::UserConstructionScript() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.UserConstructionScript");
	AActor_UserConstructionScript_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::TearOff() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.TearOff");
	AActor_TearOff_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::SnapRootComponentTo(class AActor* InParentActor, const struct FName& InSocketName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.SnapRootComponentTo");
	AActor_SnapRootComponentTo_Params params;

	params.InParentActor = InParentActor;
	params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.SetTickGroup");
	AActor_SetTickGroup_Params params;

	params.NewTickGroup = NewTickGroup;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::SetTickableWhenPaused(bool bTickableWhenPaused) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.SetTickableWhenPaused");
	AActor_SetTickableWhenPaused_Params params;

	params.bTickableWhenPaused = bTickableWhenPaused;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::SetReplicates(bool bInReplicates) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.SetReplicates");
	AActor_SetReplicates_Params params;

	params.bInReplicates = bInReplicates;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::SetReplicateMovement(bool bInReplicateMovement) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.SetReplicateMovement");
	AActor_SetReplicateMovement_Params params;

	params.bInReplicateMovement = bInReplicateMovement;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::SetOwner(class AActor* NewOwner) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.SetOwner");
	AActor_SetOwner_Params params;

	params.NewOwner = NewOwner;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::SetOnlyRelevantToOwner(bool bNewOnlyRelevantToOwner) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.SetOnlyRelevantToOwner");
	AActor_SetOnlyRelevantToOwner_Params params;

	params.bNewOnlyRelevantToOwner = bNewOnlyRelevantToOwner;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::SetNetUseOwnerRelevancy(bool bNewNetUseOwnerRelevancy) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.SetNetUseOwnerRelevancy");
	AActor_SetNetUseOwnerRelevancy_Params params;

	params.bNewNetUseOwnerRelevancy = bNewNetUseOwnerRelevancy;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::SetNetUpdateFrequency(float NewFrequency, float NewMinFrequency) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.SetNetUpdateFrequency");
	AActor_SetNetUpdateFrequency_Params params;

	params.NewFrequency = NewFrequency;
	params.NewMinFrequency = NewMinFrequency;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::SetNetDormancy(TEnumAsByte<ENetDormancy> NewDormancy) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.SetNetDormancy");
	AActor_SetNetDormancy_Params params;

	params.NewDormancy = NewDormancy;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::SetLifeSpan(float InLifespan) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.SetLifeSpan");
	AActor_SetLifeSpan_Params params;

	params.InLifespan = InLifespan;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::SetAlwaysRelevant(bool bNewAlwaysRelevant) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.SetAlwaysRelevant");
	AActor_SetAlwaysRelevant_Params params;

	params.bNewAlwaysRelevant = bNewAlwaysRelevant;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::SetActorTickInterval(float TickInterval) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.SetActorTickInterval");
	AActor_SetActorTickInterval_Params params;

	params.TickInterval = TickInterval;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::SetActorTickEnabled(bool bEnabled) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.SetActorTickEnabled");
	AActor_SetActorTickEnabled_Params params;

	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::SetActorScale3D(const struct FVector& NewScale3D) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.SetActorScale3D");
	AActor_SetActorScale3D_Params params;

	params.NewScale3D = NewScale3D;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::SetActorRelativeScale3D(const struct FVector& NewRelativeScale) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.SetActorRelativeScale3D");
	AActor_SetActorRelativeScale3D_Params params;

	params.NewRelativeScale = NewRelativeScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::SetActorHiddenInGame(bool bNewHidden) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.SetActorHiddenInGame");
	AActor_SetActorHiddenInGame_Params params;

	params.bNewHidden = bNewHidden;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::SetActorEnableCollision(bool bNewActorEnableCollision) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.SetActorEnableCollision");
	AActor_SetActorEnableCollision_Params params;

	params.bNewActorEnableCollision = bNewActorEnableCollision;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.RemoveTickPrerequisiteComponent");
	AActor_RemoveTickPrerequisiteComponent_Params params;

	params.PrerequisiteComponent = PrerequisiteComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.RemoveTickPrerequisiteActor");
	AActor_RemoveTickPrerequisiteActor_Params params;

	params.PrerequisiteActor = PrerequisiteActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::ReceiveTick(float DeltaSeconds) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.ReceiveTick");
	AActor_ReceiveTick_Params params;

	params.DeltaSeconds = DeltaSeconds;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.ReceiveRadialDamage");
	AActor_ReceiveRadialDamage_Params params;

	params.DamageReceived = DamageReceived;
	params.DamageType = DamageType;
	params.Origin = Origin;
	params.HitInfo = HitInfo;
	params.InstigatedBy = InstigatedBy;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::ReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.ReceivePointDamage");
	AActor_ReceivePointDamage_Params params;

	params.Damage = Damage;
	params.DamageType = DamageType;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;
	params.HitComponent = HitComponent;
	params.BoneName = BoneName;
	params.ShotFromDirection = ShotFromDirection;
	params.InstigatedBy = InstigatedBy;
	params.DamageCauser = DamageCauser;
	params.HitInfo = HitInfo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.ReceiveHit");
	AActor_ReceiveHit_Params params;

	params.MyComp = MyComp;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.bSelfMoved = bSelfMoved;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;
	params.NormalImpulse = NormalImpulse;
	params.Hit = Hit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.ReceiveEndPlay");
	AActor_ReceiveEndPlay_Params params;

	params.EndPlayReason = EndPlayReason;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::ReceiveDestroyed() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.ReceiveDestroyed");
	AActor_ReceiveDestroyed_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::ReceiveBeginPlay() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.ReceiveBeginPlay");
	AActor_ReceiveBeginPlay_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.ReceiveAnyDamage");
	AActor_ReceiveAnyDamage_Params params;

	params.Damage = Damage;
	params.DamageType = DamageType;
	params.InstigatedBy = InstigatedBy;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::ReceiveActorOnReleased(const struct FKey& ButtonReleased) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.ReceiveActorOnReleased");
	AActor_ReceiveActorOnReleased_Params params;

	params.ButtonReleased = ButtonReleased;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex> FingerIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.ReceiveActorOnInputTouchLeave");
	AActor_ReceiveActorOnInputTouchLeave_Params params;

	params.FingerIndex = FingerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex> FingerIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.ReceiveActorOnInputTouchEnter");
	AActor_ReceiveActorOnInputTouchEnter_Params params;

	params.FingerIndex = FingerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex> FingerIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.ReceiveActorOnInputTouchEnd");
	AActor_ReceiveActorOnInputTouchEnd_Params params;

	params.FingerIndex = FingerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex> FingerIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.ReceiveActorOnInputTouchBegin");
	AActor_ReceiveActorOnInputTouchBegin_Params params;

	params.FingerIndex = FingerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::ReceiveActorOnClicked(const struct FKey& ButtonPressed) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.ReceiveActorOnClicked");
	AActor_ReceiveActorOnClicked_Params params;

	params.ButtonPressed = ButtonPressed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::ReceiveActorEndOverlap(class AActor* OtherActor) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.ReceiveActorEndOverlap");
	AActor_ReceiveActorEndOverlap_Params params;

	params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::ReceiveActorEndCursorOver() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.ReceiveActorEndCursorOver");
	AActor_ReceiveActorEndCursorOver_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::ReceiveActorBeginOverlap(class AActor* OtherActor) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.ReceiveActorBeginOverlap");
	AActor_ReceiveActorBeginOverlap_Params params;

	params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::ReceiveActorBeginCursorOver() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.ReceiveActorBeginCursorOver");
	AActor_ReceiveActorBeginCursorOver_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.PrestreamTextures");
	AActor_PrestreamTextures_Params params;

	params.Seconds = Seconds;
	params.bEnableStreaming = bEnableStreaming;
	params.CinematicTextureGroups = CinematicTextureGroups;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::OnRep_ReplicateMovement() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.OnRep_ReplicateMovement");
	AActor_OnRep_ReplicateMovement_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::OnRep_ReplicatedMovement() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.OnRep_ReplicatedMovement");
	AActor_OnRep_ReplicatedMovement_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::OnRep_Owner() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.OnRep_Owner");
	AActor_OnRep_Owner_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::OnRep_Instigator() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.OnRep_Instigator");
	AActor_OnRep_Instigator_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::OnRep_AttachmentReplication() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.OnRep_AttachmentReplication");
	AActor_OnRep_AttachmentReplication_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::MakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation, float MaxRange, const struct FName& Tag) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.MakeNoise");
	AActor_MakeNoise_Params params;

	params.Loudness = Loudness;
	params.NoiseInstigator = NoiseInstigator;
	params.NoiseLocation = NoiseLocation;
	params.MaxRange = MaxRange;
	params.Tag = Tag;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

class UMaterialInstanceDynamic* AActor::MakeMIDForMaterial(class UMaterialInterface* Parent) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.MakeMIDForMaterial");
	AActor_MakeMIDForMaterial_Params params;

	params.Parent = Parent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool AActor::K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.K2_TeleportTo");
	AActor_K2_TeleportTo_Params params;

	params.DestLocation = DestLocation;
	params.DestRotation = DestRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool AActor::K2_SetActorTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.K2_SetActorTransform");
	AActor_K2_SetActorTransform_Params params;

	params.NewTransform = NewTransform;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;
	params.SweepHitResult = *SweepHitResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool AActor::K2_SetActorRotation(const struct FRotator& NewRotation, bool bTeleportPhysics) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.K2_SetActorRotation");
	AActor_K2_SetActorRotation_Params params;

	params.NewRotation = NewRotation;
	params.bTeleportPhysics = bTeleportPhysics;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void AActor::K2_SetActorRelativeTransform(const struct FTransform& NewRelativeTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.K2_SetActorRelativeTransform");
	AActor_K2_SetActorRelativeTransform_Params params;

	params.NewRelativeTransform = NewRelativeTransform;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;
	params.SweepHitResult = *SweepHitResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::K2_SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.K2_SetActorRelativeRotation");
	AActor_K2_SetActorRelativeRotation_Params params;

	params.NewRelativeRotation = NewRelativeRotation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;
	params.SweepHitResult = *SweepHitResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::K2_SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.K2_SetActorRelativeLocation");
	AActor_K2_SetActorRelativeLocation_Params params;

	params.NewRelativeLocation = NewRelativeLocation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;
	params.SweepHitResult = *SweepHitResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool AActor::K2_SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.K2_SetActorLocationAndRotation");
	AActor_K2_SetActorLocationAndRotation_Params params;

	params.NewLocation = NewLocation;
	params.NewRotation = NewRotation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;
	params.SweepHitResult = *SweepHitResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool AActor::K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.K2_SetActorLocation");
	AActor_K2_SetActorLocation_Params params;

	params.NewLocation = NewLocation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;
	params.SweepHitResult = *SweepHitResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void AActor::K2_OnReset() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.K2_OnReset");
	AActor_K2_OnReset_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::K2_OnEndViewTarget(class APlayerController* PC) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.K2_OnEndViewTarget");
	AActor_K2_OnEndViewTarget_Params params;

	params.PC = PC;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::K2_OnBecomeViewTarget(class APlayerController* PC) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.K2_OnBecomeViewTarget");
	AActor_K2_OnBecomeViewTarget_Params params;

	params.PC = PC;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

class USceneComponent* AActor::K2_GetRootComponent() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.K2_GetRootComponent");
	AActor_K2_GetRootComponent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FRotator AActor::K2_GetActorRotation() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.K2_GetActorRotation");
	AActor_K2_GetActorRotation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector AActor::K2_GetActorLocation() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.K2_GetActorLocation");
	AActor_K2_GetActorLocation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void AActor::K2_DetachFromActor(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.K2_DetachFromActor");
	AActor_K2_DetachFromActor_Params params;

	params.LocationRule = LocationRule;
	params.RotationRule = RotationRule;
	params.ScaleRule = ScaleRule;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::K2_DestroyComponent(class UActorComponent* Component) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.K2_DestroyComponent");
	AActor_K2_DestroyComponent_Params params;

	params.Component = Component;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::K2_DestroyActor_DEPRECATED() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.K2_DestroyActor_DEPRECATED");
	AActor_K2_DestroyActor_DEPRECATED_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::K2_AttachToComponent(class USceneComponent* Parent, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.K2_AttachToComponent");
	AActor_K2_AttachToComponent_Params params;

	params.Parent = Parent;
	params.SocketName = SocketName;
	params.LocationRule = LocationRule;
	params.RotationRule = RotationRule;
	params.ScaleRule = ScaleRule;
	params.bWeldSimulatedBodies = bWeldSimulatedBodies;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::K2_AttachToActor(class AActor* ParentActor, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.K2_AttachToActor");
	AActor_K2_AttachToActor_Params params;

	params.ParentActor = ParentActor;
	params.SocketName = SocketName;
	params.LocationRule = LocationRule;
	params.RotationRule = RotationRule;
	params.ScaleRule = ScaleRule;
	params.bWeldSimulatedBodies = bWeldSimulatedBodies;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::K2_AttachRootComponentToActor(class AActor* InParentActor, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.K2_AttachRootComponentToActor");
	AActor_K2_AttachRootComponentToActor_Params params;

	params.InParentActor = InParentActor;
	params.InSocketName = InSocketName;
	params.AttachLocationType = AttachLocationType;
	params.bWeldSimulatedBodies = bWeldSimulatedBodies;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::K2_AttachRootComponentTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.K2_AttachRootComponentTo");
	AActor_K2_AttachRootComponentTo_Params params;

	params.InParent = InParent;
	params.InSocketName = InSocketName;
	params.AttachLocationType = AttachLocationType;
	params.bWeldSimulatedBodies = bWeldSimulatedBodies;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::K2_AddActorWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.K2_AddActorWorldTransform");
	AActor_K2_AddActorWorldTransform_Params params;

	params.DeltaTransform = DeltaTransform;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;
	params.SweepHitResult = *SweepHitResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::K2_AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.K2_AddActorWorldRotation");
	AActor_K2_AddActorWorldRotation_Params params;

	params.DeltaRotation = DeltaRotation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;
	params.SweepHitResult = *SweepHitResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::K2_AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.K2_AddActorWorldOffset");
	AActor_K2_AddActorWorldOffset_Params params;

	params.DeltaLocation = DeltaLocation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;
	params.SweepHitResult = *SweepHitResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::K2_AddActorLocalTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.K2_AddActorLocalTransform");
	AActor_K2_AddActorLocalTransform_Params params;

	params.NewTransform = NewTransform;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;
	params.SweepHitResult = *SweepHitResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::K2_AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.K2_AddActorLocalRotation");
	AActor_K2_AddActorLocalRotation_Params params;

	params.DeltaRotation = DeltaRotation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;
	params.SweepHitResult = *SweepHitResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::K2_AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.K2_AddActorLocalOffset");
	AActor_K2_AddActorLocalOffset_Params params;

	params.DeltaLocation = DeltaLocation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;
	params.SweepHitResult = *SweepHitResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool AActor::IsOverlappingActor(class AActor* Other) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.IsOverlappingActor");
	AActor_IsOverlappingActor_Params params;

	params.Other = Other;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool AActor::IsChildActor() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.IsChildActor");
	AActor_IsChildActor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool AActor::IsActorTickEnabled() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.IsActorTickEnabled");
	AActor_IsActorTickEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool AActor::IsActorBeingDestroyed() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.IsActorBeingDestroyed");
	AActor_IsActorBeingDestroyed_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool AActor::HasAuthority() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.HasAuthority");
	AActor_HasAuthority_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float AActor::GetVerticalDistanceTo(class AActor* OtherActor) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.GetVerticalDistanceTo");
	AActor_GetVerticalDistanceTo_Params params;

	params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector AActor::GetVelocity() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.GetVelocity");
	AActor_GetVelocity_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FTransform AActor::GetTransform() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.GetTransform");
	AActor_GetTransform_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool AActor::GetTickableWhenPaused() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.GetTickableWhenPaused");
	AActor_GetTickableWhenPaused_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float AActor::GetSquaredDistanceTo(class AActor* OtherActor) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.GetSquaredDistanceTo");
	AActor_GetSquaredDistanceTo_Params params;

	params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UChildActorComponent* AActor::GetParentComponent() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.GetParentComponent");
	AActor_GetParentComponent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class AActor* AActor::GetParentActor() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.GetParentActor");
	AActor_GetParentActor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class AActor* AActor::GetOwner() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.GetOwner");
	AActor_GetOwner_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void AActor::GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.GetOverlappingComponents");
	AActor_GetOverlappingComponents_Params params;

	params.OverlappingComponents = *OverlappingComponents;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.GetOverlappingActors");
	AActor_GetOverlappingActors_Params params;

	params.ClassFilter = ClassFilter;
	params.OverlappingActors = *OverlappingActors;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

float AActor::GetLifeSpan() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.GetLifeSpan");
	AActor_GetLifeSpan_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class AController* AActor::GetInstigatorController() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.GetInstigatorController");
	AActor_GetInstigatorController_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class APawn* AActor::GetInstigator() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.GetInstigator");
	AActor_GetInstigator_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector AActor::GetInputVectorAxisValue(const struct FKey& InputAxisKey) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.GetInputVectorAxisValue");
	AActor_GetInputVectorAxisValue_Params params;

	params.InputAxisKey = InputAxisKey;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float AActor::GetInputAxisValue(const struct FName& InputAxisName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.GetInputAxisValue");
	AActor_GetInputAxisValue_Params params;

	params.InputAxisName = InputAxisName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float AActor::GetInputAxisKeyValue(const struct FKey& InputAxisKey) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.GetInputAxisKeyValue");
	AActor_GetInputAxisKeyValue_Params params;

	params.InputAxisKey = InputAxisKey;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float AActor::GetHorizontalDotProductTo(class AActor* OtherActor) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.GetHorizontalDotProductTo");
	AActor_GetHorizontalDotProductTo_Params params;

	params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float AActor::GetHorizontalDistanceTo(class AActor* OtherActor) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.GetHorizontalDistanceTo");
	AActor_GetHorizontalDistanceTo_Params params;

	params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float AActor::GetGameTimeSinceCreation() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.GetGameTimeSinceCreation");
	AActor_GetGameTimeSinceCreation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float AActor::GetDotProductTo(class AActor* OtherActor) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.GetDotProductTo");
	AActor_GetDotProductTo_Params params;

	params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float AActor::GetDistanceTo(class AActor* OtherActor) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.GetDistanceTo");
	AActor_GetDistanceTo_Params params;

	params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UActorComponent* AActor::GetComponentByTag(class UClass* ComponentClass, const struct FName& Tag) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.GetComponentByTag");
	AActor_GetComponentByTag_Params params;

	params.ComponentClass = ComponentClass;
	params.Tag = Tag;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UActorComponent* AActor::GetComponentByClass(class UClass* ComponentClass) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.GetComponentByClass");
	AActor_GetComponentByClass_Params params;

	params.ComponentClass = ComponentClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FName AActor::GetAttachParentSocketName() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.GetAttachParentSocketName");
	AActor_GetAttachParentSocketName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class AActor* AActor::GetAttachParentActor() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.GetAttachParentActor");
	AActor_GetAttachParentActor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void AActor::GetAttachedActors(TArray<class AActor*>* OutActors) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.GetAttachedActors");
	AActor_GetAttachedActors_Params params;

	params.OutActors = *OutActors;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

class APawn* AActor::GetAssociatedVehicle() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.GetAssociatedVehicle");
	AActor_GetAssociatedVehicle_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class APlayerState* AActor::GetAssociatedPlayerState() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.GetAssociatedPlayerState");
	AActor_GetAssociatedPlayerState_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class APlayerController* AActor::GetAssociatedPlayerController() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.GetAssociatedPlayerController");
	AActor_GetAssociatedPlayerController_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class APawn* AActor::GetAssociatedPawn() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.GetAssociatedPawn");
	AActor_GetAssociatedPawn_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class AController* AActor::GetAssociatedController() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.GetAssociatedController");
	AActor_GetAssociatedController_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class ACharacter* AActor::GetAssociatedCharacter() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.GetAssociatedCharacter");
	AActor_GetAssociatedCharacter_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void AActor::GetAllChildActors(bool bIncludeDescendants, TArray<class AActor*>* ChildActors) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.GetAllChildActors");
	AActor_GetAllChildActors_Params params;

	params.bIncludeDescendants = bIncludeDescendants;
	params.ChildActors = *ChildActors;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

struct FVector AActor::GetActorUpVector() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.GetActorUpVector");
	AActor_GetActorUpVector_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float AActor::GetActorTimeDilation() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.GetActorTimeDilation");
	AActor_GetActorTimeDilation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float AActor::GetActorTickInterval() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.GetActorTickInterval");
	AActor_GetActorTickInterval_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector AActor::GetActorScale3D() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.GetActorScale3D");
	AActor_GetActorScale3D_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector AActor::GetActorRightVector() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.GetActorRightVector");
	AActor_GetActorRightVector_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector AActor::GetActorRelativeScale3D() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.GetActorRelativeScale3D");
	AActor_GetActorRelativeScale3D_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector AActor::GetActorForwardVector() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.GetActorForwardVector");
	AActor_GetActorForwardVector_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void AActor::GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.GetActorEyesViewPoint");
	AActor_GetActorEyesViewPoint_Params params;

	params.OutLocation = *OutLocation;
	params.OutRotation = *OutRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool AActor::GetActorEnableCollision() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.GetActorEnableCollision");
	AActor_GetActorEnableCollision_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void AActor::GetActorBounds(bool bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.GetActorBounds");
	AActor_GetActorBounds_Params params;

	params.bOnlyCollidingComponents = bOnlyCollidingComponents;
	params.Origin = *Origin;
	params.BoxExtent = *BoxExtent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::GetActorAimViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.GetActorAimViewPoint");
	AActor_GetActorAimViewPoint_Params params;

	params.OutLocation = *OutLocation;
	params.OutRotation = *OutRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::GbxDestroyActor(bool bDestroyImmediately) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.GbxDestroyActor");
	AActor_GbxDestroyActor_Params params;

	params.bDestroyImmediately = bDestroyImmediately;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::ForceNetUpdate() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.ForceNetUpdate");
	AActor_ForceNetUpdate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::FlushNetDormancy() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.FlushNetDormancy");
	AActor_FlushNetDormancy_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

class USceneComponent* AActor::FindAttachComponent(const struct FName& SocketName, bool bForegroundLayer) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.FindAttachComponent");
	AActor_FindAttachComponent_Params params;

	params.SocketName = SocketName;
	params.bForegroundLayer = bForegroundLayer;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void AActor::EnableInput(class APlayerController* PlayerController) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.EnableInput");
	AActor_EnableInput_Params params;

	params.PlayerController = PlayerController;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::DisableInput(class APlayerController* PlayerController) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.DisableInput");
	AActor_DisableInput_Params params;

	params.PlayerController = PlayerController;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::DetachRootComponentFromParent(bool bMaintainWorldPosition) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.DetachRootComponentFromParent");
	AActor_DetachRootComponentFromParent_Params params;

	params.bMaintainWorldPosition = bMaintainWorldPosition;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.AddTickPrerequisiteComponent");
	AActor_AddTickPrerequisiteComponent_Params params;

	params.PrerequisiteComponent = PrerequisiteComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AActor::AddTickPrerequisiteActor(class AActor* PrerequisiteActor) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.AddTickPrerequisiteActor");
	AActor_AddTickPrerequisiteActor_Params params;

	params.PrerequisiteActor = PrerequisiteActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

class UActorComponent* AActor::AddComponent(const struct FName& TemplateName, bool bManualAttachment, const struct FTransform& RelativeTransform, class UObject* ComponentTemplateContext) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.AddComponent");
	AActor_AddComponent_Params params;

	params.TemplateName = TemplateName;
	params.bManualAttachment = bManualAttachment;
	params.RelativeTransform = RelativeTransform;
	params.ComponentTemplateContext = ComponentTemplateContext;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void AActor::ActorPostBeginPlaySignature__DelegateSignature() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.ActorPostBeginPlaySignature__DelegateSignature");
	AActor_ActorPostBeginPlaySignature__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool AActor::ActorHasTag(const struct FName& Tag) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Actor.ActorHasTag");
	AActor_ActorHasTag_Params params;

	params.Tag = Tag;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UAnimNotify::Received_Notify(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimNotify.Received_Notify");
	UAnimNotify_Received_Notify_Params params;

	params.MeshComp = MeshComp;
	params.Animation = Animation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UAnimNotify::GetNotifyName() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimNotify.GetNotifyName");
	UAnimNotify_GetNotifyName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UAnimNotifyState::Received_NotifyTick(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float FrameDeltaTime) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimNotifyState.Received_NotifyTick");
	UAnimNotifyState_Received_NotifyTick_Params params;

	params.MeshComp = MeshComp;
	params.Animation = Animation;
	params.FrameDeltaTime = FrameDeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UAnimNotifyState::Received_NotifyEnd(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, EAnimNotifyEndReason Reason) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimNotifyState.Received_NotifyEnd");
	UAnimNotifyState_Received_NotifyEnd_Params params;

	params.MeshComp = MeshComp;
	params.Animation = Animation;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UAnimNotifyState::Received_NotifyBegin(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float TotalDuration) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimNotifyState.Received_NotifyBegin");
	UAnimNotifyState_Received_NotifyBegin_Params params;

	params.MeshComp = MeshComp;
	params.Animation = Animation;
	params.TotalDuration = TotalDuration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UAnimNotifyState::GetNotifyName() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimNotifyState.GetNotifyName");
	UAnimNotifyState_GetNotifyName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UPrimitiveComponent::WakeRigidBody(const struct FName& BoneName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.WakeRigidBody");
	UPrimitiveComponent_WakeRigidBody_Params params;

	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::WakeAllRigidBodies() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.WakeAllRigidBodies");
	UPrimitiveComponent_WakeAllRigidBodies_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetWalkableSlopeOverride(const struct FWalkableSlopeOverride& NewOverride) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetWalkableSlopeOverride");
	UPrimitiveComponent_SetWalkableSlopeOverride_Params params;

	params.NewOverride = NewOverride;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetViewOwner(class AActor* NewViewOwner) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetViewOwner");
	UPrimitiveComponent_SetViewOwner_Params params;

	params.NewViewOwner = NewViewOwner;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetViewFlags(int NewViewFlags, EGbxViewFlagAction Method) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetViewFlags");
	UPrimitiveComponent_SetViewFlags_Params params;

	params.NewViewFlags = NewViewFlags;
	params.Method = Method;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetUseCCD(bool InUseCCD, const struct FName& BoneName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetUseCCD");
	UPrimitiveComponent_SetUseCCD_Params params;

	params.InUseCCD = InUseCCD;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetTranslucentSortPriority(int NewTranslucentSortPriority) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetTranslucentSortPriority");
	UPrimitiveComponent_SetTranslucentSortPriority_Params params;

	params.NewTranslucentSortPriority = NewTranslucentSortPriority;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetSingleSampleShadowFromStationaryLights");
	UPrimitiveComponent_SetSingleSampleShadowFromStationaryLights_Params params;

	params.bNewSingleSampleShadowFromStationaryLights = bNewSingleSampleShadowFromStationaryLights;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetSimulatePhysics(bool bSimulate) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetSimulatePhysics");
	UPrimitiveComponent_SetSimulatePhysics_Params params;

	params.bSimulate = bSimulate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetRenderInMono(bool bValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetRenderInMono");
	UPrimitiveComponent_SetRenderInMono_Params params;

	params.bValue = bValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetRenderInMainPass(bool bValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetRenderInMainPass");
	UPrimitiveComponent_SetRenderInMainPass_Params params;

	params.bValue = bValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetRenderCustomDepth(bool bValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetRenderCustomDepth");
	UPrimitiveComponent_SetRenderCustomDepth_Params params;

	params.bValue = bValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetReceivesSecondaryDecals(bool bNewReceivesSecondaryDecals) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetReceivesSecondaryDecals");
	UPrimitiveComponent_SetReceivesSecondaryDecals_Params params;

	params.bNewReceivesSecondaryDecals = bNewReceivesSecondaryDecals;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetReceivesDecals(bool bNewReceivesDecals) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetReceivesDecals");
	UPrimitiveComponent_SetReceivesDecals_Params params;

	params.bNewReceivesDecals = bNewReceivesDecals;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetPrimitiveFlags(int InPrimitiveFlags, bool bEnabled) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetPrimitiveFlags");
	UPrimitiveComponent_SetPrimitiveFlags_Params params;

	params.InPrimitiveFlags = InPrimitiveFlags;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetPhysMaterialOverride(class UPhysicalMaterial* NewPhysMaterial) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetPhysMaterialOverride");
	UPrimitiveComponent_SetPhysMaterialOverride_Params params;

	params.NewPhysMaterial = NewPhysMaterial;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, const struct FName& BoneName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocityInRadians");
	UPrimitiveComponent_SetPhysicsMaxAngularVelocityInRadians_Params params;

	params.NewMaxAngVel = NewMaxAngVel;
	params.bAddToCurrent = bAddToCurrent;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, const struct FName& BoneName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocityInDegrees");
	UPrimitiveComponent_SetPhysicsMaxAngularVelocityInDegrees_Params params;

	params.NewMaxAngVel = NewMaxAngVel;
	params.bAddToCurrent = bAddToCurrent;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, const struct FName& BoneName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocity");
	UPrimitiveComponent_SetPhysicsMaxAngularVelocity_Params params;

	params.NewMaxAngVel = NewMaxAngVel;
	params.bAddToCurrent = bAddToCurrent;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetPhysicsLinearVelocity(const struct FVector& NewVel, bool bAddToCurrent, const struct FName& BoneName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetPhysicsLinearVelocity");
	UPrimitiveComponent_SetPhysicsLinearVelocity_Params params;

	params.NewVel = NewVel;
	params.bAddToCurrent = bAddToCurrent;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetPhysicsAngularVelocityInRadians(const struct FVector& NewAngVel, bool bAddToCurrent, const struct FName& BoneName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetPhysicsAngularVelocityInRadians");
	UPrimitiveComponent_SetPhysicsAngularVelocityInRadians_Params params;

	params.NewAngVel = NewAngVel;
	params.bAddToCurrent = bAddToCurrent;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetPhysicsAngularVelocityInDegrees(const struct FVector& NewAngVel, bool bAddToCurrent, const struct FName& BoneName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetPhysicsAngularVelocityInDegrees");
	UPrimitiveComponent_SetPhysicsAngularVelocityInDegrees_Params params;

	params.NewAngVel = NewAngVel;
	params.bAddToCurrent = bAddToCurrent;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetPhysicsAngularVelocity(const struct FVector& NewAngVel, bool bAddToCurrent, const struct FName& BoneName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetPhysicsAngularVelocity");
	UPrimitiveComponent_SetPhysicsAngularVelocity_Params params;

	params.NewAngVel = NewAngVel;
	params.bAddToCurrent = bAddToCurrent;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetOwnerNoSee(bool bNewOwnerNoSee) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetOwnerNoSee");
	UPrimitiveComponent_SetOwnerNoSee_Params params;

	params.bNewOwnerNoSee = bNewOwnerNoSee;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetOnlyOwnerSee(bool bNewOnlyOwnerSee) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetOnlyOwnerSee");
	UPrimitiveComponent_SetOnlyOwnerSee_Params params;

	params.bNewOnlyOwnerSee = bNewOnlyOwnerSee;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetNotifyRigidBodyCollision");
	UPrimitiveComponent_SetNotifyRigidBodyCollision_Params params;

	params.bNewNotifyRigidBodyCollision = bNewNotifyRigidBodyCollision;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetMaterialByName(const struct FName& MaterialSlotName, class UMaterialInterface* Material) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetMaterialByName");
	UPrimitiveComponent_SetMaterialByName_Params params;

	params.MaterialSlotName = MaterialSlotName;
	params.Material = Material;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetMaterial(int ElementIndex, class UMaterialInterface* Material) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetMaterial");
	UPrimitiveComponent_SetMaterial_Params params;

	params.ElementIndex = ElementIndex;
	params.Material = Material;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetMassScale(const struct FName& BoneName, float InMassScale) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetMassScale");
	UPrimitiveComponent_SetMassScale_Params params;

	params.BoneName = BoneName;
	params.InMassScale = InMassScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetMassOverrideInKg(const struct FName& BoneName, float MassInKg, bool bOverrideMass) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetMassOverrideInKg");
	UPrimitiveComponent_SetMassOverrideInKg_Params params;

	params.BoneName = BoneName;
	params.MassInKg = MassInKg;
	params.bOverrideMass = bOverrideMass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetLockedAxis(TEnumAsByte<EDOFMode> LockedAxis) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetLockedAxis");
	UPrimitiveComponent_SetLockedAxis_Params params;

	params.LockedAxis = LockedAxis;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetLinearDamping(float InDamping) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetLinearDamping");
	UPrimitiveComponent_SetLinearDamping_Params params;

	params.InDamping = InDamping;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetGenerateWakeEvents(bool bGenerateWakeEvents) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetGenerateWakeEvents");
	UPrimitiveComponent_SetGenerateWakeEvents_Params params;

	params.bGenerateWakeEvents = bGenerateWakeEvents;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetGenerateOverlapEvents(bool bInGenerateOverlapEvents) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetGenerateOverlapEvents");
	UPrimitiveComponent_SetGenerateOverlapEvents_Params params;

	params.bInGenerateOverlapEvents = bInGenerateOverlapEvents;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetForegroundLayer(bool bNewForegroundLayer) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetForegroundLayer");
	UPrimitiveComponent_SetForegroundLayer_Params params;

	params.bNewForegroundLayer = bNewForegroundLayer;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetEnableGravity(bool bGravityEnabled) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetEnableGravity");
	UPrimitiveComponent_SetEnableGravity_Params params;

	params.bGravityEnabled = bGravityEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetCustomMaskMaterial(class UMaterialInterface* CustomMaskMaterial) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetCustomMaskMaterial");
	UPrimitiveComponent_SetCustomMaskMaterial_Params params;

	params.CustomMaskMaterial = CustomMaskMaterial;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetCustomGlowMaterial(class UMaterialInterface* CustomGlowMaterial) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetCustomGlowMaterial");
	UPrimitiveComponent_SetCustomGlowMaterial_Params params;

	params.CustomGlowMaterial = CustomGlowMaterial;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetCustomDepthStencilWriteMask(ERendererStencilMask WriteMaskBit) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetCustomDepthStencilWriteMask");
	UPrimitiveComponent_SetCustomDepthStencilWriteMask_Params params;

	params.WriteMaskBit = WriteMaskBit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetCustomDepthStencilValue(int Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetCustomDepthStencilValue");
	UPrimitiveComponent_SetCustomDepthStencilValue_Params params;

	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetCustomDepthOnView(int ViewIndex, bool Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetCustomDepthOnView");
	UPrimitiveComponent_SetCustomDepthOnView_Params params;

	params.ViewIndex = ViewIndex;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetCustomColorValue(int ViewIndex, const struct FLinearColor& Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetCustomColorValue");
	UPrimitiveComponent_SetCustomColorValue_Params params;

	params.ViewIndex = ViewIndex;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetCullDistance(float NewCullDistance) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetCullDistance");
	UPrimitiveComponent_SetCullDistance_Params params;

	params.NewCullDistance = NewCullDistance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetConstraintMode(TEnumAsByte<EDOFMode> ConstraintMode) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetConstraintMode");
	UPrimitiveComponent_SetConstraintMode_Params params;

	params.ConstraintMode = ConstraintMode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetCollisionResponseToChannel(TEnumAsByte<ECollisionChannel> Channel, TEnumAsByte<ECollisionResponse> NewResponse) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetCollisionResponseToChannel");
	UPrimitiveComponent_SetCollisionResponseToChannel_Params params;

	params.Channel = Channel;
	params.NewResponse = NewResponse;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetCollisionResponseToAllChannels(TEnumAsByte<ECollisionResponse> NewResponse) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetCollisionResponseToAllChannels");
	UPrimitiveComponent_SetCollisionResponseToAllChannels_Params params;

	params.NewResponse = NewResponse;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetCollisionProfileName(const struct FName& InCollisionProfileName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetCollisionProfileName");
	UPrimitiveComponent_SetCollisionProfileName_Params params;

	params.InCollisionProfileName = InCollisionProfileName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetCollisionObjectType(TEnumAsByte<ECollisionChannel> Channel) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetCollisionObjectType");
	UPrimitiveComponent_SetCollisionObjectType_Params params;

	params.Channel = Channel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetCollisionEnabled(TEnumAsByte<ECollisionEnabled> NewType) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetCollisionEnabled");
	UPrimitiveComponent_SetCollisionEnabled_Params params;

	params.NewType = NewType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetCenterOfMass(const struct FVector& CenterOfMassOffset, const struct FName& BoneName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetCenterOfMass");
	UPrimitiveComponent_SetCenterOfMass_Params params;

	params.CenterOfMassOffset = CenterOfMassOffset;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetCastShadow(bool NewCastShadow) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetCastShadow");
	UPrimitiveComponent_SetCastShadow_Params params;

	params.NewCastShadow = NewCastShadow;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetBoundsScale(float NewBoundsScale) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetBoundsScale");
	UPrimitiveComponent_SetBoundsScale_Params params;

	params.NewBoundsScale = NewBoundsScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetAngularDamping(float InDamping) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetAngularDamping");
	UPrimitiveComponent_SetAngularDamping_Params params;

	params.InDamping = InDamping;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetAllUseCCD(bool InUseCCD) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetAllUseCCD");
	UPrimitiveComponent_SetAllUseCCD_Params params;

	params.InUseCCD = InUseCCD;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetAllPhysicsLinearVelocity(const struct FVector& NewVel, bool bAddToCurrent) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetAllPhysicsLinearVelocity");
	UPrimitiveComponent_SetAllPhysicsLinearVelocity_Params params;

	params.NewVel = NewVel;
	params.bAddToCurrent = bAddToCurrent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetAllPhysicsAngularVelocityInRadians(const struct FVector& NewAngVel, bool bAddToCurrent) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetAllPhysicsAngularVelocityInRadians");
	UPrimitiveComponent_SetAllPhysicsAngularVelocityInRadians_Params params;

	params.NewAngVel = NewAngVel;
	params.bAddToCurrent = bAddToCurrent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetAllPhysicsAngularVelocityInDegrees(const struct FVector& NewAngVel, bool bAddToCurrent) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetAllPhysicsAngularVelocityInDegrees");
	UPrimitiveComponent_SetAllPhysicsAngularVelocityInDegrees_Params params;

	params.NewAngVel = NewAngVel;
	params.bAddToCurrent = bAddToCurrent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetAllPhysicsAngularVelocity(const struct FVector& NewAngVel, bool bAddToCurrent) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetAllPhysicsAngularVelocity");
	UPrimitiveComponent_SetAllPhysicsAngularVelocity_Params params;

	params.NewAngVel = NewAngVel;
	params.bAddToCurrent = bAddToCurrent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::SetAllMassScale(float InMassScale) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.SetAllMassScale");
	UPrimitiveComponent_SetAllMassScale_Params params;

	params.InMassScale = InMassScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

struct FVector UPrimitiveComponent::ScaleByMomentOfInertia(const struct FVector& InputVector, const struct FName& BoneName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.ScaleByMomentOfInertia");
	UPrimitiveComponent_ScaleByMomentOfInertia_Params params;

	params.InputVector = InputVector;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UPrimitiveComponent::PutRigidBodyToSleep(const struct FName& BoneName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.PutRigidBodyToSleep");
	UPrimitiveComponent_PutRigidBodyToSleep_Params params;

	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UPrimitiveComponent::K2_LineTraceComponent(const struct FVector& TraceStart, const struct FVector& TraceEnd, bool bTraceComplex, bool bShowTrace, struct FVector* HitLocation, struct FVector* HitNormal, struct FName* BoneName, struct FHitResult* OutHit) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.K2_LineTraceComponent");
	UPrimitiveComponent_K2_LineTraceComponent_Params params;

	params.TraceStart = TraceStart;
	params.TraceEnd = TraceEnd;
	params.bTraceComplex = bTraceComplex;
	params.bShowTrace = bShowTrace;
	params.HitLocation = *HitLocation;
	params.HitNormal = *HitNormal;
	params.BoneName = *BoneName;
	params.OutHit = *OutHit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UPrimitiveComponent::K2_IsQueryCollisionEnabled() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.K2_IsQueryCollisionEnabled");
	UPrimitiveComponent_K2_IsQueryCollisionEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UPrimitiveComponent::K2_IsPhysicsCollisionEnabled() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.K2_IsPhysicsCollisionEnabled");
	UPrimitiveComponent_K2_IsPhysicsCollisionEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UPrimitiveComponent::K2_IsCollisionEnabled() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.K2_IsCollisionEnabled");
	UPrimitiveComponent_K2_IsCollisionEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UPrimitiveComponent::IsOverlappingComponent(class UPrimitiveComponent* OtherComp) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.IsOverlappingComponent");
	UPrimitiveComponent_IsOverlappingComponent_Params params;

	params.OtherComp = OtherComp;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UPrimitiveComponent::IsOverlappingActor(class AActor* Other) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.IsOverlappingActor");
	UPrimitiveComponent_IsOverlappingActor_Params params;

	params.Other = Other;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UPrimitiveComponent::IsGravityEnabled() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.IsGravityEnabled");
	UPrimitiveComponent_IsGravityEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UPrimitiveComponent::IsAnyRigidBodyAwake() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.IsAnyRigidBodyAwake");
	UPrimitiveComponent_IsAnyRigidBodyAwake_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UPrimitiveComponent::IgnoreComponentWhenMoving(class UPrimitiveComponent* Component, bool bShouldIgnore) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.IgnoreComponentWhenMoving");
	UPrimitiveComponent_IgnoreComponentWhenMoving_Params params;

	params.Component = Component;
	params.bShouldIgnore = bShouldIgnore;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::IgnoreActorWhenMoving(class AActor* Actor, bool bShouldIgnore) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.IgnoreActorWhenMoving");
	UPrimitiveComponent_IgnoreActorWhenMoving_Params params;

	params.Actor = Actor;
	params.bShouldIgnore = bShouldIgnore;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

struct FWalkableSlopeOverride UPrimitiveComponent::GetWalkableSlopeOverride() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.GetWalkableSlopeOverride");
	UPrimitiveComponent_GetWalkableSlopeOverride_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UPrimitiveComponent::GetPhysicsLinearVelocityAtPoint(const struct FVector& Point, const struct FName& BoneName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.GetPhysicsLinearVelocityAtPoint");
	UPrimitiveComponent_GetPhysicsLinearVelocityAtPoint_Params params;

	params.Point = Point;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UPrimitiveComponent::GetPhysicsLinearVelocity(const struct FName& BoneName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.GetPhysicsLinearVelocity");
	UPrimitiveComponent_GetPhysicsLinearVelocity_Params params;

	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UPrimitiveComponent::GetPhysicsAngularVelocityInRadians(const struct FName& BoneName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.GetPhysicsAngularVelocityInRadians");
	UPrimitiveComponent_GetPhysicsAngularVelocityInRadians_Params params;

	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UPrimitiveComponent::GetPhysicsAngularVelocityInDegrees(const struct FName& BoneName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.GetPhysicsAngularVelocityInDegrees");
	UPrimitiveComponent_GetPhysicsAngularVelocityInDegrees_Params params;

	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UPrimitiveComponent::GetPhysicsAngularVelocity(const struct FName& BoneName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.GetPhysicsAngularVelocity");
	UPrimitiveComponent_GetPhysicsAngularVelocity_Params params;

	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UPrimitiveComponent::GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OutOverlappingComponents) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.GetOverlappingComponents");
	UPrimitiveComponent_GetOverlappingComponents_Params params;

	params.OutOverlappingComponents = *OutOverlappingComponents;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.GetOverlappingActors");
	UPrimitiveComponent_GetOverlappingActors_Params params;

	params.ClassFilter = ClassFilter;
	params.OverlappingActors = *OverlappingActors;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

int UPrimitiveComponent::GetNumMaterials() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.GetNumMaterials");
	UPrimitiveComponent_GetNumMaterials_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UMaterialInterface* UPrimitiveComponent::GetMaterialFromCollisionFaceIndex(int FaceIndex, int* SectionIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.GetMaterialFromCollisionFaceIndex");
	UPrimitiveComponent_GetMaterialFromCollisionFaceIndex_Params params;

	params.FaceIndex = FaceIndex;
	params.SectionIndex = *SectionIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UMaterialInterface* UPrimitiveComponent::GetMaterial(int ElementIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.GetMaterial");
	UPrimitiveComponent_GetMaterial_Params params;

	params.ElementIndex = ElementIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UPrimitiveComponent::GetMassScale(const struct FName& BoneName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.GetMassScale");
	UPrimitiveComponent_GetMassScale_Params params;

	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UPrimitiveComponent::GetMass() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.GetMass");
	UPrimitiveComponent_GetMass_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UPrimitiveComponent::GetLinearDamping() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.GetLinearDamping");
	UPrimitiveComponent_GetLinearDamping_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UPrimitiveComponent::GetInertiaTensor(const struct FName& BoneName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.GetInertiaTensor");
	UPrimitiveComponent_GetInertiaTensor_Params params;

	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UPrimitiveComponent::GetGenerateOverlapEvents() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.GetGenerateOverlapEvents");
	UPrimitiveComponent_GetGenerateOverlapEvents_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UMaterialInterface* UPrimitiveComponent::GetCustomMaskMaterial() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.GetCustomMaskMaterial");
	UPrimitiveComponent_GetCustomMaskMaterial_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UMaterialInterface* UPrimitiveComponent::GetCustomGlowMaterial() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.GetCustomGlowMaterial");
	UPrimitiveComponent_GetCustomGlowMaterial_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FName UPrimitiveComponent::GetCollisionProfileName() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.GetCollisionProfileName");
	UPrimitiveComponent_GetCollisionProfileName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UPrimitiveComponent::GetClosestPointOnCollision(const struct FVector& Point, const struct FName& BoneName, struct FVector* OutPointOnBody) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.GetClosestPointOnCollision");
	UPrimitiveComponent_GetClosestPointOnCollision_Params params;

	params.Point = Point;
	params.BoneName = BoneName;
	params.OutPointOnBody = *OutPointOnBody;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UPrimitiveComponent::GetCenterOfMass(const struct FName& BoneName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.GetCenterOfMass");
	UPrimitiveComponent_GetCenterOfMass_Params params;

	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UPrimitiveComponent::GetAngularDamping() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.GetAngularDamping");
	UPrimitiveComponent_GetAngularDamping_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UMaterialInstanceDynamic* UPrimitiveComponent::CreateDynamicMaterialInstance(int ElementIndex, class UMaterialInterface* SourceMaterial, const struct FName& OptionalName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.CreateDynamicMaterialInstance");
	UPrimitiveComponent_CreateDynamicMaterialInstance_Params params;

	params.ElementIndex = ElementIndex;
	params.SourceMaterial = SourceMaterial;
	params.OptionalName = OptionalName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UMaterialInstanceDynamic* UPrimitiveComponent::CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, class UMaterialInterface* Parent) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamicFromMaterial");
	UPrimitiveComponent_CreateAndSetMaterialInstanceDynamicFromMaterial_Params params;

	params.ElementIndex = ElementIndex;
	params.Parent = Parent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UMaterialInstanceDynamic* UPrimitiveComponent::CreateAndSetMaterialInstanceDynamic(int ElementIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamic");
	UPrimitiveComponent_CreateAndSetMaterialInstanceDynamic_Params params;

	params.ElementIndex = ElementIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UPrimitiveComponent::ClearMoveIgnoreComponents() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.ClearMoveIgnoreComponents");
	UPrimitiveComponent_ClearMoveIgnoreComponents_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::ClearMoveIgnoreActors() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.ClearMoveIgnoreActors");
	UPrimitiveComponent_ClearMoveIgnoreActors_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UPrimitiveComponent::CanCharacterStepUp(class APawn* Pawn) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.CanCharacterStepUp");
	UPrimitiveComponent_CanCharacterStepUp_Params params;

	params.Pawn = Pawn;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UPrimitiveComponent::AddTorqueInRadians(const struct FVector& Torque, const struct FName& BoneName, bool bAccelChange) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.AddTorqueInRadians");
	UPrimitiveComponent_AddTorqueInRadians_Params params;

	params.Torque = Torque;
	params.BoneName = BoneName;
	params.bAccelChange = bAccelChange;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::AddTorqueInDegrees(const struct FVector& Torque, const struct FName& BoneName, bool bAccelChange) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.AddTorqueInDegrees");
	UPrimitiveComponent_AddTorqueInDegrees_Params params;

	params.Torque = Torque;
	params.BoneName = BoneName;
	params.bAccelChange = bAccelChange;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::AddTorque(const struct FVector& Torque, const struct FName& BoneName, bool bAccelChange) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.AddTorque");
	UPrimitiveComponent_AddTorque_Params params;

	params.Torque = Torque;
	params.BoneName = BoneName;
	params.bAccelChange = bAccelChange;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::AddRadialImpulse(const struct FVector& Origin, float Radius, float Strength, TEnumAsByte<ERadialImpulseFalloff> Falloff, bool bVelChange) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.AddRadialImpulse");
	UPrimitiveComponent_AddRadialImpulse_Params params;

	params.Origin = Origin;
	params.Radius = Radius;
	params.Strength = Strength;
	params.Falloff = Falloff;
	params.bVelChange = bVelChange;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::AddRadialForce(const struct FVector& Origin, float Radius, float Strength, TEnumAsByte<ERadialImpulseFalloff> Falloff, bool bAccelChange) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.AddRadialForce");
	UPrimitiveComponent_AddRadialForce_Params params;

	params.Origin = Origin;
	params.Radius = Radius;
	params.Strength = Strength;
	params.Falloff = Falloff;
	params.bAccelChange = bAccelChange;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::AddImpulseAtLocation(const struct FVector& Impulse, const struct FVector& Location, const struct FName& BoneName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.AddImpulseAtLocation");
	UPrimitiveComponent_AddImpulseAtLocation_Params params;

	params.Impulse = Impulse;
	params.Location = Location;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::AddImpulse(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.AddImpulse");
	UPrimitiveComponent_AddImpulse_Params params;

	params.Impulse = Impulse;
	params.BoneName = BoneName;
	params.bVelChange = bVelChange;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::AddForceAtLocationLocal(const struct FVector& Force, const struct FVector& Location, const struct FName& BoneName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.AddForceAtLocationLocal");
	UPrimitiveComponent_AddForceAtLocationLocal_Params params;

	params.Force = Force;
	params.Location = Location;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::AddForceAtLocation(const struct FVector& Force, const struct FVector& Location, const struct FName& BoneName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.AddForceAtLocation");
	UPrimitiveComponent_AddForceAtLocation_Params params;

	params.Force = Force;
	params.Location = Location;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::AddForce(const struct FVector& Force, const struct FName& BoneName, bool bAccelChange) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.AddForce");
	UPrimitiveComponent_AddForce_Params params;

	params.Force = Force;
	params.BoneName = BoneName;
	params.bAccelChange = bAccelChange;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::AddAngularImpulseInRadians(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.AddAngularImpulseInRadians");
	UPrimitiveComponent_AddAngularImpulseInRadians_Params params;

	params.Impulse = Impulse;
	params.BoneName = BoneName;
	params.bVelChange = bVelChange;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::AddAngularImpulseInDegrees(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.AddAngularImpulseInDegrees");
	UPrimitiveComponent_AddAngularImpulseInDegrees_Params params;

	params.Impulse = Impulse;
	params.BoneName = BoneName;
	params.bVelChange = bVelChange;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPrimitiveComponent::AddAngularImpulse(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PrimitiveComponent.AddAngularImpulse");
	UPrimitiveComponent_AddAngularImpulse_Params params;

	params.Impulse = Impulse;
	params.BoneName = BoneName;
	params.bVelChange = bVelChange;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UMeshComponent::SetVectorParameterValueOnMaterials(const struct FName& ParameterName, const struct FVector& ParameterValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MeshComponent.SetVectorParameterValueOnMaterials");
	UMeshComponent_SetVectorParameterValueOnMaterials_Params params;

	params.ParameterName = ParameterName;
	params.ParameterValue = ParameterValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UMeshComponent::SetTextureParameterValueOnMaterials(const struct FName& ParameterName, class UTexture* ParameterValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MeshComponent.SetTextureParameterValueOnMaterials");
	UMeshComponent_SetTextureParameterValueOnMaterials_Params params;

	params.ParameterName = ParameterName;
	params.ParameterValue = ParameterValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UMeshComponent::SetScalarParameterValueOnMaterials(const struct FName& ParameterName, float ParameterValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MeshComponent.SetScalarParameterValueOnMaterials");
	UMeshComponent_SetScalarParameterValueOnMaterials_Params params;

	params.ParameterName = ParameterName;
	params.ParameterValue = ParameterValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UMeshComponent::SetLinearColorParameterValueOnMaterials(const struct FName& ParameterName, const struct FLinearColor& ParameterValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MeshComponent.SetLinearColorParameterValueOnMaterials");
	UMeshComponent_SetLinearColorParameterValueOnMaterials_Params params;

	params.ParameterName = ParameterName;
	params.ParameterValue = ParameterValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UMeshComponent::PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MeshComponent.PrestreamTextures");
	UMeshComponent_PrestreamTextures_Params params;

	params.Seconds = Seconds;
	params.bPrioritizeCharacterTextures = bPrioritizeCharacterTextures;
	params.CinematicTextureGroups = CinematicTextureGroups;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UMeshComponent::IsMaterialSlotNameValid(const struct FName& MaterialSlotName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MeshComponent.IsMaterialSlotNameValid");
	UMeshComponent_IsMaterialSlotNameValid_Params params;

	params.MaterialSlotName = MaterialSlotName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UMeshComponent::GetMaterialIndex(const struct FName& MaterialSlotName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MeshComponent.GetMaterialIndex");
	UMeshComponent_GetMaterialIndex_Params params;

	params.MaterialSlotName = MaterialSlotName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void USkinnedMeshComponent::UnHideBoneByName(const struct FName& BoneName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkinnedMeshComponent.UnHideBoneByName");
	USkinnedMeshComponent_UnHideBoneByName_Params params;

	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkinnedMeshComponent::TransformToBoneSpace(const struct FName& BoneName, const struct FVector& InPosition, const struct FRotator& InRotation, struct FVector* OutPosition, struct FRotator* OutRotation) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkinnedMeshComponent.TransformToBoneSpace");
	USkinnedMeshComponent_TransformToBoneSpace_Params params;

	params.BoneName = BoneName;
	params.InPosition = InPosition;
	params.InRotation = InRotation;
	params.OutPosition = *OutPosition;
	params.OutRotation = *OutRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkinnedMeshComponent::TransformFromBoneSpace(const struct FName& BoneName, const struct FVector& InPosition, const struct FRotator& InRotation, struct FVector* OutPosition, struct FRotator* OutRotation) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkinnedMeshComponent.TransformFromBoneSpace");
	USkinnedMeshComponent_TransformFromBoneSpace_Params params;

	params.BoneName = BoneName;
	params.InPosition = InPosition;
	params.InRotation = InRotation;
	params.OutPosition = *OutPosition;
	params.OutRotation = *OutRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkinnedMeshComponent::ShowMaterialSection(int MaterialID, bool bShow, int LODIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkinnedMeshComponent.ShowMaterialSection");
	USkinnedMeshComponent_ShowMaterialSection_Params params;

	params.MaterialID = MaterialID;
	params.bShow = bShow;
	params.LODIndex = LODIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkinnedMeshComponent::ShowAllMaterialSections(int LODIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkinnedMeshComponent.ShowAllMaterialSections");
	USkinnedMeshComponent_ShowAllMaterialSections_Params params;

	params.LODIndex = LODIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkinnedMeshComponent::SetVertexColorOverride_LinearColor(int ColorChannelIndex, int LODIndex, TArray<struct FLinearColor> VertexColors) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkinnedMeshComponent.SetVertexColorOverride_LinearColor");
	USkinnedMeshComponent_SetVertexColorOverride_LinearColor_Params params;

	params.ColorChannelIndex = ColorChannelIndex;
	params.LODIndex = LODIndex;
	params.VertexColors = VertexColors;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkinnedMeshComponent::SetSkinWeightOverride(int LODIndex, TArray<struct FSkelMeshSkinWeightInfo> SkinWeights) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkinnedMeshComponent.SetSkinWeightOverride");
	USkinnedMeshComponent_SetSkinWeightOverride_Params params;

	params.LODIndex = LODIndex;
	params.SkinWeights = SkinWeights;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkinnedMeshComponent::SetSkeletalMesh(class USkeletalMesh* NewMesh, bool bReinitPose) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkinnedMeshComponent.SetSkeletalMesh");
	USkinnedMeshComponent_SetSkeletalMesh_Params params;

	params.NewMesh = NewMesh;
	params.bReinitPose = bReinitPose;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkinnedMeshComponent::SetRenderStatic(bool bNewValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkinnedMeshComponent.SetRenderStatic");
	USkinnedMeshComponent_SetRenderStatic_Params params;

	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkinnedMeshComponent::SetPhysicsAsset(class UPhysicsAsset* NewPhysicsAsset, bool bForceReInit) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkinnedMeshComponent.SetPhysicsAsset");
	USkinnedMeshComponent_SetPhysicsAsset_Params params;

	params.NewPhysicsAsset = NewPhysicsAsset;
	params.bForceReInit = bForceReInit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkinnedMeshComponent::SetMinLOD(int InNewMinLOD) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkinnedMeshComponent.SetMinLOD");
	USkinnedMeshComponent_SetMinLOD_Params params;

	params.InNewMinLOD = InNewMinLOD;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkinnedMeshComponent::SetMasterPoseComponent(class USkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkinnedMeshComponent.SetMasterPoseComponent");
	USkinnedMeshComponent_SetMasterPoseComponent_Params params;

	params.NewMasterBoneComponent = NewMasterBoneComponent;
	params.bForceUpdate = bForceUpdate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkinnedMeshComponent::SetForcedLOD(int InNewForcedLOD) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkinnedMeshComponent.SetForcedLOD");
	USkinnedMeshComponent_SetForcedLOD_Params params;

	params.InNewForcedLOD = InNewForcedLOD;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkinnedMeshComponent::SetCastCapsuleIndirectShadow(bool bNewValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkinnedMeshComponent.SetCastCapsuleIndirectShadow");
	USkinnedMeshComponent_SetCastCapsuleIndirectShadow_Params params;

	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkinnedMeshComponent::SetCastCapsuleDirectShadow(bool bNewValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkinnedMeshComponent.SetCastCapsuleDirectShadow");
	USkinnedMeshComponent_SetCastCapsuleDirectShadow_Params params;

	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkinnedMeshComponent::SetCapsuleIndirectShadowMinVisibility(float NewValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkinnedMeshComponent.SetCapsuleIndirectShadowMinVisibility");
	USkinnedMeshComponent_SetCapsuleIndirectShadowMinVisibility_Params params;

	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool USkinnedMeshComponent::IsMaterialSectionShown(int MaterialID, int LODIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkinnedMeshComponent.IsMaterialSectionShown");
	USkinnedMeshComponent_IsMaterialSectionShown_Params params;

	params.MaterialID = MaterialID;
	params.LODIndex = LODIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool USkinnedMeshComponent::IsBoneHiddenByName(const struct FName& BoneName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkinnedMeshComponent.IsBoneHiddenByName");
	USkinnedMeshComponent_IsBoneHiddenByName_Params params;

	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void USkinnedMeshComponent::HideBoneByName(const struct FName& BoneName, TEnumAsByte<EPhysBodyOp> PhysBodyOption) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkinnedMeshComponent.HideBoneByName");
	USkinnedMeshComponent_HideBoneByName_Params params;

	params.BoneName = BoneName;
	params.PhysBodyOption = PhysBodyOption;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

struct FName USkinnedMeshComponent::GetSocketBoneName(const struct FName& InSocketName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkinnedMeshComponent.GetSocketBoneName");
	USkinnedMeshComponent_GetSocketBoneName_Params params;

	params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector USkinnedMeshComponent::GetRefPosePosition(int BoneIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkinnedMeshComponent.GetRefPosePosition");
	USkinnedMeshComponent_GetRefPosePosition_Params params;

	params.BoneIndex = BoneIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FName USkinnedMeshComponent::GetParentBone(const struct FName& BoneName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkinnedMeshComponent.GetParentBone");
	USkinnedMeshComponent_GetParentBone_Params params;

	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int USkinnedMeshComponent::GetNumLODs() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkinnedMeshComponent.GetNumLODs");
	USkinnedMeshComponent_GetNumLODs_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int USkinnedMeshComponent::GetNumBones() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkinnedMeshComponent.GetNumBones");
	USkinnedMeshComponent_GetNumBones_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FName USkinnedMeshComponent::GetBoneName(int BoneIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkinnedMeshComponent.GetBoneName");
	USkinnedMeshComponent_GetBoneName_Params params;

	params.BoneIndex = BoneIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int USkinnedMeshComponent::GetBoneIndex(const struct FName& BoneName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkinnedMeshComponent.GetBoneIndex");
	USkinnedMeshComponent_GetBoneIndex_Params params;

	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FName USkinnedMeshComponent::FindClosestBone_K2(const struct FVector& TestLocation, float IgnoreScale, bool bRequirePhysicsAsset, struct FVector* BoneLocation) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkinnedMeshComponent.FindClosestBone_K2");
	USkinnedMeshComponent_FindClosestBone_K2_Params params;

	params.TestLocation = TestLocation;
	params.IgnoreScale = IgnoreScale;
	params.bRequirePhysicsAsset = bRequirePhysicsAsset;
	params.BoneLocation = *BoneLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void USkinnedMeshComponent::ClearVertexColorOverride(int ColorChannelIndex, int LODIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkinnedMeshComponent.ClearVertexColorOverride");
	USkinnedMeshComponent_ClearVertexColorOverride_Params params;

	params.ColorChannelIndex = ColorChannelIndex;
	params.LODIndex = LODIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkinnedMeshComponent::ClearSkinWeightOverride(int LODIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkinnedMeshComponent.ClearSkinWeightOverride");
	USkinnedMeshComponent_ClearSkinWeightOverride_Params params;

	params.LODIndex = LODIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool USkinnedMeshComponent::BoneIsChildOf(const struct FName& BoneName, const struct FName& ParentBoneName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkinnedMeshComponent.BoneIsChildOf");
	USkinnedMeshComponent_BoneIsChildOf_Params params;

	params.BoneName = BoneName;
	params.ParentBoneName = ParentBoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void USkeletalMesh::SetLODSettings(class USkeletalMeshLODSettings* InLODSettings) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMesh.SetLODSettings");
	USkeletalMesh_SetLODSettings_Params params;

	params.InLODSettings = InLODSettings;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMesh::PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups, class UObject* WorldContext) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMesh.PrestreamTextures");
	USkeletalMesh_PrestreamTextures_Params params;

	params.Seconds = Seconds;
	params.bPrioritizeCharacterTextures = bPrioritizeCharacterTextures;
	params.CinematicTextureGroups = CinematicTextureGroups;
	params.WorldContext = WorldContext;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

int USkeletalMesh::NumSockets() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMesh.NumSockets");
	USkeletalMesh_NumSockets_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool USkeletalMesh::IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMesh.IsSectionUsingCloth");
	USkeletalMesh_IsSectionUsingCloth_Params params;

	params.InSectionIndex = InSectionIndex;
	params.bCheckCorrespondingSections = bCheckCorrespondingSections;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class USkeletalMeshSocket* USkeletalMesh::GetSocketByIndex(int Index) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMesh.GetSocketByIndex");
	USkeletalMesh_GetSocketByIndex_Params params;

	params.Index = Index;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UNodeMappingContainer* USkeletalMesh::GetNodeMappingContainer(class UBlueprint* SourceAsset) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMesh.GetNodeMappingContainer");
	USkeletalMesh_GetNodeMappingContainer_Params params;

	params.SourceAsset = SourceAsset;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FBoxSphereBounds USkeletalMesh::GetImportedBounds() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMesh.GetImportedBounds");
	USkeletalMesh_GetImportedBounds_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FBoxSphereBounds USkeletalMesh::GetBounds() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMesh.GetBounds");
	USkeletalMesh_GetBounds_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class USkeletalMeshSocket* USkeletalMesh::FindSocketAndIndex(const struct FName& InSocketName, int* OutIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMesh.FindSocketAndIndex");
	USkeletalMesh_FindSocketAndIndex_Params params;

	params.InSocketName = InSocketName;
	params.OutIndex = *OutIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class USkeletalMeshSocket* USkeletalMesh::FindSocket(const struct FName& InSocketName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMesh.FindSocket");
	USkeletalMesh_FindSocket_Params params;

	params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UInputComponent::WasControllerKeyJustReleased(const struct FKey& Key) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.InputComponent.WasControllerKeyJustReleased");
	UInputComponent_WasControllerKeyJustReleased_Params params;

	params.Key = Key;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UInputComponent::WasControllerKeyJustPressed(const struct FKey& Key) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.InputComponent.WasControllerKeyJustPressed");
	UInputComponent_WasControllerKeyJustPressed_Params params;

	params.Key = Key;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UInputComponent::IsControllerKeyDown(const struct FKey& Key) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.InputComponent.IsControllerKeyDown");
	UInputComponent_IsControllerKeyDown_Params params;

	params.Key = Key;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UInputComponent::GetTouchState(int FingerIndex, float* LocationX, float* LocationY, bool* bIsCurrentlyPressed) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.InputComponent.GetTouchState");
	UInputComponent_GetTouchState_Params params;

	params.FingerIndex = FingerIndex;
	params.LocationX = *LocationX;
	params.LocationY = *LocationY;
	params.bIsCurrentlyPressed = *bIsCurrentlyPressed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

struct FVector UInputComponent::GetControllerVectorKeyState(const struct FKey& Key) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.InputComponent.GetControllerVectorKeyState");
	UInputComponent_GetControllerVectorKeyState_Params params;

	params.Key = Key;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UInputComponent::GetControllerMouseDelta(float* DeltaX, float* DeltaY) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.InputComponent.GetControllerMouseDelta");
	UInputComponent_GetControllerMouseDelta_Params params;

	params.DeltaX = *DeltaX;
	params.DeltaY = *DeltaY;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

float UInputComponent::GetControllerKeyTimeDown(const struct FKey& Key) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.InputComponent.GetControllerKeyTimeDown");
	UInputComponent_GetControllerKeyTimeDown_Params params;

	params.Key = Key;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UInputComponent::GetControllerAnalogStickState(TEnumAsByte<EControllerAnalogStick> WhichStick, float* StickX, float* StickY) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.InputComponent.GetControllerAnalogStickState");
	UInputComponent_GetControllerAnalogStickState_Params params;

	params.WhichStick = WhichStick;
	params.StickX = *StickX;
	params.StickY = *StickY;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

float UInputComponent::GetControllerAnalogKeyState(const struct FKey& Key) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.InputComponent.GetControllerAnalogKeyState");
	UInputComponent_GetControllerAnalogKeyState_Params params;

	params.Key = Key;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void AController::UnPossess() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Controller.UnPossess");
	AController_UnPossess_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AController::StopMovement() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Controller.StopMovement");
	AController_StopMovement_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AController::SetInitialLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Controller.SetInitialLocationAndRotation");
	AController_SetInitialLocationAndRotation_Params params;

	params.NewLocation = NewLocation;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AController::SetIgnoreMoveInput(bool bNewMoveInput) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Controller.SetIgnoreMoveInput");
	AController_SetIgnoreMoveInput_Params params;

	params.bNewMoveInput = bNewMoveInput;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AController::SetIgnoreLookInput(bool bNewLookInput) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Controller.SetIgnoreLookInput");
	AController_SetIgnoreLookInput_Params params;

	params.bNewLookInput = bNewLookInput;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AController::SetControlRotation(const struct FRotator& NewRotation, bool bResetCamera) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Controller.SetControlRotation");
	AController_SetControlRotation_Params params;

	params.NewRotation = NewRotation;
	params.bResetCamera = bResetCamera;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AController::ResetIgnoreMoveInput() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Controller.ResetIgnoreMoveInput");
	AController_ResetIgnoreMoveInput_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AController::ResetIgnoreLookInput() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Controller.ResetIgnoreLookInput");
	AController_ResetIgnoreLookInput_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AController::ResetIgnoreInputFlags() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Controller.ResetIgnoreInputFlags");
	AController_ResetIgnoreInputFlags_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AController::ReceiveInstigatedAnyDamage(float Damage, class UDamageType* DamageType, class AActor* DamagedActor, class AActor* DamageCauser) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Controller.ReceiveInstigatedAnyDamage");
	AController_ReceiveInstigatedAnyDamage_Params params;

	params.Damage = Damage;
	params.DamageType = DamageType;
	params.DamagedActor = DamagedActor;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AController::Possess(class APawn* InPawn) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Controller.Possess");
	AController_Possess_Params params;

	params.InPawn = InPawn;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AController::OnRep_PlayerState() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Controller.OnRep_PlayerState");
	AController_OnRep_PlayerState_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AController::OnRep_Pawn() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Controller.OnRep_Pawn");
	AController_OnRep_Pawn_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool AController::LineOfSightTo(class AActor* Other, const struct FVector& ViewPoint, bool bAlternateChecks) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Controller.LineOfSightTo");
	AController_LineOfSightTo_Params params;

	params.Other = Other;
	params.ViewPoint = ViewPoint;
	params.bAlternateChecks = bAlternateChecks;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class APawn* AController::K2_GetPawn() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Controller.K2_GetPawn");
	AController_K2_GetPawn_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool AController::IsPlayerController() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Controller.IsPlayerController");
	AController_IsPlayerController_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool AController::IsMoveInputIgnored() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Controller.IsMoveInputIgnored");
	AController_IsMoveInputIgnored_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool AController::IsLookInputIgnored() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Controller.IsLookInputIgnored");
	AController_IsLookInputIgnored_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool AController::IsLocalPlayerController() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Controller.IsLocalPlayerController");
	AController_IsLocalPlayerController_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool AController::IsLocalController() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Controller.IsLocalController");
	AController_IsLocalController_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class AActor* AController::GetViewTarget() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Controller.GetViewTarget");
	AController_GetViewTarget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FRotator AController::GetDesiredRotation() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Controller.GetDesiredRotation");
	AController_GetDesiredRotation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FRotator AController::GetControlRotation() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Controller.GetControlRotation");
	AController_GetControlRotation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void AController::ClientSetRotation(const struct FRotator& NewRotation, bool bResetCamera) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Controller.ClientSetRotation");
	AController_ClientSetRotation_Params params;

	params.NewRotation = NewRotation;
	params.bResetCamera = bResetCamera;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AController::ClientSetLocation(const struct FVector& NewLocation, const struct FRotator& NewRotation) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Controller.ClientSetLocation");
	AController_ClientSetLocation_Params params;

	params.NewLocation = NewLocation;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

class APlayerController* AController::CastToPlayerController() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Controller.CastToPlayerController");
	AController_CastToPlayerController_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool APlayerController::WasInputKeyJustReleased(const struct FKey& Key) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.WasInputKeyJustReleased");
	APlayerController_WasInputKeyJustReleased_Params params;

	params.Key = Key;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool APlayerController::WasInputKeyJustPressed(const struct FKey& Key) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.WasInputKeyJustPressed");
	APlayerController_WasInputKeyJustPressed_Params params;

	params.Key = Key;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void APlayerController::ToggleSpeaking(bool bInSpeaking) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ToggleSpeaking");
	APlayerController_ToggleSpeaking_Params params;

	params.bInSpeaking = bInSpeaking;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::SwitchLevel(const class FString& URL) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.SwitchLevel");
	APlayerController_SwitchLevel_Params params;

	params.URL = URL;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::StopHapticEffect(EControllerHand Hand) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.StopHapticEffect");
	APlayerController_StopHapticEffect_Params params;

	params.Hand = Hand;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::StartFire(unsigned char FireModeNum) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.StartFire");
	APlayerController_StartFire_Params params;

	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::SetVirtualJoystickVisibility(bool bVisible) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.SetVirtualJoystickVisibility");
	APlayerController_SetVirtualJoystickVisibility_Params params;

	params.bVisible = bVisible;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::SetViewTargetWithBlend(class AActor* NewViewTarget, float BlendTime, TEnumAsByte<EViewTargetBlendFunction> BlendFunc, float BlendExp, bool bLockOutgoing) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.SetViewTargetWithBlend");
	APlayerController_SetViewTargetWithBlend_Params params;

	params.NewViewTarget = NewViewTarget;
	params.BlendTime = BlendTime;
	params.BlendFunc = BlendFunc;
	params.BlendExp = BlendExp;
	params.bLockOutgoing = bLockOutgoing;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::SetPlayerViewRenderingEnabled(bool bInViewRenderingEnabled) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.SetPlayerViewRenderingEnabled");
	APlayerController_SetPlayerViewRenderingEnabled_Params params;

	params.bInViewRenderingEnabled = bInViewRenderingEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::SetName(const class FString& S) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.SetName");
	APlayerController_SetName_Params params;

	params.S = S;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::SetMouseLocation(int X, int Y) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.SetMouseLocation");
	APlayerController_SetMouseLocation_Params params;

	params.X = X;
	params.Y = Y;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::SetMouseCursorWidget(TEnumAsByte<EMouseCursor> Cursor, class UUserWidget* CursorWidget) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.SetMouseCursorWidget");
	APlayerController_SetMouseCursorWidget_Params params;

	params.Cursor = Cursor;
	params.CursorWidget = CursorWidget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::SetHapticsByValue(float Frequency, float Amplitude, EControllerHand Hand) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.SetHapticsByValue");
	APlayerController_SetHapticsByValue_Params params;

	params.Frequency = Frequency;
	params.Amplitude = Amplitude;
	params.Hand = Hand;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::SetDisableHaptics(bool bNewDisabled) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.SetDisableHaptics");
	APlayerController_SetDisableHaptics_Params params;

	params.bNewDisabled = bNewDisabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::SetControllerLightColor(const struct FColor& Color) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.SetControllerLightColor");
	APlayerController_SetControllerLightColor_Params params;

	params.Color = Color;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.SetCinematicMode");
	APlayerController_SetCinematicMode_Params params;

	params.bInCinematicMode = bInCinematicMode;
	params.bHidePlayer = bHidePlayer;
	params.bAffectsHUD = bAffectsHUD;
	params.bAffectsMovement = bAffectsMovement;
	params.bAffectsTurning = bAffectsTurning;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::SetAudioListenerOverride(class USceneComponent* AttachToComponent, const struct FVector& Location, const struct FRotator& Rotation) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.SetAudioListenerOverride");
	APlayerController_SetAudioListenerOverride_Params params;

	params.AttachToComponent = AttachToComponent;
	params.Location = Location;
	params.Rotation = Rotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::SetAudioListenerAttenuationOverride(class USceneComponent* AttachToComponent, const struct FVector& AttenuationLocationOVerride) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.SetAudioListenerAttenuationOverride");
	APlayerController_SetAudioListenerAttenuationOverride_Params params;

	params.AttachToComponent = AttachToComponent;
	params.AttenuationLocationOVerride = AttenuationLocationOVerride;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ServerViewSelf(const struct FViewTargetTransitionParams& TransitionParams) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ServerViewSelf");
	APlayerController_ServerViewSelf_Params params;

	params.TransitionParams = TransitionParams;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ServerViewPrevPlayer() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ServerViewPrevPlayer");
	APlayerController_ServerViewPrevPlayer_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ServerViewNextPlayer() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ServerViewNextPlayer");
	APlayerController_ServerViewNextPlayer_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ServerVerifyViewTarget() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ServerVerifyViewTarget");
	APlayerController_ServerVerifyViewTarget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ServerUpdateMultipleLevelsVisibility(TArray<struct FUpdateLevelVisibilityLevelInfo> LevelVisibilities, const struct FName& WorldName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ServerUpdateMultipleLevelsVisibility");
	APlayerController_ServerUpdateMultipleLevelsVisibility_Params params;

	params.LevelVisibilities = LevelVisibilities;
	params.WorldName = WorldName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ServerUpdateLevelVisibility(const struct FName& PackageName, const struct FName& WorldName, bool bIsVisible) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ServerUpdateLevelVisibility");
	APlayerController_ServerUpdateLevelVisibility_Params params;

	params.PackageName = PackageName;
	params.WorldName = WorldName;
	params.bIsVisible = bIsVisible;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ServerUpdateCamera(const struct FVector_NetQuantize& CamLoc, int CamPitchAndYaw, float CamFOV) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ServerUpdateCamera");
	APlayerController_ServerUpdateCamera_Params params;

	params.CamLoc = CamLoc;
	params.CamPitchAndYaw = CamPitchAndYaw;
	params.CamFOV = CamFOV;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ServerUnmutePlayer(const struct FUniqueNetIdRepl& PlayerId) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ServerUnmutePlayer");
	APlayerController_ServerUnmutePlayer_Params params;

	params.PlayerId = PlayerId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ServerToggleAILogging() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ServerToggleAILogging");
	APlayerController_ServerToggleAILogging_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ServerShortTimeout() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ServerShortTimeout");
	APlayerController_ServerShortTimeout_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ServerSetSpectatorWaiting(bool bWaiting) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ServerSetSpectatorWaiting");
	APlayerController_ServerSetSpectatorWaiting_Params params;

	params.bWaiting = bWaiting;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ServerSetSpectatorLocation(const struct FVector& NewLoc, const struct FRotator& NewRot) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ServerSetSpectatorLocation");
	APlayerController_ServerSetSpectatorLocation_Params params;

	params.NewLoc = NewLoc;
	params.NewRot = NewRot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ServerRestartPlayer() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ServerRestartPlayer");
	APlayerController_ServerRestartPlayer_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ServerPause() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ServerPause");
	APlayerController_ServerPause_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ServerNotifyLoadedWorld(const struct FName& WorldPackageName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ServerNotifyLoadedWorld");
	APlayerController_ServerNotifyLoadedWorld_Params params;

	params.WorldPackageName = WorldPackageName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ServerMutePlayer(const struct FUniqueNetIdRepl& PlayerId) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ServerMutePlayer");
	APlayerController_ServerMutePlayer_Params params;

	params.PlayerId = PlayerId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ServerGbxConsoleCommand(const struct FReplicatedConsoleCommandContext& InContext) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ServerGbxConsoleCommand");
	APlayerController_ServerGbxConsoleCommand_Params params;

	params.InContext = InContext;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ServerDestroy() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ServerDestroy");
	APlayerController_ServerDestroy_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ServerCheckClientPossessionReliable() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ServerCheckClientPossessionReliable");
	APlayerController_ServerCheckClientPossessionReliable_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ServerCheckClientPossession() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ServerCheckClientPossession");
	APlayerController_ServerCheckClientPossession_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ServerChangeName(const class FString& S) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ServerChangeName");
	APlayerController_ServerChangeName_Params params;

	params.S = S;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ServerCamera(const struct FName& NewMode) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ServerCamera");
	APlayerController_ServerCamera_Params params;

	params.NewMode = NewMode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ServerAcknowledgePossession(class APawn* P) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ServerAcknowledgePossession");
	APlayerController_ServerAcknowledgePossession_Params params;

	params.P = P;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::SendToConsole(const class FString& Command) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.SendToConsole");
	APlayerController_SendToConsole_Params params;

	params.Command = Command;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::RestartLevel() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.RestartLevel");
	APlayerController_RestartLevel_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ResetControllerLightColor() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ResetControllerLightColor");
	APlayerController_ResetControllerLightColor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool APlayerController::ProjectWorldLocationToScreen(const struct FVector& WorldLocation, bool bPlayerViewportRelative, bool bUseForegroundProjection, struct FVector2D* ScreenLocation) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ProjectWorldLocationToScreen");
	APlayerController_ProjectWorldLocationToScreen_Params params;

	params.WorldLocation = WorldLocation;
	params.bPlayerViewportRelative = bPlayerViewportRelative;
	params.bUseForegroundProjection = bUseForegroundProjection;
	params.ScreenLocation = *ScreenLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void APlayerController::PlayHapticEffect(class UHapticFeedbackEffect_Base* HapticEffect, EControllerHand Hand, float Scale, bool bLoop) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.PlayHapticEffect");
	APlayerController_PlayHapticEffect_Params params;

	params.HapticEffect = HapticEffect;
	params.Hand = Hand;
	params.Scale = Scale;
	params.bLoop = bLoop;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, TEnumAsByte<EDynamicForceFeedbackAction> Action, const struct FLatentActionInfo& LatentInfo) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.PlayDynamicForceFeedback");
	APlayerController_PlayDynamicForceFeedback_Params params;

	params.Intensity = Intensity;
	params.Duration = Duration;
	params.bAffectsLeftLarge = bAffectsLeftLarge;
	params.bAffectsLeftSmall = bAffectsLeftSmall;
	params.bAffectsRightLarge = bAffectsRightLarge;
	params.bAffectsRightSmall = bAffectsRightSmall;
	params.Action = Action;
	params.LatentInfo = LatentInfo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::Pause() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.Pause");
	APlayerController_Pause_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::OnServerStartedVisualLogger(bool bIsLogging) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.OnServerStartedVisualLogger");
	APlayerController_OnServerStartedVisualLogger_Params params;

	params.bIsLogging = bIsLogging;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::LocalTravel(const class FString& URL) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.LocalTravel");
	APlayerController_LocalTravel_Params params;

	params.URL = URL;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool APlayerController::IsInputKeyDown(const struct FKey& Key) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.IsInputKeyDown");
	APlayerController_IsInputKeyDown_Params params;

	params.Key = Key;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void APlayerController::GetViewportSize(int* SizeX, int* SizeY) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.GetViewportSize");
	APlayerController_GetViewportSize_Params params;

	params.SizeX = *SizeX;
	params.SizeY = *SizeY;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

class ASpectatorPawn* APlayerController::GetSpectatorPawn() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.GetSpectatorPawn");
	APlayerController_GetSpectatorPawn_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool APlayerController::GetMousePosition(float* LocationX, float* LocationY) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.GetMousePosition");
	APlayerController_GetMousePosition_Params params;

	params.LocationX = *LocationX;
	params.LocationY = *LocationY;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector APlayerController::GetInputVectorKeyState(const struct FKey& Key) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.GetInputVectorKeyState");
	APlayerController_GetInputVectorKeyState_Params params;

	params.Key = Key;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void APlayerController::GetInputTouchState(TEnumAsByte<ETouchIndex> FingerIndex, float* LocationX, float* LocationY, bool* bIsCurrentlyPressed) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.GetInputTouchState");
	APlayerController_GetInputTouchState_Params params;

	params.FingerIndex = FingerIndex;
	params.LocationX = *LocationX;
	params.LocationY = *LocationY;
	params.bIsCurrentlyPressed = *bIsCurrentlyPressed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::GetInputMouseDelta(float* DeltaX, float* DeltaY) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.GetInputMouseDelta");
	APlayerController_GetInputMouseDelta_Params params;

	params.DeltaX = *DeltaX;
	params.DeltaY = *DeltaY;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::GetInputMotionState(struct FVector* Tilt, struct FVector* RotationRate, struct FVector* Gravity, struct FVector* Acceleration) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.GetInputMotionState");
	APlayerController_GetInputMotionState_Params params;

	params.Tilt = *Tilt;
	params.RotationRate = *RotationRate;
	params.Gravity = *Gravity;
	params.Acceleration = *Acceleration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

float APlayerController::GetInputKeyTimeDown(const struct FKey& Key) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.GetInputKeyTimeDown");
	APlayerController_GetInputKeyTimeDown_Params params;

	params.Key = Key;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void APlayerController::GetInputAnalogStickState(TEnumAsByte<EControllerAnalogStick> WhichStick, float* StickX, float* StickY) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.GetInputAnalogStickState");
	APlayerController_GetInputAnalogStickState_Params params;

	params.WhichStick = WhichStick;
	params.StickX = *StickX;
	params.StickY = *StickY;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

float APlayerController::GetInputAnalogKeyState(const struct FKey& Key) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.GetInputAnalogKeyState");
	APlayerController_GetInputAnalogKeyState_Params params;

	params.Key = Key;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class AHUD* APlayerController::GetHUD() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.GetHUD");
	APlayerController_GetHUD_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool APlayerController::GetHitResultUnderFingerForObjects(TEnumAsByte<ETouchIndex> FingerIndex, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, struct FHitResult* HitResult) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.GetHitResultUnderFingerForObjects");
	APlayerController_GetHitResultUnderFingerForObjects_Params params;

	params.FingerIndex = FingerIndex;
	params.ObjectTypes = ObjectTypes;
	params.bTraceComplex = bTraceComplex;
	params.HitResult = *HitResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool APlayerController::GetHitResultUnderFingerByChannel(TEnumAsByte<ETouchIndex> FingerIndex, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.GetHitResultUnderFingerByChannel");
	APlayerController_GetHitResultUnderFingerByChannel_Params params;

	params.FingerIndex = FingerIndex;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.HitResult = *HitResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool APlayerController::GetHitResultUnderFinger(TEnumAsByte<ETouchIndex> FingerIndex, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.GetHitResultUnderFinger");
	APlayerController_GetHitResultUnderFinger_Params params;

	params.FingerIndex = FingerIndex;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.HitResult = *HitResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool APlayerController::GetHitResultUnderCursorForObjects(TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, struct FHitResult* HitResult) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.GetHitResultUnderCursorForObjects");
	APlayerController_GetHitResultUnderCursorForObjects_Params params;

	params.ObjectTypes = ObjectTypes;
	params.bTraceComplex = bTraceComplex;
	params.HitResult = *HitResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool APlayerController::GetHitResultUnderCursorByChannel(TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.GetHitResultUnderCursorByChannel");
	APlayerController_GetHitResultUnderCursorByChannel_Params params;

	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.HitResult = *HitResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool APlayerController::GetHitResultUnderCursor(TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.GetHitResultUnderCursor");
	APlayerController_GetHitResultUnderCursor_Params params;

	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.HitResult = *HitResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector APlayerController::GetFocalLocation() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.GetFocalLocation");
	APlayerController_GetFocalLocation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void APlayerController::FOV(float NewFOV) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.FOV");
	APlayerController_FOV_Params params;

	params.NewFOV = NewFOV;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool APlayerController::DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, bool bUseForegroundProjection, bool bTruncateScreenPosition, struct FVector* WorldLocation, struct FVector* WorldDirection) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.DeprojectScreenPositionToWorld");
	APlayerController_DeprojectScreenPositionToWorld_Params params;

	params.ScreenX = ScreenX;
	params.ScreenY = ScreenY;
	params.bUseForegroundProjection = bUseForegroundProjection;
	params.bTruncateScreenPosition = bTruncateScreenPosition;
	params.WorldLocation = *WorldLocation;
	params.WorldDirection = *WorldDirection;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool APlayerController::DeprojectMousePositionToWorld(struct FVector* WorldLocation, struct FVector* WorldDirection) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.DeprojectMousePositionToWorld");
	APlayerController_DeprojectMousePositionToWorld_Params params;

	params.WorldLocation = *WorldLocation;
	params.WorldDirection = *WorldDirection;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void APlayerController::ConsoleKey(const struct FKey& Key) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ConsoleKey");
	APlayerController_ConsoleKey_Params params;

	params.Key = Key;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClientWasKicked(const struct FText& KickReason) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClientWasKicked");
	APlayerController_ClientWasKicked_Params params;

	params.KickReason = KickReason;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClientVoiceHandshakeComplete() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClientVoiceHandshakeComplete");
	APlayerController_ClientVoiceHandshakeComplete_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClientUpdateMultipleLevelsStreamingStatus(TArray<struct FUpdateLevelStreamingLevelStatus> LevelStatuses) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClientUpdateMultipleLevelsStreamingStatus");
	APlayerController_ClientUpdateMultipleLevelsStreamingStatus_Params params;

	params.LevelStatuses = LevelStatuses;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClientUpdateLevelStreamingStatus(const struct FName& PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClientUpdateLevelStreamingStatus");
	APlayerController_ClientUpdateLevelStreamingStatus_Params params;

	params.PackageName = PackageName;
	params.bNewShouldBeLoaded = bNewShouldBeLoaded;
	params.bNewShouldBeVisible = bNewShouldBeVisible;
	params.bNewShouldBlockOnLoad = bNewShouldBlockOnLoad;
	params.LODIndex = LODIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClientUnmutePlayer(const struct FUniqueNetIdRepl& PlayerId) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClientUnmutePlayer");
	APlayerController_ClientUnmutePlayer_Params params;

	params.PlayerId = PlayerId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClientTravelInternal(const class FString& URL, TEnumAsByte<ETravelType> TravelType, bool bSeamless, const struct FGuid& MapPackageGuid) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClientTravelInternal");
	APlayerController_ClientTravelInternal_Params params;

	params.URL = URL;
	params.TravelType = TravelType;
	params.bSeamless = bSeamless;
	params.MapPackageGuid = MapPackageGuid;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClientTravel(const class FString& URL, TEnumAsByte<ETravelType> TravelType, bool bSeamless, const struct FGuid& MapPackageGuid) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClientTravel");
	APlayerController_ClientTravel_Params params;

	params.URL = URL;
	params.TravelType = TravelType;
	params.bSeamless = bSeamless;
	params.MapPackageGuid = MapPackageGuid;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClientTeamMessage(class APlayerState* SenderPlayerState, const class FString& S, const struct FName& Type, float MsgLifeTime) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClientTeamMessage");
	APlayerController_ClientTeamMessage_Params params;

	params.SenderPlayerState = SenderPlayerState;
	params.S = S;
	params.Type = Type;
	params.MsgLifeTime = MsgLifeTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClientStopGbxForceFeedback(const struct FName& Tag) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClientStopGbxForceFeedback");
	APlayerController_ClientStopGbxForceFeedback_Params params;

	params.Tag = Tag;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClientStopForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, const struct FName& Tag) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClientStopForceFeedback");
	APlayerController_ClientStopForceFeedback_Params params;

	params.ForceFeedbackEffect = ForceFeedbackEffect;
	params.Tag = Tag;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClientStopCameraShake(class UClass* Shake, bool bImmediately) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClientStopCameraShake");
	APlayerController_ClientStopCameraShake_Params params;

	params.Shake = Shake;
	params.bImmediately = bImmediately;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClientStopCameraAnim(class UCameraAnim* AnimToStop) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClientStopCameraAnim");
	APlayerController_ClientStopCameraAnim_Params params;

	params.AnimToStop = AnimToStop;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClientStartOnlineSession() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClientStartOnlineSession");
	APlayerController_ClientStartOnlineSession_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClientSpawnCameraLensEffect(class UClass* LensEffectEmitterClass) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClientSpawnCameraLensEffect");
	APlayerController_ClientSpawnCameraLensEffect_Params params;

	params.LensEffectEmitterClass = LensEffectEmitterClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClientSetViewTarget(class AActor* A, const struct FViewTargetTransitionParams& TransitionParams) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClientSetViewTarget");
	APlayerController_ClientSetViewTarget_Params params;

	params.A = A;
	params.TransitionParams = TransitionParams;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClientSetSpectatorWaiting(bool bWaiting) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClientSetSpectatorWaiting");
	APlayerController_ClientSetSpectatorWaiting_Params params;

	params.bWaiting = bWaiting;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClientSetHUD(class UClass* NewHUDClass) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClientSetHUD");
	APlayerController_ClientSetHUD_Params params;

	params.NewHUDClass = NewHUDClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClientSetForceMipLevelsToBeResident(class UMaterialInterface* Material, float ForceDuration, int CinematicTextureGroups) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClientSetForceMipLevelsToBeResident");
	APlayerController_ClientSetForceMipLevelsToBeResident_Params params;

	params.Material = Material;
	params.ForceDuration = ForceDuration;
	params.CinematicTextureGroups = CinematicTextureGroups;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClientSetCinematicMode");
	APlayerController_ClientSetCinematicMode_Params params;

	params.bInCinematicMode = bInCinematicMode;
	params.bAffectsMovement = bAffectsMovement;
	params.bAffectsTurning = bAffectsTurning;
	params.bAffectsHUD = bAffectsHUD;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClientSetCameraMode(const struct FName& NewCamMode) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClientSetCameraMode");
	APlayerController_ClientSetCameraMode_Params params;

	params.NewCamMode = NewCamMode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClientSetCameraFade(bool bEnableFading, const struct FColor& FadeColor, const struct FVector2D& FadeAlpha, float FadeTime, bool bFadeAudio) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClientSetCameraFade");
	APlayerController_ClientSetCameraFade_Params params;

	params.bEnableFading = bEnableFading;
	params.FadeColor = FadeColor;
	params.FadeAlpha = FadeAlpha;
	params.FadeTime = FadeTime;
	params.bFadeAudio = bFadeAudio;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClientSetBlockOnAsyncLoading() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClientSetBlockOnAsyncLoading");
	APlayerController_ClientSetBlockOnAsyncLoading_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClientReturnToMainMenuWithTextReason(const struct FText& ReturnReason) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClientReturnToMainMenuWithTextReason");
	APlayerController_ClientReturnToMainMenuWithTextReason_Params params;

	params.ReturnReason = ReturnReason;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClientReturnToMainMenu(const class FString& ReturnReason) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClientReturnToMainMenu");
	APlayerController_ClientReturnToMainMenu_Params params;

	params.ReturnReason = ReturnReason;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClientRetryClientRestart(class APawn* NewPawn) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClientRetryClientRestart");
	APlayerController_ClientRetryClientRestart_Params params;

	params.NewPawn = NewPawn;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClientRestart(class APawn* NewPawn) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClientRestart");
	APlayerController_ClientRestart_Params params;

	params.NewPawn = NewPawn;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClientReset() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClientReset");
	APlayerController_ClientReset_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClientRepObjRef(class UObject* Object) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClientRepObjRef");
	APlayerController_ClientRepObjRef_Params params;

	params.Object = Object;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClientReceiveLocalizedMessage(class UClass* MESSAGE, int Switch, class APlayerState* RelatedPlayerState_2, class APlayerState* RelatedPlayerState_3, class UObject* OptionalObject) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClientReceiveLocalizedMessage");
	APlayerController_ClientReceiveLocalizedMessage_Params params;

	params.MESSAGE = MESSAGE;
	params.Switch = Switch;
	params.RelatedPlayerState_2 = RelatedPlayerState_2;
	params.RelatedPlayerState_3 = RelatedPlayerState_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClientPrestreamTextures(class AActor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClientPrestreamTextures");
	APlayerController_ClientPrestreamTextures_Params params;

	params.ForcedActor = ForcedActor;
	params.ForceDuration = ForceDuration;
	params.bEnableStreaming = bEnableStreaming;
	params.CinematicTextureGroups = CinematicTextureGroups;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClientPrepareMapChange(const struct FName& LevelName, bool bFirst, bool bLast) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClientPrepareMapChange");
	APlayerController_ClientPrepareMapChange_Params params;

	params.LevelName = LevelName;
	params.bFirst = bFirst;
	params.bLast = bLast;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClientPlaySoundAtLocation(class USoundBase* Sound, const struct FVector& Location, float VolumeMultiplier, float PitchMultiplier) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClientPlaySoundAtLocation");
	APlayerController_ClientPlaySoundAtLocation_Params params;

	params.Sound = Sound;
	params.Location = Location;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClientPlaySound(class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClientPlaySound");
	APlayerController_ClientPlaySound_Params params;

	params.Sound = Sound;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClientPlayRadialBlur(const struct FRadialBlurSelection& BlurInfo, bool bOverrideCenter, const struct FVector& WorldSpaceCenter, float MaxDistance) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClientPlayRadialBlur");
	APlayerController_ClientPlayRadialBlur_Params params;

	params.BlurInfo = BlurInfo;
	params.bOverrideCenter = bOverrideCenter;
	params.WorldSpaceCenter = WorldSpaceCenter;
	params.MaxDistance = MaxDistance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClientPlayGbxForceFeedback(const struct FGbxForceFeedbackEffect& ForceFeedbackEffect, bool bLooping, bool bIgnoreTimeDilation, const struct FName& Tag) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClientPlayGbxForceFeedback");
	APlayerController_ClientPlayGbxForceFeedback_Params params;

	params.ForceFeedbackEffect = ForceFeedbackEffect;
	params.bLooping = bLooping;
	params.bIgnoreTimeDilation = bIgnoreTimeDilation;
	params.Tag = Tag;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClientPlayForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, bool bLooping, bool bIgnoreTimeDilation, const struct FName& Tag) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClientPlayForceFeedback");
	APlayerController_ClientPlayForceFeedback_Params params;

	params.ForceFeedbackEffect = ForceFeedbackEffect;
	params.bLooping = bLooping;
	params.bIgnoreTimeDilation = bIgnoreTimeDilation;
	params.Tag = Tag;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClientPlayCameraShake(class UClass* Shake, float Scale, TEnumAsByte<ECameraAnimPlaySpace> PlaySpace, const struct FRotator& UserPlaySpaceRot) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClientPlayCameraShake");
	APlayerController_ClientPlayCameraShake_Params params;

	params.Shake = Shake;
	params.Scale = Scale;
	params.PlaySpace = PlaySpace;
	params.UserPlaySpaceRot = UserPlaySpaceRot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClientPlayCameraAnim(class UCameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, TEnumAsByte<ECameraAnimPlaySpace> Space, const struct FRotator& CustomPlaySpace) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClientPlayCameraAnim");
	APlayerController_ClientPlayCameraAnim_Params params;

	params.AnimToPlay = AnimToPlay;
	params.Scale = Scale;
	params.Rate = Rate;
	params.BlendInTime = BlendInTime;
	params.BlendOutTime = BlendOutTime;
	params.bLoop = bLoop;
	params.bRandomStartTime = bRandomStartTime;
	params.Space = Space;
	params.CustomPlaySpace = CustomPlaySpace;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClientMutePlayer(const struct FUniqueNetIdRepl& PlayerId) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClientMutePlayer");
	APlayerController_ClientMutePlayer_Params params;

	params.PlayerId = PlayerId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClientMessage(const class FString& S, const struct FName& Type, float MsgLifeTime) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClientMessage");
	APlayerController_ClientMessage_Params params;

	params.S = S;
	params.Type = Type;
	params.MsgLifeTime = MsgLifeTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClientIgnoreMoveInput(bool bIgnore) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClientIgnoreMoveInput");
	APlayerController_ClientIgnoreMoveInput_Params params;

	params.bIgnore = bIgnore;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClientIgnoreLookInput(bool bIgnore) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClientIgnoreLookInput");
	APlayerController_ClientIgnoreLookInput_Params params;

	params.bIgnore = bIgnore;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClientGotoState(const struct FName& NewState) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClientGotoState");
	APlayerController_ClientGotoState_Params params;

	params.NewState = NewState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClientGameEnded(class AActor* EndGameFocus, bool bIsWinner) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClientGameEnded");
	APlayerController_ClientGameEnded_Params params;

	params.EndGameFocus = EndGameFocus;
	params.bIsWinner = bIsWinner;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClientForceGarbageCollection() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClientForceGarbageCollection");
	APlayerController_ClientForceGarbageCollection_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClientFlushLevelStreaming() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClientFlushLevelStreaming");
	APlayerController_ClientFlushLevelStreaming_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClientEndOnlineSession() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClientEndOnlineSession");
	APlayerController_ClientEndOnlineSession_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClientEnableNetworkVoice(bool bEnable) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClientEnableNetworkVoice");
	APlayerController_ClientEnableNetworkVoice_Params params;

	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClientCommitMapChange() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClientCommitMapChange");
	APlayerController_ClientCommitMapChange_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClientClearCameraLensEffects() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClientClearCameraLensEffects");
	APlayerController_ClientClearCameraLensEffects_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClientCapBandwidth(int Cap) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClientCapBandwidth");
	APlayerController_ClientCapBandwidth_Params params;

	params.Cap = Cap;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClientCancelPendingMapChange() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClientCancelPendingMapChange");
	APlayerController_ClientCancelPendingMapChange_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClientAddTextureStreamingLoc(const struct FVector& InLoc, float Duration, bool bOverrideLocation) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClientAddTextureStreamingLoc");
	APlayerController_ClientAddTextureStreamingLoc_Params params;

	params.InLoc = InLoc;
	params.Duration = Duration;
	params.bOverrideLocation = bOverrideLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClearAudioListenerOverride() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClearAudioListenerOverride");
	APlayerController_ClearAudioListenerOverride_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ClearAudioListenerAttenuationOverride() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ClearAudioListenerAttenuationOverride");
	APlayerController_ClearAudioListenerAttenuationOverride_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool APlayerController::CanRestartPlayer() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.CanRestartPlayer");
	APlayerController_CanRestartPlayer_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void APlayerController::Camera(const struct FName& NewMode) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.Camera");
	APlayerController_Camera_Params params;

	params.NewMode = NewMode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::AddYawInput(float Val) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.AddYawInput");
	APlayerController_AddYawInput_Params params;

	params.Val = Val;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::AddRollInput(float Val) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.AddRollInput");
	APlayerController_AddRollInput_Params params;

	params.Val = Val;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::AddPitchInput(float Val) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.AddPitchInput");
	APlayerController_AddPitchInput_Params params;

	params.Val = Val;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerController::ActivateTouchInterface(class UTouchInterface* NewTouchInterface) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerController.ActivateTouchInterface");
	APlayerController_ActivateTouchInterface_Params params;

	params.NewTouchInterface = NewTouchInterface;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPlayerInput::SetMouseSensitivity(float Sensitivity) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerInput.SetMouseSensitivity");
	UPlayerInput_SetMouseSensitivity_Params params;

	params.Sensitivity = Sensitivity;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPlayerInput::SetBind(const struct FName& BindName, const class FString& Command) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerInput.SetBind");
	UPlayerInput_SetBind_Params params;

	params.BindName = BindName;
	params.Command = Command;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPlayerInput::InvertAxisKey(const struct FKey& AxisKey) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerInput.InvertAxisKey");
	UPlayerInput_InvertAxisKey_Params params;

	params.AxisKey = AxisKey;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPlayerInput::InvertAxis(const struct FName& AxisName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerInput.InvertAxis");
	UPlayerInput_InvertAxis_Params params;

	params.AxisName = AxisName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPlayerInput::ClearSmoothing() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerInput.ClearSmoothing");
	UPlayerInput_ClearSmoothing_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UWorld::HandleTimelineScrubbed() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.World.HandleTimelineScrubbed");
	UWorld_HandleTimelineScrubbed_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APawn::SpawnDefaultController() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Pawn.SpawnDefaultController");
	APawn_SpawnDefaultController_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APawn::SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Pawn.SetCanAffectNavigationGeneration");
	APawn_SetCanAffectNavigationGeneration_Params params;

	params.bNewValue = bNewValue;
	params.bForceUpdate = bForceUpdate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APawn::ReceiveUnpossessed(class AController* OldController) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Pawn.ReceiveUnpossessed");
	APawn_ReceiveUnpossessed_Params params;

	params.OldController = OldController;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APawn::ReceivePossessed(class AController* NewController) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Pawn.ReceivePossessed");
	APawn_ReceivePossessed_Params params;

	params.NewController = NewController;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APawn::PawnMakeNoise(float Loudness, const struct FVector& NoiseLocation, bool bUseNoiseMakerLocation, class AActor* NoiseMaker) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Pawn.PawnMakeNoise");
	APawn_PawnMakeNoise_Params params;

	params.Loudness = Loudness;
	params.NoiseLocation = NoiseLocation;
	params.bUseNoiseMakerLocation = bUseNoiseMakerLocation;
	params.NoiseMaker = NoiseMaker;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APawn::OnRep_PlayerState() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Pawn.OnRep_PlayerState");
	APawn_OnRep_PlayerState_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APawn::OnRep_Controller() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Pawn.OnRep_Controller");
	APawn_OnRep_Controller_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APawn::LaunchPawn(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Pawn.LaunchPawn");
	APawn_LaunchPawn_Params params;

	params.LaunchVelocity = LaunchVelocity;
	params.bXYOverride = bXYOverride;
	params.bZOverride = bZOverride;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

struct FVector APawn::K2_GetMovementInputVector() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Pawn.K2_GetMovementInputVector");
	APawn_K2_GetMovementInputVector_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool APawn::IsPlayerControlled() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Pawn.IsPlayerControlled");
	APawn_IsPlayerControlled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool APawn::IsMoveInputIgnored() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Pawn.IsMoveInputIgnored");
	APawn_IsMoveInputIgnored_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool APawn::IsLocallyControlled() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Pawn.IsLocallyControlled");
	APawn_IsLocallyControlled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool APawn::IsControlled() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Pawn.IsControlled");
	APawn_IsControlled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector APawn::GetPendingMovementInputVector() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Pawn.GetPendingMovementInputVector");
	APawn_GetPendingMovementInputVector_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector APawn::GetNavAgentLocation() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Pawn.GetNavAgentLocation");
	APawn_GetNavAgentLocation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UPawnMovementComponent* APawn::GetMovementComponent() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Pawn.GetMovementComponent");
	APawn_GetMovementComponent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class AActor* APawn::GetMovementBaseActor(class APawn* Pawn) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Pawn.GetMovementBaseActor");
	APawn_GetMovementBaseActor_Params params;

	params.Pawn = Pawn;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector APawn::GetLastMovementInputVector() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Pawn.GetLastMovementInputVector");
	APawn_GetLastMovementInputVector_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FRotator APawn::GetControlRotation() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Pawn.GetControlRotation");
	APawn_GetControlRotation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class AController* APawn::GetController() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Pawn.GetController");
	APawn_GetController_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FRotator APawn::GetBaseAimRotation() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Pawn.GetBaseAimRotation");
	APawn_GetBaseAimRotation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void APawn::DetachFromControllerPendingDestroy() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Pawn.DetachFromControllerPendingDestroy");
	APawn_DetachFromControllerPendingDestroy_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

struct FVector APawn::ConsumeMovementInputVector() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Pawn.ConsumeMovementInputVector");
	APawn_ConsumeMovementInputVector_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void APawn::AddMovementInput(const struct FVector& WorldDirection, float ScaleValue, bool bForce) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Pawn.AddMovementInput");
	APawn_AddMovementInput_Params params;

	params.WorldDirection = WorldDirection;
	params.ScaleValue = ScaleValue;
	params.bForce = bForce;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APawn::AddControllerYawInput(float Val) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Pawn.AddControllerYawInput");
	APawn_AddControllerYawInput_Params params;

	params.Val = Val;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APawn::AddControllerRollInput(float Val) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Pawn.AddControllerRollInput");
	APawn_AddControllerRollInput_Params params;

	params.Val = Val;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APawn::AddControllerPitchInput(float Val) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Pawn.AddControllerPitchInput");
	APawn_AddControllerPitchInput_Params params;

	params.Val = Val;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ACharacter::UnCrouch(bool bClientSimulation) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Character.UnCrouch");
	ACharacter_UnCrouch_Params params;

	params.bClientSimulation = bClientSimulation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ACharacter::StopJumping() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Character.StopJumping");
	ACharacter_StopJumping_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ACharacter::StopAnimMontage(class UAnimMontage* AnimMontage) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Character.StopAnimMontage");
	ACharacter_StopAnimMontage_Params params;

	params.AnimMontage = AnimMontage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ACharacter::SetAnimRootMotionTranslationScale3D(const struct FVector& InAnimRootMotionTranslationScale3D) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Character.SetAnimRootMotionTranslationScale3D");
	ACharacter_SetAnimRootMotionTranslationScale3D_Params params;

	params.InAnimRootMotionTranslationScale3D = InAnimRootMotionTranslationScale3D;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ACharacter::RootMotionDebugClientPrintOnScreen(const class FString& inString) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Character.RootMotionDebugClientPrintOnScreen");
	ACharacter_RootMotionDebugClientPrintOnScreen_Params params;

	params.inString = inString;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

float ACharacter::PlayAnimMontage(class UAnimMontage* AnimMontage, float InPlayRate, const struct FName& StartSectionName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Character.PlayAnimMontage");
	ACharacter_PlayAnimMontage_Params params;

	params.AnimMontage = AnimMontage;
	params.InPlayRate = InPlayRate;
	params.StartSectionName = StartSectionName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void ACharacter::OnWalkingOffLedge(const struct FVector& PreviousFloorImpactNormal, const struct FVector& PreviousFloorContactNormal, const struct FVector& PreviousLocation, float TimeDelta) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Character.OnWalkingOffLedge");
	ACharacter_OnWalkingOffLedge_Params params;

	params.PreviousFloorImpactNormal = PreviousFloorImpactNormal;
	params.PreviousFloorContactNormal = PreviousFloorContactNormal;
	params.PreviousLocation = PreviousLocation;
	params.TimeDelta = TimeDelta;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ACharacter::OnRep_RootMotion() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Character.OnRep_RootMotion");
	ACharacter_OnRep_RootMotion_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ACharacter::OnRep_ReplicatedBasedMovement() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Character.OnRep_ReplicatedBasedMovement");
	ACharacter_OnRep_ReplicatedBasedMovement_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ACharacter::OnRep_IsCrouched() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Character.OnRep_IsCrouched");
	ACharacter_OnRep_IsCrouched_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ACharacter::OnLaunched(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Character.OnLaunched");
	ACharacter_OnLaunched_Params params;

	params.LaunchVelocity = LaunchVelocity;
	params.bXYOverride = bXYOverride;
	params.bZOverride = bZOverride;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ACharacter::OnLanded(const struct FHitResult& Hit) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Character.OnLanded");
	ACharacter_OnLanded_Params params;

	params.Hit = Hit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ACharacter::OnJumped() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Character.OnJumped");
	ACharacter_OnJumped_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ACharacter::LaunchCharacter(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Character.LaunchCharacter");
	ACharacter_LaunchCharacter_Params params;

	params.LaunchVelocity = LaunchVelocity;
	params.bXYOverride = bXYOverride;
	params.bZOverride = bZOverride;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ACharacter::K2_UpdateCustomMovement(float DeltaTime) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Character.K2_UpdateCustomMovement");
	ACharacter_K2_UpdateCustomMovement_Params params;

	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ACharacter::K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Character.K2_OnStartCrouch");
	ACharacter_K2_OnStartCrouch_Params params;

	params.HalfHeightAdjust = HalfHeightAdjust;
	params.ScaledHalfHeightAdjust = ScaledHalfHeightAdjust;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ACharacter::K2_OnMovementModeChanged(TEnumAsByte<EMovementMode> PrevMovementMode, TEnumAsByte<EMovementMode> NewMovementMode, unsigned char PrevCustomMode, unsigned char NewCustomMode) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Character.K2_OnMovementModeChanged");
	ACharacter_K2_OnMovementModeChanged_Params params;

	params.PrevMovementMode = PrevMovementMode;
	params.NewMovementMode = NewMovementMode;
	params.PrevCustomMode = PrevCustomMode;
	params.NewCustomMode = NewCustomMode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ACharacter::K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Character.K2_OnEndCrouch");
	ACharacter_K2_OnEndCrouch_Params params;

	params.HalfHeightAdjust = HalfHeightAdjust;
	params.ScaledHalfHeightAdjust = ScaledHalfHeightAdjust;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ACharacter::Jump() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Character.Jump");
	ACharacter_Jump_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool ACharacter::IsPlayingRootMotion() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Character.IsPlayingRootMotion");
	ACharacter_IsPlayingRootMotion_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool ACharacter::IsPlayingNetworkedRootMotionMontage() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Character.IsPlayingNetworkedRootMotionMontage");
	ACharacter_IsPlayingNetworkedRootMotionMontage_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool ACharacter::IsJumpProvidingForce() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Character.IsJumpProvidingForce");
	ACharacter_IsJumpProvidingForce_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UAnimMontage* ACharacter::GetCurrentMontage() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Character.GetCurrentMontage");
	ACharacter_GetCurrentMontage_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector ACharacter::GetBaseTranslationOffset() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Character.GetBaseTranslationOffset");
	ACharacter_GetBaseTranslationOffset_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FRotator ACharacter::GetBaseRotationOffsetRotator() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Character.GetBaseRotationOffsetRotator");
	ACharacter_GetBaseRotationOffsetRotator_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector ACharacter::GetAnimRootMotionTranslationScale3D() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Character.GetAnimRootMotionTranslationScale3D");
	ACharacter_GetAnimRootMotionTranslationScale3D_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float ACharacter::GetAnimRootMotionTranslationScale() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Character.GetAnimRootMotionTranslationScale");
	ACharacter_GetAnimRootMotionTranslationScale_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FTransform ACharacter::GetActorSocket(class AActor* Actor, const struct FName& Socket) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Character.GetActorSocket");
	ACharacter_GetActorSocket_Params params;

	params.Actor = Actor;
	params.Socket = Socket;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void ACharacter::Crouch(bool bClientSimulation) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Character.Crouch");
	ACharacter_Crouch_Params params;

	params.bClientSimulation = bClientSimulation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ACharacter::ClientVeryShortAdjustPosition(float Timestamp, const struct FVector& NewLoc, class UPrimitiveComponent* NewBase, const struct FName& NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Character.ClientVeryShortAdjustPosition");
	ACharacter_ClientVeryShortAdjustPosition_Params params;

	params.Timestamp = Timestamp;
	params.NewLoc = NewLoc;
	params.NewBase = NewBase;
	params.NewBaseBoneName = NewBaseBoneName;
	params.bHasBase = bHasBase;
	params.bBaseRelativePosition = bBaseRelativePosition;
	params.ServerMovementMode = ServerMovementMode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ACharacter::ClientCheatWalk() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Character.ClientCheatWalk");
	ACharacter_ClientCheatWalk_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ACharacter::ClientCheatGhost() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Character.ClientCheatGhost");
	ACharacter_ClientCheatGhost_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ACharacter::ClientCheatFly() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Character.ClientCheatFly");
	ACharacter_ClientCheatFly_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ACharacter::ClientAdjustRootMotionSourcePosition(float Timestamp, const struct FRootMotionSourceGroup& ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, const struct FVector& ServerLoc, const struct FVector_NetQuantizeNormal& ServerRotation, float ServerVelZ, class UPrimitiveComponent* ServerBase, const struct FName& ServerBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Character.ClientAdjustRootMotionSourcePosition");
	ACharacter_ClientAdjustRootMotionSourcePosition_Params params;

	params.Timestamp = Timestamp;
	params.ServerRootMotion = ServerRootMotion;
	params.bHasAnimRootMotion = bHasAnimRootMotion;
	params.ServerMontageTrackPosition = ServerMontageTrackPosition;
	params.ServerLoc = ServerLoc;
	params.ServerRotation = ServerRotation;
	params.ServerVelZ = ServerVelZ;
	params.ServerBase = ServerBase;
	params.ServerBoneName = ServerBoneName;
	params.bHasBase = bHasBase;
	params.bBaseRelativePosition = bBaseRelativePosition;
	params.ServerMovementMode = ServerMovementMode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ACharacter::ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, const struct FVector& ServerLoc, const struct FVector_NetQuantizeNormal& ServerRotation, float ServerVelZ, class UPrimitiveComponent* ServerBase, const struct FName& ServerBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Character.ClientAdjustRootMotionPosition");
	ACharacter_ClientAdjustRootMotionPosition_Params params;

	params.Timestamp = Timestamp;
	params.ServerMontageTrackPosition = ServerMontageTrackPosition;
	params.ServerLoc = ServerLoc;
	params.ServerRotation = ServerRotation;
	params.ServerVelZ = ServerVelZ;
	params.ServerBase = ServerBase;
	params.ServerBoneName = ServerBoneName;
	params.bHasBase = bHasBase;
	params.bBaseRelativePosition = bBaseRelativePosition;
	params.ServerMovementMode = ServerMovementMode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ACharacter::ClientAdjustPosition(float Timestamp, const struct FVector& NewLoc, const struct FVector& NewVel, class UPrimitiveComponent* NewBase, const struct FName& NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Character.ClientAdjustPosition");
	ACharacter_ClientAdjustPosition_Params params;

	params.Timestamp = Timestamp;
	params.NewLoc = NewLoc;
	params.NewVel = NewVel;
	params.NewBase = NewBase;
	params.NewBaseBoneName = NewBaseBoneName;
	params.bHasBase = bHasBase;
	params.bBaseRelativePosition = bBaseRelativePosition;
	params.ServerMovementMode = ServerMovementMode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ACharacter::ClientAckGoodMove(float Timestamp) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Character.ClientAckGoodMove");
	ACharacter_ClientAckGoodMove_Params params;

	params.Timestamp = Timestamp;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool ACharacter::CanJumpInternal() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Character.CanJumpInternal");
	ACharacter_CanJumpInternal_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool ACharacter::CanJump() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Character.CanJump");
	ACharacter_CanJump_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void ACharacter::CacheInitialMeshOffset(const struct FVector& MeshRelativeLocation, const struct FRotator& MeshRelativeRotation) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Character.CacheInitialMeshOffset");
	ACharacter_CacheInitialMeshOffset_Params params;

	params.MeshRelativeLocation = MeshRelativeLocation;
	params.MeshRelativeRotation = MeshRelativeRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USplineComponent::UpdateSpline() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.UpdateSpline");
	USplineComponent_UpdateSpline_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USplineComponent::SetWorldLocationAtSplinePoint(int PointIndex, const struct FVector& InLocation) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.SetWorldLocationAtSplinePoint");
	USplineComponent_SetWorldLocationAtSplinePoint_Params params;

	params.PointIndex = PointIndex;
	params.InLocation = InLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USplineComponent::SetUpVectorAtSplinePoint(int PointIndex, const struct FVector& InUpVector, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.SetUpVectorAtSplinePoint");
	USplineComponent_SetUpVectorAtSplinePoint_Params params;

	params.PointIndex = PointIndex;
	params.InUpVector = InUpVector;
	params.CoordinateSpace = CoordinateSpace;
	params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USplineComponent::SetUnselectedSplineSegmentColor(const struct FLinearColor& SegmentColor) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.SetUnselectedSplineSegmentColor");
	USplineComponent_SetUnselectedSplineSegmentColor_Params params;

	params.SegmentColor = SegmentColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USplineComponent::SetTangentsAtSplinePoint(int PointIndex, const struct FVector& InArriveTangent, const struct FVector& InLeaveTangent, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.SetTangentsAtSplinePoint");
	USplineComponent_SetTangentsAtSplinePoint_Params params;

	params.PointIndex = PointIndex;
	params.InArriveTangent = InArriveTangent;
	params.InLeaveTangent = InLeaveTangent;
	params.CoordinateSpace = CoordinateSpace;
	params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USplineComponent::SetTangentAtSplinePoint(int PointIndex, const struct FVector& InTangent, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.SetTangentAtSplinePoint");
	USplineComponent_SetTangentAtSplinePoint_Params params;

	params.PointIndex = PointIndex;
	params.InTangent = InTangent;
	params.CoordinateSpace = CoordinateSpace;
	params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USplineComponent::SetSplineWorldPoints(TArray<struct FVector> Points) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.SetSplineWorldPoints");
	USplineComponent_SetSplineWorldPoints_Params params;

	params.Points = Points;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USplineComponent::SetSplinePointType(int PointIndex, TEnumAsByte<ESplinePointType> Type, bool bUpdateSpline) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.SetSplinePointType");
	USplineComponent_SetSplinePointType_Params params;

	params.PointIndex = PointIndex;
	params.Type = Type;
	params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USplineComponent::SetSplinePoints(TArray<struct FVector> Points, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.SetSplinePoints");
	USplineComponent_SetSplinePoints_Params params;

	params.Points = Points;
	params.CoordinateSpace = CoordinateSpace;
	params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USplineComponent::SetSplineLocalPoints(TArray<struct FVector> Points) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.SetSplineLocalPoints");
	USplineComponent_SetSplineLocalPoints_Params params;

	params.Points = Points;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USplineComponent::SetSelectedSplineSegmentColor(const struct FLinearColor& SegmentColor) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.SetSelectedSplineSegmentColor");
	USplineComponent_SetSelectedSplineSegmentColor_Params params;

	params.SegmentColor = SegmentColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USplineComponent::SetLocationAtSplinePoint(int PointIndex, const struct FVector& InLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.SetLocationAtSplinePoint");
	USplineComponent_SetLocationAtSplinePoint_Params params;

	params.PointIndex = PointIndex;
	params.InLocation = InLocation;
	params.CoordinateSpace = CoordinateSpace;
	params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USplineComponent::SetDrawDebug(bool bShow) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.SetDrawDebug");
	USplineComponent_SetDrawDebug_Params params;

	params.bShow = bShow;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USplineComponent::SetDefaultUpVector(const struct FVector& UpVector, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.SetDefaultUpVector");
	USplineComponent_SetDefaultUpVector_Params params;

	params.UpVector = UpVector;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USplineComponent::SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.SetClosedLoopAtPosition");
	USplineComponent_SetClosedLoopAtPosition_Params params;

	params.bInClosedLoop = bInClosedLoop;
	params.Key = Key;
	params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USplineComponent::SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.SetClosedLoop");
	USplineComponent_SetClosedLoop_Params params;

	params.bInClosedLoop = bInClosedLoop;
	params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USplineComponent::RemoveSplinePoint(int Index, bool bUpdateSpline) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.RemoveSplinePoint");
	USplineComponent_RemoveSplinePoint_Params params;

	params.Index = Index;
	params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool USplineComponent::IsClosedLoop() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.IsClosedLoop");
	USplineComponent_IsClosedLoop_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector USplineComponent::GetWorldTangentAtDistanceAlongSpline(float Distance) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.GetWorldTangentAtDistanceAlongSpline");
	USplineComponent_GetWorldTangentAtDistanceAlongSpline_Params params;

	params.Distance = Distance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FRotator USplineComponent::GetWorldRotationAtTime(float Time, bool bUseConstantVelocity) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.GetWorldRotationAtTime");
	USplineComponent_GetWorldRotationAtTime_Params params;

	params.Time = Time;
	params.bUseConstantVelocity = bUseConstantVelocity;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FRotator USplineComponent::GetWorldRotationAtDistanceAlongSpline(float Distance) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.GetWorldRotationAtDistanceAlongSpline");
	USplineComponent_GetWorldRotationAtDistanceAlongSpline_Params params;

	params.Distance = Distance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector USplineComponent::GetWorldLocationAtTime(float Time, bool bUseConstantVelocity) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.GetWorldLocationAtTime");
	USplineComponent_GetWorldLocationAtTime_Params params;

	params.Time = Time;
	params.bUseConstantVelocity = bUseConstantVelocity;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector USplineComponent::GetWorldLocationAtSplinePoint(int PointIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.GetWorldLocationAtSplinePoint");
	USplineComponent_GetWorldLocationAtSplinePoint_Params params;

	params.PointIndex = PointIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector USplineComponent::GetWorldLocationAtDistanceAlongSpline(float Distance) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.GetWorldLocationAtDistanceAlongSpline");
	USplineComponent_GetWorldLocationAtDistanceAlongSpline_Params params;

	params.Distance = Distance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector USplineComponent::GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.GetWorldDirectionAtTime");
	USplineComponent_GetWorldDirectionAtTime_Params params;

	params.Time = Time;
	params.bUseConstantVelocity = bUseConstantVelocity;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector USplineComponent::GetWorldDirectionAtDistanceAlongSpline(float Distance) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.GetWorldDirectionAtDistanceAlongSpline");
	USplineComponent_GetWorldDirectionAtDistanceAlongSpline_Params params;

	params.Distance = Distance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector USplineComponent::GetUpVectorAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.GetUpVectorAtTime");
	USplineComponent_GetUpVectorAtTime_Params params;

	params.Time = Time;
	params.CoordinateSpace = CoordinateSpace;
	params.bUseConstantVelocity = bUseConstantVelocity;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector USplineComponent::GetUpVectorAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.GetUpVectorAtSplinePoint");
	USplineComponent_GetUpVectorAtSplinePoint_Params params;

	params.PointIndex = PointIndex;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector USplineComponent::GetUpVectorAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.GetUpVectorAtDistanceAlongSpline");
	USplineComponent_GetUpVectorAtDistanceAlongSpline_Params params;

	params.Distance = Distance;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FTransform USplineComponent::GetTransformAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity, bool bUseScale) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.GetTransformAtTime");
	USplineComponent_GetTransformAtTime_Params params;

	params.Time = Time;
	params.CoordinateSpace = CoordinateSpace;
	params.bUseConstantVelocity = bUseConstantVelocity;
	params.bUseScale = bUseScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FTransform USplineComponent::GetTransformAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseScale) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.GetTransformAtSplinePoint");
	USplineComponent_GetTransformAtSplinePoint_Params params;

	params.PointIndex = PointIndex;
	params.CoordinateSpace = CoordinateSpace;
	params.bUseScale = bUseScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FTransform USplineComponent::GetTransformAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseScale) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.GetTransformAtDistanceAlongSpline");
	USplineComponent_GetTransformAtDistanceAlongSpline_Params params;

	params.Distance = Distance;
	params.CoordinateSpace = CoordinateSpace;
	params.bUseScale = bUseScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector USplineComponent::GetTangentAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.GetTangentAtTime");
	USplineComponent_GetTangentAtTime_Params params;

	params.Time = Time;
	params.CoordinateSpace = CoordinateSpace;
	params.bUseConstantVelocity = bUseConstantVelocity;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector USplineComponent::GetTangentAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.GetTangentAtSplinePoint");
	USplineComponent_GetTangentAtSplinePoint_Params params;

	params.PointIndex = PointIndex;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector USplineComponent::GetTangentAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.GetTangentAtDistanceAlongSpline");
	USplineComponent_GetTangentAtDistanceAlongSpline_Params params;

	params.Distance = Distance;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float USplineComponent::GetSplineLength() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.GetSplineLength");
	USplineComponent_GetSplineLength_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector USplineComponent::GetScaleAtTime(float Time, bool bUseConstantVelocity) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.GetScaleAtTime");
	USplineComponent_GetScaleAtTime_Params params;

	params.Time = Time;
	params.bUseConstantVelocity = bUseConstantVelocity;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector USplineComponent::GetScaleAtSplinePoint(int PointIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.GetScaleAtSplinePoint");
	USplineComponent_GetScaleAtSplinePoint_Params params;

	params.PointIndex = PointIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector USplineComponent::GetScaleAtDistanceAlongSpline(float Distance) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.GetScaleAtDistanceAlongSpline");
	USplineComponent_GetScaleAtDistanceAlongSpline_Params params;

	params.Distance = Distance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FRotator USplineComponent::GetRotationAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.GetRotationAtTime");
	USplineComponent_GetRotationAtTime_Params params;

	params.Time = Time;
	params.CoordinateSpace = CoordinateSpace;
	params.bUseConstantVelocity = bUseConstantVelocity;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FRotator USplineComponent::GetRotationAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.GetRotationAtSplinePoint");
	USplineComponent_GetRotationAtSplinePoint_Params params;

	params.PointIndex = PointIndex;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FRotator USplineComponent::GetRotationAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.GetRotationAtDistanceAlongSpline");
	USplineComponent_GetRotationAtDistanceAlongSpline_Params params;

	params.Distance = Distance;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float USplineComponent::GetRollAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.GetRollAtTime");
	USplineComponent_GetRollAtTime_Params params;

	params.Time = Time;
	params.CoordinateSpace = CoordinateSpace;
	params.bUseConstantVelocity = bUseConstantVelocity;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float USplineComponent::GetRollAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.GetRollAtSplinePoint");
	USplineComponent_GetRollAtSplinePoint_Params params;

	params.PointIndex = PointIndex;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float USplineComponent::GetRollAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.GetRollAtDistanceAlongSpline");
	USplineComponent_GetRollAtDistanceAlongSpline_Params params;

	params.Distance = Distance;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector USplineComponent::GetRightVectorAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.GetRightVectorAtTime");
	USplineComponent_GetRightVectorAtTime_Params params;

	params.Time = Time;
	params.CoordinateSpace = CoordinateSpace;
	params.bUseConstantVelocity = bUseConstantVelocity;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector USplineComponent::GetRightVectorAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.GetRightVectorAtSplinePoint");
	USplineComponent_GetRightVectorAtSplinePoint_Params params;

	params.PointIndex = PointIndex;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector USplineComponent::GetRightVectorAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.GetRightVectorAtDistanceAlongSpline");
	USplineComponent_GetRightVectorAtDistanceAlongSpline_Params params;

	params.Distance = Distance;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int USplineComponent::GetNumberOfSplinePoints() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.GetNumberOfSplinePoints");
	USplineComponent_GetNumberOfSplinePoints_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector USplineComponent::GetLocationAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.GetLocationAtTime");
	USplineComponent_GetLocationAtTime_Params params;

	params.Time = Time;
	params.CoordinateSpace = CoordinateSpace;
	params.bUseConstantVelocity = bUseConstantVelocity;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector USplineComponent::GetLocationAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.GetLocationAtSplinePoint");
	USplineComponent_GetLocationAtSplinePoint_Params params;

	params.PointIndex = PointIndex;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector USplineComponent::GetLocationAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.GetLocationAtDistanceAlongSpline");
	USplineComponent_GetLocationAtDistanceAlongSpline_Params params;

	params.Distance = Distance;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void USplineComponent::GetLocationAndTangentAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, struct FVector* Location, struct FVector* Tangent) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.GetLocationAndTangentAtSplinePoint");
	USplineComponent_GetLocationAndTangentAtSplinePoint_Params params;

	params.PointIndex = PointIndex;
	params.CoordinateSpace = CoordinateSpace;
	params.Location = *Location;
	params.Tangent = *Tangent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USplineComponent::GetLocalLocationAndTangentAtSplinePoint(int PointIndex, struct FVector* LocalLocation, struct FVector* LocalTangent) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.GetLocalLocationAndTangentAtSplinePoint");
	USplineComponent_GetLocalLocationAndTangentAtSplinePoint_Params params;

	params.PointIndex = PointIndex;
	params.LocalLocation = *LocalLocation;
	params.LocalTangent = *LocalTangent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

struct FVector USplineComponent::GetLeaveTangentAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.GetLeaveTangentAtSplinePoint");
	USplineComponent_GetLeaveTangentAtSplinePoint_Params params;

	params.PointIndex = PointIndex;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float USplineComponent::GetInputKeyAtDistanceAlongSpline(float Distance) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.GetInputKeyAtDistanceAlongSpline");
	USplineComponent_GetInputKeyAtDistanceAlongSpline_Params params;

	params.Distance = Distance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float USplineComponent::GetDistanceAlongSplineAtSplinePoint(int PointIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.GetDistanceAlongSplineAtSplinePoint");
	USplineComponent_GetDistanceAlongSplineAtSplinePoint_Params params;

	params.PointIndex = PointIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector USplineComponent::GetDirectionAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.GetDirectionAtTime");
	USplineComponent_GetDirectionAtTime_Params params;

	params.Time = Time;
	params.CoordinateSpace = CoordinateSpace;
	params.bUseConstantVelocity = bUseConstantVelocity;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector USplineComponent::GetDirectionAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.GetDirectionAtSplinePoint");
	USplineComponent_GetDirectionAtSplinePoint_Params params;

	params.PointIndex = PointIndex;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector USplineComponent::GetDirectionAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.GetDirectionAtDistanceAlongSpline");
	USplineComponent_GetDirectionAtDistanceAlongSpline_Params params;

	params.Distance = Distance;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector USplineComponent::GetDefaultUpVector(TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.GetDefaultUpVector");
	USplineComponent_GetDefaultUpVector_Params params;

	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector USplineComponent::GetArriveTangentAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.GetArriveTangentAtSplinePoint");
	USplineComponent_GetArriveTangentAtSplinePoint_Params params;

	params.PointIndex = PointIndex;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector USplineComponent::FindUpVectorClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.FindUpVectorClosestToWorldLocation");
	USplineComponent_FindUpVectorClosestToWorldLocation_Params params;

	params.WorldLocation = WorldLocation;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FTransform USplineComponent::FindTransformClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseScale) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.FindTransformClosestToWorldLocation");
	USplineComponent_FindTransformClosestToWorldLocation_Params params;

	params.WorldLocation = WorldLocation;
	params.CoordinateSpace = CoordinateSpace;
	params.bUseScale = bUseScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector USplineComponent::FindTangentClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.FindTangentClosestToWorldLocation");
	USplineComponent_FindTangentClosestToWorldLocation_Params params;

	params.WorldLocation = WorldLocation;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector USplineComponent::FindScaleClosestToWorldLocation(const struct FVector& WorldLocation) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.FindScaleClosestToWorldLocation");
	USplineComponent_FindScaleClosestToWorldLocation_Params params;

	params.WorldLocation = WorldLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FRotator USplineComponent::FindRotationClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.FindRotationClosestToWorldLocation");
	USplineComponent_FindRotationClosestToWorldLocation_Params params;

	params.WorldLocation = WorldLocation;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float USplineComponent::FindRollClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.FindRollClosestToWorldLocation");
	USplineComponent_FindRollClosestToWorldLocation_Params params;

	params.WorldLocation = WorldLocation;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector USplineComponent::FindRightVectorClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.FindRightVectorClosestToWorldLocation");
	USplineComponent_FindRightVectorClosestToWorldLocation_Params params;

	params.WorldLocation = WorldLocation;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector USplineComponent::FindLocationClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.FindLocationClosestToWorldLocation");
	USplineComponent_FindLocationClosestToWorldLocation_Params params;

	params.WorldLocation = WorldLocation;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float USplineComponent::FindInputKeyClosestToWorldLocation(const struct FVector& WorldLocation) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.FindInputKeyClosestToWorldLocation");
	USplineComponent_FindInputKeyClosestToWorldLocation_Params params;

	params.WorldLocation = WorldLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector USplineComponent::FindDirectionClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.FindDirectionClosestToWorldLocation");
	USplineComponent_FindDirectionClosestToWorldLocation_Params params;

	params.WorldLocation = WorldLocation;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void USplineComponent::ClearSplinePoints(bool bUpdateSpline) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.ClearSplinePoints");
	USplineComponent_ClearSplinePoints_Params params;

	params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USplineComponent::AddSplineWorldPoint(const struct FVector& Position) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.AddSplineWorldPoint");
	USplineComponent_AddSplineWorldPoint_Params params;

	params.Position = Position;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USplineComponent::AddSplinePointWithRotationAtIndex(const struct FVector& Position, const struct FRotator& Rotation, int Index, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.AddSplinePointWithRotationAtIndex");
	USplineComponent_AddSplinePointWithRotationAtIndex_Params params;

	params.Position = Position;
	params.Rotation = Rotation;
	params.Index = Index;
	params.CoordinateSpace = CoordinateSpace;
	params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USplineComponent::AddSplinePointAtIndex(const struct FVector& Position, int Index, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.AddSplinePointAtIndex");
	USplineComponent_AddSplinePointAtIndex_Params params;

	params.Position = Position;
	params.Index = Index;
	params.CoordinateSpace = CoordinateSpace;
	params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USplineComponent::AddSplinePoint(const struct FVector& Position, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.AddSplinePoint");
	USplineComponent_AddSplinePoint_Params params;

	params.Position = Position;
	params.CoordinateSpace = CoordinateSpace;
	params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USplineComponent::AddSplineLocalPoint(const struct FVector& Position) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.AddSplineLocalPoint");
	USplineComponent_AddSplineLocalPoint_Params params;

	params.Position = Position;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USplineComponent::AddPoints(TArray<struct FSplinePoint> Points, bool bUpdateSpline) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.AddPoints");
	USplineComponent_AddPoints_Params params;

	params.Points = Points;
	params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USplineComponent::AddPoint(const struct FSplinePoint& Point, bool bUpdateSpline) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineComponent.AddPoint");
	USplineComponent_AddPoint_Params params;

	params.Point = Point;
	params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.UnbindClothFromMasterPoseComponent");
	USkeletalMeshComponent_UnbindClothFromMasterPoseComponent_Params params;

	params.bRestoreSimulationSpace = bRestoreSimulationSpace;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::ToggleDisablePostProcessBlueprint() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.ToggleDisablePostProcessBlueprint");
	USkeletalMeshComponent_ToggleDisablePostProcessBlueprint_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::TermBodiesBelow(const struct FName& ParentBoneName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.TermBodiesBelow");
	USkeletalMeshComponent_TermBodiesBelow_Params params;

	params.ParentBoneName = ParentBoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::SuspendClothingSimulation() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.SuspendClothingSimulation");
	USkeletalMeshComponent_SuspendClothingSimulation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::Stop() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.Stop");
	USkeletalMeshComponent_Stop_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::SnapshotPose(struct FPoseSnapshot* Snapshot) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.SnapshotPose");
	USkeletalMeshComponent_SnapshotPose_Params params;

	params.Snapshot = *Snapshot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::SetUpdateAnimationInEditor(bool NewUpdateState) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.SetUpdateAnimationInEditor");
	USkeletalMeshComponent_SetUpdateAnimationInEditor_Params params;

	params.NewUpdateState = NewUpdateState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::SetTeleportRotationThreshold(float Threshold) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.SetTeleportRotationThreshold");
	USkeletalMeshComponent_SetTeleportRotationThreshold_Params params;

	params.Threshold = Threshold;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::SetTeleportDistanceThreshold(float Threshold) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.SetTeleportDistanceThreshold");
	USkeletalMeshComponent_SetTeleportDistanceThreshold_Params params;

	params.Threshold = Threshold;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::SetPosition(float InPos, bool bFireNotifies) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.SetPosition");
	USkeletalMeshComponent_SetPosition_Params params;

	params.InPos = InPos;
	params.bFireNotifies = bFireNotifies;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::SetPlayRate(float Rate) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.SetPlayRate");
	USkeletalMeshComponent_SetPlayRate_Params params;

	params.Rate = Rate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::SetPhysicsBlendWeight(float PhysicsBlendWeight) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.SetPhysicsBlendWeight");
	USkeletalMeshComponent_SetPhysicsBlendWeight_Params params;

	params.PhysicsBlendWeight = PhysicsBlendWeight;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::SetPauseAnims(bool bPaused) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.SetPauseAnims");
	USkeletalMeshComponent_SetPauseAnims_Params params;

	params.bPaused = bPaused;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, const struct FName& BoneName, bool bIncludeSelf) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.SetNotifyRigidBodyCollisionBelow");
	USkeletalMeshComponent_SetNotifyRigidBodyCollisionBelow_Params params;

	params.bNewNotifyRigidBodyCollision = bNewNotifyRigidBodyCollision;
	params.BoneName = BoneName;
	params.bIncludeSelf = bIncludeSelf;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::SetMorphTarget(const struct FName& MorphTargetName, float Value, bool bRemoveZeroWeight) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.SetMorphTarget");
	USkeletalMeshComponent_SetMorphTarget_Params params;

	params.MorphTargetName = MorphTargetName;
	params.Value = Value;
	params.bRemoveZeroWeight = bRemoveZeroWeight;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::SetEnablePhysicsBlending(bool bNewBlendPhysics) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.SetEnablePhysicsBlending");
	USkeletalMeshComponent_SetEnablePhysicsBlending_Params params;

	params.bNewBlendPhysics = bNewBlendPhysics;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, const struct FName& BoneName, bool bIncludeSelf) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.SetEnableGravityOnAllBodiesBelow");
	USkeletalMeshComponent_SetEnableGravityOnAllBodiesBelow_Params params;

	params.bEnableGravity = bEnableGravity;
	params.BoneName = BoneName;
	params.bIncludeSelf = bIncludeSelf;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::SetEnableBodyGravity(bool bEnableGravity, const struct FName& BoneName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.SetEnableBodyGravity");
	USkeletalMeshComponent_SetEnableBodyGravity_Params params;

	params.bEnableGravity = bEnableGravity;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::SetDisablePostProcessBlueprint(bool bInDisablePostProcess) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.SetDisablePostProcessBlueprint");
	USkeletalMeshComponent_SetDisablePostProcessBlueprint_Params params;

	params.bInDisablePostProcess = bInDisablePostProcess;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::SetDisableAnimCurves(bool bInDisableAnimCurves) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.SetDisableAnimCurves");
	USkeletalMeshComponent_SetDisableAnimCurves_Params params;

	params.bInDisableAnimCurves = bInDisableAnimCurves;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::SetConstraintProfileForAll(const struct FName& ProfileName, bool bDefaultIfNotFound) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.SetConstraintProfileForAll");
	USkeletalMeshComponent_SetConstraintProfileForAll_Params params;

	params.ProfileName = ProfileName;
	params.bDefaultIfNotFound = bDefaultIfNotFound;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::SetConstraintProfile(const struct FName& JointName, const struct FName& ProfileName, bool bDefaultIfNotFound) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.SetConstraintProfile");
	USkeletalMeshComponent_SetConstraintProfile_Params params;

	params.JointName = JointName;
	params.ProfileName = ProfileName;
	params.bDefaultIfNotFound = bDefaultIfNotFound;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::SetCollisionResponse(TEnumAsByte<ECollisionEnabled> CollisionEnabled, const struct FName& BodyName, bool bIncludeChildren) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.SetCollisionResponse");
	USkeletalMeshComponent_SetCollisionResponse_Params params;

	params.CollisionEnabled = CollisionEnabled;
	params.BodyName = BodyName;
	params.bIncludeChildren = bIncludeChildren;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::SetClothMaxDistanceScale(float Scale) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.SetClothMaxDistanceScale");
	USkeletalMeshComponent_SetClothMaxDistanceScale_Params params;

	params.Scale = Scale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, const struct FName& BoneName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.SetBodyNotifyRigidBodyCollision");
	USkeletalMeshComponent_SetBodyNotifyRigidBodyCollision_Params params;

	params.bNewNotifyRigidBodyCollision = bNewNotifyRigidBodyCollision;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::SetAnimationMode(TEnumAsByte<EAnimationMode> InAnimationMode) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.SetAnimationMode");
	USkeletalMeshComponent_SetAnimationMode_Params params;

	params.InAnimationMode = InAnimationMode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::SetAnimation(class UAnimationAsset* NewAnimToPlay) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.SetAnimation");
	USkeletalMeshComponent_SetAnimation_Params params;

	params.NewAnimToPlay = NewAnimToPlay;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::SetAngularLimits(const struct FName& InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.SetAngularLimits");
	USkeletalMeshComponent_SetAngularLimits_Params params;

	params.InBoneName = InBoneName;
	params.Swing1LimitAngle = Swing1LimitAngle;
	params.TwistLimitAngle = TwistLimitAngle;
	params.Swing2LimitAngle = Swing2LimitAngle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::SetAllowedAnimCurvesEvaluation(TArray<struct FName> List, bool bAllow) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.SetAllowedAnimCurvesEvaluation");
	USkeletalMeshComponent_SetAllowedAnimCurvesEvaluation_Params params;

	params.List = List;
	params.bAllow = bAllow;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::SetAllowAnimCurveEvaluation(bool bInAllow) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.SetAllowAnimCurveEvaluation");
	USkeletalMeshComponent_SetAllowAnimCurveEvaluation_Params params;

	params.bInAllow = bInAllow;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.SetAllMotorsAngularVelocityDrive");
	USkeletalMeshComponent_SetAllMotorsAngularVelocityDrive_Params params;

	params.bEnableSwingDrive = bEnableSwingDrive;
	params.bEnableTwistDrive = bEnableTwistDrive;
	params.bSkipCustomPhysicsType = bSkipCustomPhysicsType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.SetAllMotorsAngularPositionDrive");
	USkeletalMeshComponent_SetAllMotorsAngularPositionDrive_Params params;

	params.bEnableSwingDrive = bEnableSwingDrive;
	params.bEnableTwistDrive = bEnableTwistDrive;
	params.bSkipCustomPhysicsType = bSkipCustomPhysicsType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.SetAllMotorsAngularDriveParams");
	USkeletalMeshComponent_SetAllMotorsAngularDriveParams_Params params;

	params.InSpring = InSpring;
	params.InDamping = InDamping;
	params.InForceLimit = InForceLimit;
	params.bSkipCustomPhysicsType = bSkipCustomPhysicsType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::SetAllBodiesSimulatePhysics(bool bNewSimulate) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.SetAllBodiesSimulatePhysics");
	USkeletalMeshComponent_SetAllBodiesSimulatePhysics_Params params;

	params.bNewSimulate = bNewSimulate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.SetAllBodiesPhysicsBlendWeight");
	USkeletalMeshComponent_SetAllBodiesPhysicsBlendWeight_Params params;

	params.PhysicsBlendWeight = PhysicsBlendWeight;
	params.bSkipCustomPhysicsType = bSkipCustomPhysicsType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::SetAllBodiesBelowSimulatePhysics(const struct FName& InBoneName, bool bNewSimulate, bool bIncludeSelf) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.SetAllBodiesBelowSimulatePhysics");
	USkeletalMeshComponent_SetAllBodiesBelowSimulatePhysics_Params params;

	params.InBoneName = InBoneName;
	params.bNewSimulate = bNewSimulate;
	params.bIncludeSelf = bIncludeSelf;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::SetAllBodiesBelowPhysicsBlendWeight(const struct FName& InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.SetAllBodiesBelowPhysicsBlendWeight");
	USkeletalMeshComponent_SetAllBodiesBelowPhysicsBlendWeight_Params params;

	params.InBoneName = InBoneName;
	params.PhysicsBlendWeight = PhysicsBlendWeight;
	params.bSkipCustomPhysicsType = bSkipCustomPhysicsType;
	params.bIncludeSelf = bIncludeSelf;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::ResumeClothingSimulation() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.ResumeClothingSimulation");
	USkeletalMeshComponent_ResumeClothingSimulation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::ResetClothTeleportMode() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.ResetClothTeleportMode");
	USkeletalMeshComponent_ResetClothTeleportMode_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::ResetAnimInstanceDynamics(ETeleportType InTeleportType) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.ResetAnimInstanceDynamics");
	USkeletalMeshComponent_ResetAnimInstanceDynamics_Params params;

	params.InTeleportType = InTeleportType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::ResetAllowedAnimCurveEvaluation() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.ResetAllowedAnimCurveEvaluation");
	USkeletalMeshComponent_ResetAllowedAnimCurveEvaluation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::ResetAllBodiesSimulatePhysics() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.ResetAllBodiesSimulatePhysics");
	USkeletalMeshComponent_ResetAllBodiesSimulatePhysics_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::PlaySingleAnimation(class UAnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.PlaySingleAnimation");
	USkeletalMeshComponent_PlaySingleAnimation_Params params;

	params.InAnimToPlay = InAnimToPlay;
	params.bIsLooping = bIsLooping;
	params.bIsPlaying = bIsPlaying;
	params.Position = Position;
	params.PlayRate = PlayRate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::PlayAnimation(class UAnimationAsset* NewAnimToPlay, bool bLooping) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.PlayAnimation");
	USkeletalMeshComponent_PlayAnimation_Params params;

	params.NewAnimToPlay = NewAnimToPlay;
	params.bLooping = bLooping;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::Play(bool bLooping) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.Play");
	USkeletalMeshComponent_Play_Params params;

	params.bLooping = bLooping;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::OverrideAnimationData(class UAnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.OverrideAnimationData");
	USkeletalMeshComponent_OverrideAnimationData_Params params;

	params.InAnimToPlay = InAnimToPlay;
	params.bIsLooping = bIsLooping;
	params.bIsPlaying = bIsPlaying;
	params.Position = Position;
	params.PlayRate = PlayRate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::K2_SetAnimInstanceClass(class UClass* NewClass) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.K2_SetAnimInstanceClass");
	USkeletalMeshComponent_K2_SetAnimInstanceClass_Params params;

	params.NewClass = NewClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool USkeletalMeshComponent::K2_GetClosestPointOnPhysicsAsset(const struct FVector& WorldPosition, struct FVector* ClosestWorldPosition, struct FVector* Normal, struct FName* BoneName, float* Distance) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.K2_GetClosestPointOnPhysicsAsset");
	USkeletalMeshComponent_K2_GetClosestPointOnPhysicsAsset_Params params;

	params.WorldPosition = WorldPosition;
	params.ClosestWorldPosition = *ClosestWorldPosition;
	params.Normal = *Normal;
	params.BoneName = *BoneName;
	params.Distance = *Distance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool USkeletalMeshComponent::IsPlaying() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.IsPlaying");
	USkeletalMeshComponent_IsPlaying_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool USkeletalMeshComponent::IsClothingSimulationSuspended() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.IsClothingSimulationSuspended");
	USkeletalMeshComponent_IsClothingSimulationSuspended_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool USkeletalMeshComponent::IsBodyGravityEnabled(const struct FName& BoneName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.IsBodyGravityEnabled");
	USkeletalMeshComponent_IsBodyGravityEnabled_Params params;

	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool USkeletalMeshComponent::HasValidAnimationInstance() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.HasValidAnimationInstance");
	USkeletalMeshComponent_HasValidAnimationInstance_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float USkeletalMeshComponent::GetTeleportRotationThreshold() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.GetTeleportRotationThreshold");
	USkeletalMeshComponent_GetTeleportRotationThreshold_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float USkeletalMeshComponent::GetTeleportDistanceThreshold() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.GetTeleportDistanceThreshold");
	USkeletalMeshComponent_GetTeleportDistanceThreshold_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector USkeletalMeshComponent::GetSkeletalCenterOfMass() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.GetSkeletalCenterOfMass");
	USkeletalMeshComponent_GetSkeletalCenterOfMass_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UAnimInstance* USkeletalMeshComponent::GetPostProcessInstance() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.GetPostProcessInstance");
	USkeletalMeshComponent_GetPostProcessInstance_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float USkeletalMeshComponent::GetPosition() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.GetPosition");
	USkeletalMeshComponent_GetPosition_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float USkeletalMeshComponent::GetPlayRate() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.GetPlayRate");
	USkeletalMeshComponent_GetPlayRate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float USkeletalMeshComponent::GetMorphTarget(const struct FName& MorphTargetName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.GetMorphTarget");
	USkeletalMeshComponent_GetMorphTarget_Params params;

	params.MorphTargetName = MorphTargetName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool USkeletalMeshComponent::GetDisablePostProcessBlueprint() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.GetDisablePostProcessBlueprint");
	USkeletalMeshComponent_GetDisablePostProcessBlueprint_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool USkeletalMeshComponent::GetDisableAnimCurves() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.GetDisableAnimCurves");
	USkeletalMeshComponent_GetDisableAnimCurves_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void USkeletalMeshComponent::GetCurrentJointAngles(const struct FName& InBoneName, float* Swing1Angle, float* TwistAngle, float* Swing2Angle) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.GetCurrentJointAngles");
	USkeletalMeshComponent_GetCurrentJointAngles_Params params;

	params.InBoneName = InBoneName;
	params.Swing1Angle = *Swing1Angle;
	params.TwistAngle = *TwistAngle;
	params.Swing2Angle = *Swing2Angle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

float USkeletalMeshComponent::GetClothMaxDistanceScale() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.GetClothMaxDistanceScale");
	USkeletalMeshComponent_GetClothMaxDistanceScale_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UClothingSimulationInteractor* USkeletalMeshComponent::GetClothingSimulationInteractor() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.GetClothingSimulationInteractor");
	USkeletalMeshComponent_GetClothingSimulationInteractor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float USkeletalMeshComponent::GetBoneMass(const struct FName& BoneName, bool bScaleMass) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.GetBoneMass");
	USkeletalMeshComponent_GetBoneMass_Params params;

	params.BoneName = BoneName;
	params.bScaleMass = bScaleMass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UAnimInstance* USkeletalMeshComponent::GetAnimInstance() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.GetAnimInstance");
	USkeletalMeshComponent_GetAnimInstance_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool USkeletalMeshComponent::GetAllowedAnimCurveEvaluate() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.GetAllowedAnimCurveEvaluate");
	USkeletalMeshComponent_GetAllowedAnimCurveEvaluate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void USkeletalMeshComponent::ForceClothNextUpdateTeleportAndReset() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleportAndReset");
	USkeletalMeshComponent_ForceClothNextUpdateTeleportAndReset_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::ForceClothNextUpdateTeleport() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleport");
	USkeletalMeshComponent_ForceClothNextUpdateTeleport_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

struct FName USkeletalMeshComponent::FindConstraintBoneName(int ConstraintIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.FindConstraintBoneName");
	USkeletalMeshComponent_FindConstraintBoneName_Params params;

	params.ConstraintIndex = ConstraintIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void USkeletalMeshComponent::EnableTickingDueToWake(class UPrimitiveComponent* WakingComponent, const struct FName& BoneName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.EnableTickingDueToWake");
	USkeletalMeshComponent_EnableTickingDueToWake_Params params;

	params.WakingComponent = WakingComponent;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::EnableAnimSetByGenericName(const struct FName& GenericName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.EnableAnimSetByGenericName");
	USkeletalMeshComponent_EnableAnimSetByGenericName_Params params;

	params.GenericName = GenericName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::EnableAnimSet(class UGbxAnimSet* AnimSet) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.EnableAnimSet");
	USkeletalMeshComponent_EnableAnimSet_Params params;

	params.AnimSet = AnimSet;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::DisableTickingDueToSleep(class UPrimitiveComponent* SleepingComponent, const struct FName& BoneName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.DisableTickingDueToSleep");
	USkeletalMeshComponent_DisableTickingDueToSleep_Params params;

	params.SleepingComponent = SleepingComponent;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::DisableAnimSetByGenericName(const struct FName& GenericName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.DisableAnimSetByGenericName");
	USkeletalMeshComponent_DisableAnimSetByGenericName_Params params;

	params.GenericName = GenericName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::DisableAnimSet(class UGbxAnimSet* AnimSet) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.DisableAnimSet");
	USkeletalMeshComponent_DisableAnimSet_Params params;

	params.AnimSet = AnimSet;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::ClearMorphTargets() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.ClearMorphTargets");
	USkeletalMeshComponent_ClearMorphTargets_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::BreakConstraint(const struct FVector& Impulse, const struct FVector& HitLocation, const struct FName& InBoneName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.BreakConstraint");
	USkeletalMeshComponent_BreakConstraint_Params params;

	params.Impulse = Impulse;
	params.HitLocation = HitLocation;
	params.InBoneName = InBoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::BindClothToMasterPoseComponent() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.BindClothToMasterPoseComponent");
	USkeletalMeshComponent_BindClothToMasterPoseComponent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::AllowAnimCurveEvaluation(const struct FName& NameOfCurve, bool bAllow) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.AllowAnimCurveEvaluation");
	USkeletalMeshComponent_AllowAnimCurveEvaluation_Params params;

	params.NameOfCurve = NameOfCurve;
	params.bAllow = bAllow;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::AddImpulseToAllBodiesBelow(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange, bool bIncludeSelf) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.AddImpulseToAllBodiesBelow");
	USkeletalMeshComponent_AddImpulseToAllBodiesBelow_Params params;

	params.Impulse = Impulse;
	params.BoneName = BoneName;
	params.bVelChange = bVelChange;
	params.bIncludeSelf = bIncludeSelf;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::AddForceToAllBodiesBelow(const struct FVector& Force, const struct FName& BoneName, bool bAccelChange, bool bIncludeSelf) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.AddForceToAllBodiesBelow");
	USkeletalMeshComponent_AddForceToAllBodiesBelow_Params params;

	params.Force = Force;
	params.BoneName = BoneName;
	params.bAccelChange = bAccelChange;
	params.bIncludeSelf = bIncludeSelf;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshComponent::AccumulateAllBodiesBelowPhysicsBlendWeight(const struct FName& InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshComponent.AccumulateAllBodiesBelowPhysicsBlendWeight");
	USkeletalMeshComponent_AccumulateAllBodiesBelowPhysicsBlendWeight_Params params;

	params.InBoneName = InBoneName;
	params.AddPhysicsBlendWeight = AddPhysicsBlendWeight;
	params.bSkipCustomPhysicsType = bSkipCustomPhysicsType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAnimInstance::UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.UnlockAIResources");
	UAnimInstance_UnlockAIResources_Params params;

	params.bUnlockMovement = bUnlockMovement;
	params.UnlockAILogic = UnlockAILogic;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

class APawn* UAnimInstance::TryGetPawnOwner() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.TryGetPawnOwner");
	UAnimInstance_TryGetPawnOwner_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UAnimInstance::StopSlotAnimation(float InBlendOutTime, const struct FName& SlotNodeName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.StopSlotAnimation");
	UAnimInstance_StopSlotAnimation_Params params;

	params.InBlendOutTime = InBlendOutTime;
	params.SlotNodeName = SlotNodeName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAnimInstance::SnapshotPose(struct FPoseSnapshot* Snapshot) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.SnapshotPose");
	UAnimInstance_SnapshotPose_Params params;

	params.Snapshot = *Snapshot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAnimInstance::SetRootMotionMode(TEnumAsByte<ERootMotionMode> Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.SetRootMotionMode");
	UAnimInstance_SetRootMotionMode_Params params;

	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAnimInstance::SetMorphTarget(const struct FName& MorphTargetName, float Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.SetMorphTarget");
	UAnimInstance_SetMorphTarget_Params params;

	params.MorphTargetName = MorphTargetName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAnimInstance::SavePoseSnapshot(const struct FName& SnapshotName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.SavePoseSnapshot");
	UAnimInstance_SavePoseSnapshot_Params params;

	params.SnapshotName = SnapshotName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAnimInstance::ResetDynamics(ETeleportType InTeleportType) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.ResetDynamics");
	UAnimInstance_ResetDynamics_Params params;

	params.InTeleportType = InTeleportType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

class UAnimMontage* UAnimInstance::PlaySlotAnimationAsDynamicMontage(class UAnimSequenceBase* Asset, const struct FName& SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.PlaySlotAnimationAsDynamicMontage");
	UAnimInstance_PlaySlotAnimationAsDynamicMontage_Params params;

	params.Asset = Asset;
	params.SlotNodeName = SlotNodeName;
	params.BlendInTime = BlendInTime;
	params.BlendOutTime = BlendOutTime;
	params.InPlayRate = InPlayRate;
	params.LoopCount = LoopCount;
	params.BlendOutTriggerTime = BlendOutTriggerTime;
	params.InTimeToStartMontageAt = InTimeToStartMontageAt;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UAnimInstance::PlaySlotAnimation(class UAnimSequenceBase* Asset, const struct FName& SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.PlaySlotAnimation");
	UAnimInstance_PlaySlotAnimation_Params params;

	params.Asset = Asset;
	params.SlotNodeName = SlotNodeName;
	params.BlendInTime = BlendInTime;
	params.BlendOutTime = BlendOutTime;
	params.InPlayRate = InPlayRate;
	params.LoopCount = LoopCount;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UAnimInstance::Montage_Stop(float InBlendOutTime, class UAnimMontage* Montage) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.Montage_Stop");
	UAnimInstance_Montage_Stop_Params params;

	params.InBlendOutTime = InBlendOutTime;
	params.Montage = Montage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAnimInstance::Montage_SetPosition(class UAnimMontage* Montage, float NewPosition) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.Montage_SetPosition");
	UAnimInstance_Montage_SetPosition_Params params;

	params.Montage = Montage;
	params.NewPosition = NewPosition;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAnimInstance::Montage_SetPlayRate(class UAnimMontage* Montage, float NewPlayRate) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.Montage_SetPlayRate");
	UAnimInstance_Montage_SetPlayRate_Params params;

	params.Montage = Montage;
	params.NewPlayRate = NewPlayRate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAnimInstance::Montage_SetNextSection(const struct FName& SectionNameToChange, const struct FName& NextSection, class UAnimMontage* Montage) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.Montage_SetNextSection");
	UAnimInstance_Montage_SetNextSection_Params params;

	params.SectionNameToChange = SectionNameToChange;
	params.NextSection = NextSection;
	params.Montage = Montage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAnimInstance::Montage_Resume(class UAnimMontage* Montage) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.Montage_Resume");
	UAnimInstance_Montage_Resume_Params params;

	params.Montage = Montage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

float UAnimInstance::Montage_Play(class UAnimMontage* MontageToPlay, float InPlayRate, EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages, float BlendInOverride, float BlendOutOverride) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.Montage_Play");
	UAnimInstance_Montage_Play_Params params;

	params.MontageToPlay = MontageToPlay;
	params.InPlayRate = InPlayRate;
	params.ReturnValueType = ReturnValueType;
	params.InTimeToStartMontageAt = InTimeToStartMontageAt;
	params.bStopAllMontages = bStopAllMontages;
	params.BlendInOverride = BlendInOverride;
	params.BlendOutOverride = BlendOutOverride;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UAnimInstance::Montage_Pause(class UAnimMontage* Montage) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.Montage_Pause");
	UAnimInstance_Montage_Pause_Params params;

	params.Montage = Montage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAnimInstance::Montage_JumpToSectionsEnd(const struct FName& SectionName, class UAnimMontage* Montage) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.Montage_JumpToSectionsEnd");
	UAnimInstance_Montage_JumpToSectionsEnd_Params params;

	params.SectionName = SectionName;
	params.Montage = Montage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAnimInstance::Montage_JumpToSection(const struct FName& SectionName, class UAnimMontage* Montage) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.Montage_JumpToSection");
	UAnimInstance_Montage_JumpToSection_Params params;

	params.SectionName = SectionName;
	params.Montage = Montage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UAnimInstance::Montage_IsPlaying(class UAnimMontage* Montage, bool bIncludeInactiveInstances) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.Montage_IsPlaying");
	UAnimInstance_Montage_IsPlaying_Params params;

	params.Montage = Montage;
	params.bIncludeInactiveInstances = bIncludeInactiveInstances;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UAnimInstance::Montage_IsActive(class UAnimMontage* Montage) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.Montage_IsActive");
	UAnimInstance_Montage_IsActive_Params params;

	params.Montage = Montage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UAnimInstance::Montage_GetPosition(class UAnimMontage* Montage, bool bIncludeInactiveInstances) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.Montage_GetPosition");
	UAnimInstance_Montage_GetPosition_Params params;

	params.Montage = Montage;
	params.bIncludeInactiveInstances = bIncludeInactiveInstances;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UAnimInstance::Montage_GetPlayRate(class UAnimMontage* Montage) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.Montage_GetPlayRate");
	UAnimInstance_Montage_GetPlayRate_Params params;

	params.Montage = Montage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UAnimInstance::Montage_GetIsStopped(class UAnimMontage* Montage) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.Montage_GetIsStopped");
	UAnimInstance_Montage_GetIsStopped_Params params;

	params.Montage = Montage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FName UAnimInstance::Montage_GetCurrentSection(class UAnimMontage* Montage) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.Montage_GetCurrentSection");
	UAnimInstance_Montage_GetCurrentSection_Params params;

	params.Montage = Montage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UAnimInstance::Montage_GetBlendTime(class UAnimMontage* Montage) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.Montage_GetBlendTime");
	UAnimInstance_Montage_GetBlendTime_Params params;

	params.Montage = Montage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UAnimInstance::LockAIResources(bool bLockMovement, bool LockAILogic) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.LockAIResources");
	UAnimInstance_LockAIResources_Params params;

	params.bLockMovement = bLockMovement;
	params.LockAILogic = LockAILogic;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UAnimInstance::IsSyncGroupBetweenMarkers(const struct FName& InSyncGroupName, const struct FName& PreviousMarker, const struct FName& NextMarker, bool bRespectMarkerOrder) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.IsSyncGroupBetweenMarkers");
	UAnimInstance_IsSyncGroupBetweenMarkers_Params params;

	params.InSyncGroupName = InSyncGroupName;
	params.PreviousMarker = PreviousMarker;
	params.NextMarker = NextMarker;
	params.bRespectMarkerOrder = bRespectMarkerOrder;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UAnimInstance::IsPlayingSlotAnimation(class UAnimSequenceBase* Asset, const struct FName& SlotNodeName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.IsPlayingSlotAnimation");
	UAnimInstance_IsPlayingSlotAnimation_Params params;

	params.Asset = Asset;
	params.SlotNodeName = SlotNodeName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UAnimInstance::IsAnyMontagePlaying() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.IsAnyMontagePlaying");
	UAnimInstance_IsAnyMontagePlaying_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UAnimInstance::IsAnyBlendSpaceInstancePlaying() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.IsAnyBlendSpaceInstancePlaying");
	UAnimInstance_IsAnyBlendSpaceInstancePlaying_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UAnimInstance::HasMarkerBeenHitThisFrame(const struct FName& SyncGroup, const struct FName& MarkerName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.HasMarkerBeenHitThisFrame");
	UAnimInstance_HasMarkerBeenHitThisFrame_Params params;

	params.SyncGroup = SyncGroup;
	params.MarkerName = MarkerName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UAnimInstance::GetTimeToClosestMarker(const struct FName& SyncGroup, const struct FName& MarkerName, float* OutMarkerTime) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.GetTimeToClosestMarker");
	UAnimInstance_GetTimeToClosestMarker_Params params;

	params.SyncGroup = SyncGroup;
	params.MarkerName = MarkerName;
	params.OutMarkerTime = *OutMarkerTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FMarkerSyncAnimPosition UAnimInstance::GetSyncGroupPosition(const struct FName& InSyncGroupName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.GetSyncGroupPosition");
	UAnimInstance_GetSyncGroupPosition_Params params;

	params.InSyncGroupName = InSyncGroupName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UAnimInstance::GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.GetRelevantAnimTimeRemainingFraction");
	UAnimInstance_GetRelevantAnimTimeRemainingFraction_Params params;

	params.MachineIndex = MachineIndex;
	params.StateIndex = StateIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UAnimInstance::GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.GetRelevantAnimTimeRemaining");
	UAnimInstance_GetRelevantAnimTimeRemaining_Params params;

	params.MachineIndex = MachineIndex;
	params.StateIndex = StateIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UAnimInstance::GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.GetRelevantAnimTimeFraction");
	UAnimInstance_GetRelevantAnimTimeFraction_Params params;

	params.MachineIndex = MachineIndex;
	params.StateIndex = StateIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UAnimInstance::GetRelevantAnimTime(int MachineIndex, int StateIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.GetRelevantAnimTime");
	UAnimInstance_GetRelevantAnimTime_Params params;

	params.MachineIndex = MachineIndex;
	params.StateIndex = StateIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FTransform UAnimInstance::GetRelevantAnimRootMotionRemaining(int MachineIndex, int StateIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.GetRelevantAnimRootMotionRemaining");
	UAnimInstance_GetRelevantAnimRootMotionRemaining_Params params;

	params.MachineIndex = MachineIndex;
	params.StateIndex = StateIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UAnimInstance::GetRelevantAnimLength(int MachineIndex, int StateIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.GetRelevantAnimLength");
	UAnimInstance_GetRelevantAnimLength_Params params;

	params.MachineIndex = MachineIndex;
	params.StateIndex = StateIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class USkeletalMeshComponent* UAnimInstance::GetOwningComponent() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.GetOwningComponent");
	UAnimInstance_GetOwningComponent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class AActor* UAnimInstance::GetOwningActor() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.GetOwningActor");
	UAnimInstance_GetOwningActor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UAnimInstance::GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.GetInstanceTransitionTimeElapsedFraction");
	UAnimInstance_GetInstanceTransitionTimeElapsedFraction_Params params;

	params.MachineIndex = MachineIndex;
	params.TransitionIndex = TransitionIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UAnimInstance::GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.GetInstanceTransitionTimeElapsed");
	UAnimInstance_GetInstanceTransitionTimeElapsed_Params params;

	params.MachineIndex = MachineIndex;
	params.TransitionIndex = TransitionIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UAnimInstance::GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.GetInstanceTransitionCrossfadeDuration");
	UAnimInstance_GetInstanceTransitionCrossfadeDuration_Params params;

	params.MachineIndex = MachineIndex;
	params.TransitionIndex = TransitionIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UAnimInstance::GetInstanceStateWeight(int MachineIndex, int StateIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.GetInstanceStateWeight");
	UAnimInstance_GetInstanceStateWeight_Params params;

	params.MachineIndex = MachineIndex;
	params.StateIndex = StateIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UAnimInstance::GetInstanceMachineWeight(int MachineIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.GetInstanceMachineWeight");
	UAnimInstance_GetInstanceMachineWeight_Params params;

	params.MachineIndex = MachineIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UAnimInstance::GetInstanceCurrentStateElapsedTime(int MachineIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.GetInstanceCurrentStateElapsedTime");
	UAnimInstance_GetInstanceCurrentStateElapsedTime_Params params;

	params.MachineIndex = MachineIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UAnimInstance::GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEndFraction");
	UAnimInstance_GetInstanceAssetPlayerTimeFromEndFraction_Params params;

	params.AssetPlayerIndex = AssetPlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UAnimInstance::GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEnd");
	UAnimInstance_GetInstanceAssetPlayerTimeFromEnd_Params params;

	params.AssetPlayerIndex = AssetPlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UAnimInstance::GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.GetInstanceAssetPlayerTimeFraction");
	UAnimInstance_GetInstanceAssetPlayerTimeFraction_Params params;

	params.AssetPlayerIndex = AssetPlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UAnimInstance::GetInstanceAssetPlayerTime(int AssetPlayerIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.GetInstanceAssetPlayerTime");
	UAnimInstance_GetInstanceAssetPlayerTime_Params params;

	params.AssetPlayerIndex = AssetPlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UAnimInstance::GetInstanceAssetPlayerLength(int AssetPlayerIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.GetInstanceAssetPlayerLength");
	UAnimInstance_GetInstanceAssetPlayerLength_Params params;

	params.AssetPlayerIndex = AssetPlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UAnimInstance::GetCurveValue(const struct FName& CurveName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.GetCurveValue");
	UAnimInstance_GetCurveValue_Params params;

	params.CurveName = CurveName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FName UAnimInstance::GetCurrentStateName(int MachineIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.GetCurrentStateName");
	UAnimInstance_GetCurrentStateName_Params params;

	params.MachineIndex = MachineIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UAnimMontage* UAnimInstance::GetCurrentActiveMontage() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.GetCurrentActiveMontage");
	UAnimInstance_GetCurrentActiveMontage_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UBlendSpaceBase* UAnimInstance::GetBlendSpaceBaseFromAnimSet(const struct FName& AnimAssetName, bool* bIsValid) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.GetBlendSpaceBaseFromAnimSet");
	UAnimInstance_GetBlendSpaceBaseFromAnimSet_Params params;

	params.AnimAssetName = AnimAssetName;
	params.bIsValid = bIsValid;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UAnimSequenceBase* UAnimInstance::GetAnimSeqBaseFromAnimSet(const struct FName& AnimAssetName, bool* bIsValid) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.GetAnimSeqBaseFromAnimSet");
	UAnimInstance_GetAnimSeqBaseFromAnimSet_Params params;

	params.AnimAssetName = AnimAssetName;
	params.bIsValid = bIsValid;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UAnimInstance::GetAnimationSlotWeight(const struct FName& SlotNodeName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.GetAnimationSlotWeight");
	UAnimInstance_GetAnimationSlotWeight_Params params;

	params.SlotNodeName = SlotNodeName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UAnimInstance::GetAllCurveNames(TArray<struct FName>* OutNames) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.GetAllCurveNames");
	UAnimInstance_GetAllCurveNames_Params params;

	params.OutNames = *OutNames;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAnimInstance::GetActiveCurveNames(EAnimCurveType CurveType, TArray<struct FName>* OutNames) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.GetActiveCurveNames");
	UAnimInstance_GetActiveCurveNames_Params params;

	params.CurveType = CurveType;
	params.OutNames = *OutNames;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAnimInstance::EnableAnimSetByGenericName(const struct FName& GenericName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.EnableAnimSetByGenericName");
	UAnimInstance_EnableAnimSetByGenericName_Params params;

	params.GenericName = GenericName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAnimInstance::EnableAnimSet(class UGbxAnimSet* AnimSet) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.EnableAnimSet");
	UAnimInstance_EnableAnimSet_Params params;

	params.AnimSet = AnimSet;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UAnimInstance::DoesCurveExist(const struct FName& CurveName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.DoesCurveExist");
	UAnimInstance_DoesCurveExist_Params params;

	params.CurveName = CurveName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UAnimInstance::DisableAnimSetByGenericName(const struct FName& GenericName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.DisableAnimSetByGenericName");
	UAnimInstance_DisableAnimSetByGenericName_Params params;

	params.GenericName = GenericName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAnimInstance::DisableAnimSet(class UGbxAnimSet* AnimSet) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.DisableAnimSet");
	UAnimInstance_DisableAnimSet_Params params;

	params.AnimSet = AnimSet;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAnimInstance::ClearMorphTargets() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.ClearMorphTargets");
	UAnimInstance_ClearMorphTargets_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

float UAnimInstance::CalculateDirection(const struct FVector& Velocity, const struct FRotator& BaseRotation) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.CalculateDirection");
	UAnimInstance_CalculateDirection_Params params;

	params.Velocity = Velocity;
	params.BaseRotation = BaseRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UAnimInstance::BlueprintUpdateAnimation(float DeltaTimeX) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.BlueprintUpdateAnimation");
	UAnimInstance_BlueprintUpdateAnimation_Params params;

	params.DeltaTimeX = DeltaTimeX;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAnimInstance::BlueprintPostEvaluateAnimation() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.BlueprintPostEvaluateAnimation");
	UAnimInstance_BlueprintPostEvaluateAnimation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAnimInstance::BlueprintInitializeAnimation() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.BlueprintInitializeAnimation");
	UAnimInstance_BlueprintInitializeAnimation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAnimInstance::BlueprintBeginPlay() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimInstance.BlueprintBeginPlay");
	UAnimInstance_BlueprintBeginPlay_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAudioComponent::Stop() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AudioComponent.Stop");
	UAudioComponent_Stop_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAudioComponent::SetWaveParameter(const struct FName& InName, class USoundWave* InWave) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AudioComponent.SetWaveParameter");
	UAudioComponent_SetWaveParameter_Params params;

	params.InName = InName;
	params.InWave = InWave;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAudioComponent::SetVolumeMultiplier(float NewVolumeMultiplier) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AudioComponent.SetVolumeMultiplier");
	UAudioComponent_SetVolumeMultiplier_Params params;

	params.NewVolumeMultiplier = NewVolumeMultiplier;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAudioComponent::SetUISound(bool bInUISound) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AudioComponent.SetUISound");
	UAudioComponent_SetUISound_Params params;

	params.bInUISound = bInUISound;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAudioComponent::SetSubmixSend(class USoundSubmix* Submix, float SendLevel) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AudioComponent.SetSubmixSend");
	UAudioComponent_SetSubmixSend_Params params;

	params.Submix = Submix;
	params.SendLevel = SendLevel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAudioComponent::SetSound(class USoundBase* NewSound) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AudioComponent.SetSound");
	UAudioComponent_SetSound_Params params;

	params.NewSound = NewSound;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAudioComponent::SetPitchMultiplier(float NewPitchMultiplier) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AudioComponent.SetPitchMultiplier");
	UAudioComponent_SetPitchMultiplier_Params params;

	params.NewPitchMultiplier = NewPitchMultiplier;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAudioComponent::SetPaused(bool bPause) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AudioComponent.SetPaused");
	UAudioComponent_SetPaused_Params params;

	params.bPause = bPause;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAudioComponent::SetLowPassFilterFrequency(float InLowPassFilterFrequency) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AudioComponent.SetLowPassFilterFrequency");
	UAudioComponent_SetLowPassFilterFrequency_Params params;

	params.InLowPassFilterFrequency = InLowPassFilterFrequency;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAudioComponent::SetLowPassFilterEnabled(bool InLowPassFilterEnabled) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AudioComponent.SetLowPassFilterEnabled");
	UAudioComponent_SetLowPassFilterEnabled_Params params;

	params.InLowPassFilterEnabled = InLowPassFilterEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAudioComponent::SetIntParameter(const struct FName& InName, int inInt) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AudioComponent.SetIntParameter");
	UAudioComponent_SetIntParameter_Params params;

	params.InName = InName;
	params.inInt = inInt;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAudioComponent::SetFloatParameter(const struct FName& InName, float InFloat) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AudioComponent.SetFloatParameter");
	UAudioComponent_SetFloatParameter_Params params;

	params.InName = InName;
	params.InFloat = InFloat;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAudioComponent::SetBoolParameter(const struct FName& InName, bool InBool) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AudioComponent.SetBoolParameter");
	UAudioComponent_SetBoolParameter_Params params;

	params.InName = InName;
	params.InBool = InBool;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAudioComponent::Play(float StartTime) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AudioComponent.Play");
	UAudioComponent_Play_Params params;

	params.StartTime = StartTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UAudioComponent::IsPlaying() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AudioComponent.IsPlaying");
	UAudioComponent_IsPlaying_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UAudioComponent::FadeOut(float FadeOutDuration, float FadeVolumeLevel) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AudioComponent.FadeOut");
	UAudioComponent_FadeOut_Params params;

	params.FadeOutDuration = FadeOutDuration;
	params.FadeVolumeLevel = FadeVolumeLevel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAudioComponent::FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AudioComponent.FadeIn");
	UAudioComponent_FadeIn_Params params;

	params.FadeInDuration = FadeInDuration;
	params.FadeVolumeLevel = FadeVolumeLevel;
	params.StartTime = StartTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UAudioComponent::BP_GetAttenuationSettingsToApply(struct FSoundAttenuationSettings* OutAttenuationSettings) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AudioComponent.BP_GetAttenuationSettingsToApply");
	UAudioComponent_BP_GetAttenuationSettingsToApply_Params params;

	params.OutAttenuationSettings = *OutAttenuationSettings;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UAudioComponent::AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AudioComponent.AdjustVolume");
	UAudioComponent_AdjustVolume_Params params;

	params.AdjustVolumeDuration = AdjustVolumeDuration;
	params.AdjustVolumeLevel = AdjustVolumeLevel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAudioComponent::AdjustAttenuation(const struct FSoundAttenuationSettings& InAttenuationSettings) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AudioComponent.AdjustAttenuation");
	UAudioComponent_AdjustAttenuation_Params params;

	params.InAttenuationSettings = InAttenuationSettings;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UMovementComponent::StopMovementImmediately() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MovementComponent.StopMovementImmediately");
	UMovementComponent_StopMovementImmediately_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UMovementComponent::SnapUpdatedComponentToPlane() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MovementComponent.SnapUpdatedComponentToPlane");
	UMovementComponent_SnapUpdatedComponentToPlane_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UMovementComponent::SetUpdatedComponent(class USceneComponent* NewUpdatedComponent) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MovementComponent.SetUpdatedComponent");
	UMovementComponent_SetUpdatedComponent_Params params;

	params.NewUpdatedComponent = NewUpdatedComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UMovementComponent::SetPlaneConstraintOrigin(const struct FVector& PlaneOrigin) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MovementComponent.SetPlaneConstraintOrigin");
	UMovementComponent_SetPlaneConstraintOrigin_Params params;

	params.PlaneOrigin = PlaneOrigin;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UMovementComponent::SetPlaneConstraintNormal(const struct FVector& PlaneNormal) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MovementComponent.SetPlaneConstraintNormal");
	UMovementComponent_SetPlaneConstraintNormal_Params params;

	params.PlaneNormal = PlaneNormal;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UMovementComponent::SetPlaneConstraintFromVectors(const struct FVector& Forward, const struct FVector& Up) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MovementComponent.SetPlaneConstraintFromVectors");
	UMovementComponent_SetPlaneConstraintFromVectors_Params params;

	params.Forward = Forward;
	params.Up = Up;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UMovementComponent::SetPlaneConstraintEnabled(bool bEnabled) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MovementComponent.SetPlaneConstraintEnabled");
	UMovementComponent_SetPlaneConstraintEnabled_Params params;

	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UMovementComponent::SetPlaneConstraintAxisSetting(EPlaneConstraintAxisSetting NewAxisSetting) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MovementComponent.SetPlaneConstraintAxisSetting");
	UMovementComponent_SetPlaneConstraintAxisSetting_Params params;

	params.NewAxisSetting = NewAxisSetting;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UMovementComponent::PhysicsVolumeChanged(class APhysicsVolume* NewVolume) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MovementComponent.PhysicsVolumeChanged");
	UMovementComponent_PhysicsVolumeChanged_Params params;

	params.NewVolume = NewVolume;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UMovementComponent::K2_MoveUpdatedComponent(const struct FVector& Delta, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* OutHit) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MovementComponent.K2_MoveUpdatedComponent");
	UMovementComponent_K2_MoveUpdatedComponent_Params params;

	params.Delta = Delta;
	params.NewRotation = NewRotation;
	params.bSweep = bSweep;
	params.bTeleport = bTeleport;
	params.OutHit = *OutHit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UMovementComponent::K2_GetModifiedMaxSpeed() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MovementComponent.K2_GetModifiedMaxSpeed");
	UMovementComponent_K2_GetModifiedMaxSpeed_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UMovementComponent::K2_GetMaxSpeedModifier() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MovementComponent.K2_GetMaxSpeedModifier");
	UMovementComponent_K2_GetMaxSpeedModifier_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UMovementComponent::IsExceedingMaxSpeed(float MaxSpeed) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MovementComponent.IsExceedingMaxSpeed");
	UMovementComponent_IsExceedingMaxSpeed_Params params;

	params.MaxSpeed = MaxSpeed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UMovementComponent::GetPlaneConstraintOrigin() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MovementComponent.GetPlaneConstraintOrigin");
	UMovementComponent_GetPlaneConstraintOrigin_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UMovementComponent::GetPlaneConstraintNormal() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MovementComponent.GetPlaneConstraintNormal");
	UMovementComponent_GetPlaneConstraintNormal_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

EPlaneConstraintAxisSetting UMovementComponent::GetPlaneConstraintAxisSetting() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MovementComponent.GetPlaneConstraintAxisSetting");
	UMovementComponent_GetPlaneConstraintAxisSetting_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class APhysicsVolume* UMovementComponent::GetPhysicsVolume() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MovementComponent.GetPhysicsVolume");
	UMovementComponent_GetPhysicsVolume_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UMovementComponent::GetMaxSpeed() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MovementComponent.GetMaxSpeed");
	UMovementComponent_GetMaxSpeed_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UMovementComponent::GetGravityZ() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MovementComponent.GetGravityZ");
	UMovementComponent_GetGravityZ_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UMovementComponent::ConstrainNormalToPlane(const struct FVector& Normal) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MovementComponent.ConstrainNormalToPlane");
	UMovementComponent_ConstrainNormalToPlane_Params params;

	params.Normal = Normal;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UMovementComponent::ConstrainLocationToPlane(const struct FVector& Location) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MovementComponent.ConstrainLocationToPlane");
	UMovementComponent_ConstrainLocationToPlane_Params params;

	params.Location = Location;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UMovementComponent::ConstrainDirectionToPlane(const struct FVector& Direction) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MovementComponent.ConstrainDirectionToPlane");
	UMovementComponent_ConstrainDirectionToPlane_Params params;

	params.Direction = Direction;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UNavMovementComponent::StopMovementKeepPathing() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.NavMovementComponent.StopMovementKeepPathing");
	UNavMovementComponent_StopMovementKeepPathing_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UNavMovementComponent::StopActiveMovement() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.NavMovementComponent.StopActiveMovement");
	UNavMovementComponent_StopActiveMovement_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UNavMovementComponent::IsSwimming() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.NavMovementComponent.IsSwimming");
	UNavMovementComponent_IsSwimming_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UNavMovementComponent::IsMovingOnGround() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.NavMovementComponent.IsMovingOnGround");
	UNavMovementComponent_IsMovingOnGround_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UNavMovementComponent::IsFlying() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.NavMovementComponent.IsFlying");
	UNavMovementComponent_IsFlying_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UNavMovementComponent::IsFalling() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.NavMovementComponent.IsFalling");
	UNavMovementComponent_IsFalling_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UNavMovementComponent::IsCrouching() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.NavMovementComponent.IsCrouching");
	UNavMovementComponent_IsCrouching_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UPawnMovementComponent::K2_GetInputVector() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PawnMovementComponent.K2_GetInputVector");
	UPawnMovementComponent_K2_GetInputVector_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UPawnMovementComponent::IsMoveInputIgnored() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PawnMovementComponent.IsMoveInputIgnored");
	UPawnMovementComponent_IsMoveInputIgnored_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UPawnMovementComponent::GetPendingInputVector() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PawnMovementComponent.GetPendingInputVector");
	UPawnMovementComponent_GetPendingInputVector_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class APawn* UPawnMovementComponent::GetPawnOwner() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PawnMovementComponent.GetPawnOwner");
	UPawnMovementComponent_GetPawnOwner_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UPawnMovementComponent::GetLastInputVector() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PawnMovementComponent.GetLastInputVector");
	UPawnMovementComponent_GetLastInputVector_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UPawnMovementComponent::ConsumeInputVector() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PawnMovementComponent.ConsumeInputVector");
	UPawnMovementComponent_ConsumeInputVector_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UPawnMovementComponent::AddInputVector(const struct FVector& WorldVector, bool bForce) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PawnMovementComponent.AddInputVector");
	UPawnMovementComponent_AddInputVector_Params params;

	params.WorldVector = WorldVector;
	params.bForce = bForce;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UChildActorComponent::SetChildActorClass(class UClass* InClass) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ChildActorComponent.SetChildActorClass");
	UChildActorComponent_SetChildActorClass_Params params;

	params.InClass = InClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UBoxComponent::SetBoxExtent(const struct FVector& InBoxExtent, bool bUpdateOverlaps) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.BoxComponent.SetBoxExtent");
	UBoxComponent_SetBoxExtent_Params params;

	params.InBoxExtent = InBoxExtent;
	params.bUpdateOverlaps = bUpdateOverlaps;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

struct FVector UBoxComponent::GetUnscaledBoxExtent() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.BoxComponent.GetUnscaledBoxExtent");
	UBoxComponent_GetUnscaledBoxExtent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UBoxComponent::GetScaledBoxExtent() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.BoxComponent.GetScaledBoxExtent");
	UBoxComponent_GetScaledBoxExtent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UStaticMeshComponent::SetStaticMesh(class UStaticMesh* NewMesh) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.StaticMeshComponent.SetStaticMesh");
	UStaticMeshComponent_SetStaticMesh_Params params;

	params.NewMesh = NewMesh;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UStaticMeshComponent::SetReverseCulling(bool ReverseCulling) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.StaticMeshComponent.SetReverseCulling");
	UStaticMeshComponent_SetReverseCulling_Params params;

	params.ReverseCulling = ReverseCulling;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UStaticMeshComponent::SetForcedLodModel(int NewForcedLodModel) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.StaticMeshComponent.SetForcedLodModel");
	UStaticMeshComponent_SetForcedLodModel_Params params;

	params.NewForcedLodModel = NewForcedLodModel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UStaticMeshComponent::SetDistanceFieldSelfShadowBias(float NewValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.StaticMeshComponent.SetDistanceFieldSelfShadowBias");
	UStaticMeshComponent_SetDistanceFieldSelfShadowBias_Params params;

	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UStaticMeshComponent::OnRep_StaticMesh(class UStaticMesh* OldStaticMesh) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.StaticMeshComponent.OnRep_StaticMesh");
	UStaticMeshComponent_OnRep_StaticMesh_Params params;

	params.OldStaticMesh = OldStaticMesh;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UStaticMeshComponent::GetLocalBounds(struct FVector* Min, struct FVector* Max) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.StaticMeshComponent.GetLocalBounds");
	UStaticMeshComponent_GetLocalBounds_Params params;

	params.Min = *Min;
	params.Max = *Max;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USphereComponent::SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SphereComponent.SetSphereRadius");
	USphereComponent_SetSphereRadius_Params params;

	params.InSphereRadius = InSphereRadius;
	params.bUpdateOverlaps = bUpdateOverlaps;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

float USphereComponent::GetUnscaledSphereRadius() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SphereComponent.GetUnscaledSphereRadius");
	USphereComponent_GetUnscaledSphereRadius_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float USphereComponent::GetShapeScale() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SphereComponent.GetShapeScale");
	USphereComponent_GetShapeScale_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float USphereComponent::GetScaledSphereRadius() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SphereComponent.GetScaledSphereRadius");
	USphereComponent_GetScaledSphereRadius_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UProjectileMovementComponent::StopSimulating(const struct FHitResult& HitResult) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ProjectileMovementComponent.StopSimulating");
	UProjectileMovementComponent_StopSimulating_Params params;

	params.HitResult = HitResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UProjectileMovementComponent::SetVelocityInLocalSpace(const struct FVector& NewVelocity) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ProjectileMovementComponent.SetVelocityInLocalSpace");
	UProjectileMovementComponent_SetVelocityInLocalSpace_Params params;

	params.NewVelocity = NewVelocity;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UProjectileMovementComponent::OnProjectileStopDelegate__DelegateSignature(const struct FHitResult& ImpactResult) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ProjectileMovementComponent.OnProjectileStopDelegate__DelegateSignature");
	UProjectileMovementComponent_OnProjectileStopDelegate__DelegateSignature_Params params;

	params.ImpactResult = ImpactResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UProjectileMovementComponent::OnProjectileBounceDelegate__DelegateSignature(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ProjectileMovementComponent.OnProjectileBounceDelegate__DelegateSignature");
	UProjectileMovementComponent_OnProjectileBounceDelegate__DelegateSignature_Params params;

	params.ImpactResult = ImpactResult;
	params.ImpactVelocity = ImpactVelocity;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

struct FVector UProjectileMovementComponent::LimitVelocity(const struct FVector& NewVelocity) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ProjectileMovementComponent.LimitVelocity");
	UProjectileMovementComponent_LimitVelocity_Params params;

	params.NewVelocity = NewVelocity;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void APlayerCameraManager::StopCameraShake(class UCameraShake* ShakeInstance, bool bImmediately) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerCameraManager.StopCameraShake");
	APlayerCameraManager_StopCameraShake_Params params;

	params.ShakeInstance = ShakeInstance;
	params.bImmediately = bImmediately;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerCameraManager::StopCameraFade() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerCameraManager.StopCameraFade");
	APlayerCameraManager_StopCameraFade_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerCameraManager::StopCameraAnimInst(class UCameraAnimInst* AnimInst, bool bImmediate) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerCameraManager.StopCameraAnimInst");
	APlayerCameraManager_StopCameraAnimInst_Params params;

	params.AnimInst = AnimInst;
	params.bImmediate = bImmediate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerCameraManager::StopAllInstancesOfCameraShake(class UClass* Shake, bool bImmediately) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerCameraManager.StopAllInstancesOfCameraShake");
	APlayerCameraManager_StopAllInstancesOfCameraShake_Params params;

	params.Shake = Shake;
	params.bImmediately = bImmediately;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerCameraManager::StopAllInstancesOfCameraAnim(class UCameraAnim* Anim, bool bImmediate) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerCameraManager.StopAllInstancesOfCameraAnim");
	APlayerCameraManager_StopAllInstancesOfCameraAnim_Params params;

	params.Anim = Anim;
	params.bImmediate = bImmediate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerCameraManager::StopAllCameraShakes(bool bImmediately) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerCameraManager.StopAllCameraShakes");
	APlayerCameraManager_StopAllCameraShakes_Params params;

	params.bImmediately = bImmediately;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerCameraManager::StopAllCameraAnims(bool bImmediate) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerCameraManager.StopAllCameraAnims");
	APlayerCameraManager_StopAllCameraAnims_Params params;

	params.bImmediate = bImmediate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerCameraManager::StartCameraFade(float FromAlpha, float ToAlpha, float Duration, const struct FLinearColor& Color, bool bShouldFadeAudio, bool bHoldWhenFinished) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerCameraManager.StartCameraFade");
	APlayerCameraManager_StartCameraFade_Params params;

	params.FromAlpha = FromAlpha;
	params.ToAlpha = ToAlpha;
	params.Duration = Duration;
	params.Color = Color;
	params.bShouldFadeAudio = bShouldFadeAudio;
	params.bHoldWhenFinished = bHoldWhenFinished;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerCameraManager::SetManualCameraFade(float InFadeAmount, const struct FLinearColor& Color, bool bInFadeAudio) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerCameraManager.SetManualCameraFade");
	APlayerCameraManager_SetManualCameraFade_Params params;

	params.InFadeAmount = InFadeAmount;
	params.Color = Color;
	params.bInFadeAudio = bInFadeAudio;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool APlayerCameraManager::RemoveCameraModifier(class UCameraModifier* ModifierToRemove) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerCameraManager.RemoveCameraModifier");
	APlayerCameraManager_RemoveCameraModifier_Params params;

	params.ModifierToRemove = ModifierToRemove;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void APlayerCameraManager::RemoveCameraLensEffect(class AEmitterCameraLensEffectBase* Emitter) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerCameraManager.RemoveCameraLensEffect");
	APlayerCameraManager_RemoveCameraLensEffect_Params params;

	params.Emitter = Emitter;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerCameraManager::PlayCameraShakeData(class UClass* ShakeClass, float Scale, TEnumAsByte<ECameraAnimPlaySpace> PlaySpace, const struct FRotator& UserPlaySpaceRot, bool bLoopingShake, struct FCameraShakeData* OutCameraShake) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerCameraManager.PlayCameraShakeData");
	APlayerCameraManager_PlayCameraShakeData_Params params;

	params.ShakeClass = ShakeClass;
	params.Scale = Scale;
	params.PlaySpace = PlaySpace;
	params.UserPlaySpaceRot = UserPlaySpaceRot;
	params.bLoopingShake = bLoopingShake;
	params.OutCameraShake = *OutCameraShake;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

class UCameraShake* APlayerCameraManager::PlayCameraShake(class UClass* ShakeClass, float Scale, TEnumAsByte<ECameraAnimPlaySpace> PlaySpace, const struct FRotator& UserPlaySpaceRot) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerCameraManager.PlayCameraShake");
	APlayerCameraManager_PlayCameraShake_Params params;

	params.ShakeClass = ShakeClass;
	params.Scale = Scale;
	params.PlaySpace = PlaySpace;
	params.UserPlaySpaceRot = UserPlaySpaceRot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UCameraAnimInst* APlayerCameraManager::PlayCameraAnim(class UCameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, TEnumAsByte<ECameraAnimPlaySpace> PlaySpace, const struct FRotator& UserPlaySpaceRot) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerCameraManager.PlayCameraAnim");
	APlayerCameraManager_PlayCameraAnim_Params params;

	params.Anim = Anim;
	params.Rate = Rate;
	params.Scale = Scale;
	params.BlendInTime = BlendInTime;
	params.BlendOutTime = BlendOutTime;
	params.bLoop = bLoop;
	params.bRandomStartTime = bRandomStartTime;
	params.Duration = Duration;
	params.PlaySpace = PlaySpace;
	params.UserPlaySpaceRot = UserPlaySpaceRot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void APlayerCameraManager::PhotographyCameraModify(const struct FVector& NewCameraLocation, const struct FVector& PreviousCameraLocation, const struct FVector& OriginalCameraLocation, struct FVector* ResultCameraLocation) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerCameraManager.PhotographyCameraModify");
	APlayerCameraManager_PhotographyCameraModify_Params params;

	params.NewCameraLocation = NewCameraLocation;
	params.PreviousCameraLocation = PreviousCameraLocation;
	params.OriginalCameraLocation = OriginalCameraLocation;
	params.ResultCameraLocation = *ResultCameraLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerCameraManager::OnPhotographySessionStart() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerCameraManager.OnPhotographySessionStart");
	APlayerCameraManager_OnPhotographySessionStart_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerCameraManager::OnPhotographySessionEnd() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerCameraManager.OnPhotographySessionEnd");
	APlayerCameraManager_OnPhotographySessionEnd_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerCameraManager::OnPhotographyMultiPartCaptureStart() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerCameraManager.OnPhotographyMultiPartCaptureStart");
	APlayerCameraManager_OnPhotographyMultiPartCaptureStart_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerCameraManager::OnPhotographyMultiPartCaptureEnd() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerCameraManager.OnPhotographyMultiPartCaptureEnd");
	APlayerCameraManager_OnPhotographyMultiPartCaptureEnd_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

class APlayerController* APlayerCameraManager::GetOwningPlayerController() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerCameraManager.GetOwningPlayerController");
	APlayerCameraManager_GetOwningPlayerController_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float APlayerCameraManager::GetFOVAngle() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerCameraManager.GetFOVAngle");
	APlayerCameraManager_GetFOVAngle_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float APlayerCameraManager::GetForegroundFOVAngle() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerCameraManager.GetForegroundFOVAngle");
	APlayerCameraManager_GetForegroundFOVAngle_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FRotator APlayerCameraManager::GetCameraRotation() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerCameraManager.GetCameraRotation");
	APlayerCameraManager_GetCameraRotation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector APlayerCameraManager::GetCameraLocation() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerCameraManager.GetCameraLocation");
	APlayerCameraManager_GetCameraLocation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UCameraModifier* APlayerCameraManager::FindCameraModifierByClass(class UClass* ModifierClass) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerCameraManager.FindCameraModifierByClass");
	APlayerCameraManager_FindCameraModifierByClass_Params params;

	params.ModifierClass = ModifierClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void APlayerCameraManager::ClearCameraLensEffects() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerCameraManager.ClearCameraLensEffects");
	APlayerCameraManager_ClearCameraLensEffects_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool APlayerCameraManager::BlueprintUpdateCamera(class AActor* CameraTarget, struct FVector* NewCameraLocation, struct FRotator* NewCameraRotation, float* NewCameraFOV) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerCameraManager.BlueprintUpdateCamera");
	APlayerCameraManager_BlueprintUpdateCamera_Params params;

	params.CameraTarget = CameraTarget;
	params.NewCameraLocation = *NewCameraLocation;
	params.NewCameraRotation = *NewCameraRotation;
	params.NewCameraFOV = *NewCameraFOV;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UCameraModifier* APlayerCameraManager::AddNewCameraModifier(class UClass* ModifierClass) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerCameraManager.AddNewCameraModifier");
	APlayerCameraManager_AddNewCameraModifier_Params params;

	params.ModifierClass = ModifierClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class AEmitterCameraLensEffectBase* APlayerCameraManager::AddCameraLensEffect(class UClass* LensEffectEmitterClass) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerCameraManager.AddCameraLensEffect");
	APlayerCameraManager_AddCameraLensEffect_Params params;

	params.LensEffectEmitterClass = LensEffectEmitterClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void AGameModeBase::StartPlay() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameModeBase.StartPlay");
	AGameModeBase_StartPlay_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

class APawn* AGameModeBase::SpawnDefaultPawnFor(class AController* NewPlayer, class AActor* StartSpot) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameModeBase.SpawnDefaultPawnFor");
	AGameModeBase_SpawnDefaultPawnFor_Params params;

	params.NewPlayer = NewPlayer;
	params.StartSpot = StartSpot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class APawn* AGameModeBase::SpawnDefaultPawnAtTransform(class AController* NewPlayer, const struct FTransform& SpawnTransform) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameModeBase.SpawnDefaultPawnAtTransform");
	AGameModeBase_SpawnDefaultPawnAtTransform_Params params;

	params.NewPlayer = NewPlayer;
	params.SpawnTransform = SpawnTransform;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool AGameModeBase::ShouldReset(class AActor* ActorToReset) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameModeBase.ShouldReset");
	AGameModeBase_ShouldReset_Params params;

	params.ActorToReset = ActorToReset;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void AGameModeBase::ReturnToMainMenuHost() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameModeBase.ReturnToMainMenuHost");
	AGameModeBase_ReturnToMainMenuHost_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AGameModeBase::RestartPlayerAtTransform(class AController* NewPlayer, const struct FTransform& SpawnTransform) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameModeBase.RestartPlayerAtTransform");
	AGameModeBase_RestartPlayerAtTransform_Params params;

	params.NewPlayer = NewPlayer;
	params.SpawnTransform = SpawnTransform;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AGameModeBase::RestartPlayerAtPlayerStart(class AController* NewPlayer, class AActor* StartSpot) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameModeBase.RestartPlayerAtPlayerStart");
	AGameModeBase_RestartPlayerAtPlayerStart_Params params;

	params.NewPlayer = NewPlayer;
	params.StartSpot = StartSpot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AGameModeBase::RestartPlayer(class AController* NewPlayer) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameModeBase.RestartPlayer");
	AGameModeBase_RestartPlayer_Params params;

	params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AGameModeBase::ResetLevel() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameModeBase.ResetLevel");
	AGameModeBase_ResetLevel_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool AGameModeBase::PlayerCanRestart(class APlayerController* Player) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameModeBase.PlayerCanRestart");
	AGameModeBase_PlayerCanRestart_Params params;

	params.Player = Player;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool AGameModeBase::MustSpectate(class APlayerController* NewPlayerController) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameModeBase.MustSpectate");
	AGameModeBase_MustSpectate_Params params;

	params.NewPlayerController = NewPlayerController;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void AGameModeBase::K2_PostLogin(class APlayerController* NewPlayer) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameModeBase.K2_PostLogin");
	AGameModeBase_K2_PostLogin_Params params;

	params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AGameModeBase::K2_OnSwapPlayerControllers(class APlayerController* OldPC, class APlayerController* NewPC) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameModeBase.K2_OnSwapPlayerControllers");
	AGameModeBase_K2_OnSwapPlayerControllers_Params params;

	params.OldPC = OldPC;
	params.NewPC = NewPC;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AGameModeBase::K2_OnRestartPlayer(class AController* NewPlayer) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameModeBase.K2_OnRestartPlayer");
	AGameModeBase_K2_OnRestartPlayer_Params params;

	params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AGameModeBase::K2_OnLogout(class AController* ExitingController) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameModeBase.K2_OnLogout");
	AGameModeBase_K2_OnLogout_Params params;

	params.ExitingController = ExitingController;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AGameModeBase::K2_OnChangeName(class AController* Other, const class FString& NewName, bool bNameChange) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameModeBase.K2_OnChangeName");
	AGameModeBase_K2_OnChangeName_Params params;

	params.Other = Other;
	params.NewName = NewName;
	params.bNameChange = bNameChange;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

class AActor* AGameModeBase::K2_FindPlayerStart(class AController* Player, const class FString& IncomingName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameModeBase.K2_FindPlayerStart");
	AGameModeBase_K2_FindPlayerStart_Params params;

	params.Player = Player;
	params.IncomingName = IncomingName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void AGameModeBase::InitStartSpot(class AActor* StartSpot, class AController* NewPlayer) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameModeBase.InitStartSpot");
	AGameModeBase_InitStartSpot_Params params;

	params.StartSpot = StartSpot;
	params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AGameModeBase::InitializeHUDForPlayer(class APlayerController* NewPlayer) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameModeBase.InitializeHUDForPlayer");
	AGameModeBase_InitializeHUDForPlayer_Params params;

	params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool AGameModeBase::HasMatchStarted() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameModeBase.HasMatchStarted");
	AGameModeBase_HasMatchStarted_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void AGameModeBase::HandleStartingNewPlayer(class APlayerController* NewPlayer) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameModeBase.HandleStartingNewPlayer");
	AGameModeBase_HandleStartingNewPlayer_Params params;

	params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

int AGameModeBase::GetNumSpectators() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameModeBase.GetNumSpectators");
	AGameModeBase_GetNumSpectators_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int AGameModeBase::GetNumPlayers() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameModeBase.GetNumPlayers");
	AGameModeBase_GetNumPlayers_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UClass* AGameModeBase::GetDefaultPawnClassForController(class AController* InController) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameModeBase.GetDefaultPawnClassForController");
	AGameModeBase_GetDefaultPawnClassForController_Params params;

	params.InController = InController;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class AActor* AGameModeBase::FindPlayerStart(class AController* Player, const class FString& IncomingName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameModeBase.FindPlayerStart");
	AGameModeBase_FindPlayerStart_Params params;

	params.Player = Player;
	params.IncomingName = IncomingName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class AActor* AGameModeBase::ChoosePlayerStart(class AController* Player) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameModeBase.ChoosePlayerStart");
	AGameModeBase_ChoosePlayerStart_Params params;

	params.Player = Player;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void AGameModeBase::ChangeName(class AController* Controller, const class FString& NewName, bool bNameChange) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameModeBase.ChangeName");
	AGameModeBase_ChangeName_Params params;

	params.Controller = Controller;
	params.NewName = NewName;
	params.bNameChange = bNameChange;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool AGameModeBase::CanSpectate(class APlayerController* Viewer, class APlayerState* ViewTarget) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameModeBase.CanSpectate");
	AGameModeBase_CanSpectate_Params params;

	params.Viewer = Viewer;
	params.ViewTarget = ViewTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void AGameMode::StartMatch() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameMode.StartMatch");
	AGameMode_StartMatch_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AGameMode::SetBandwidthLimit(float AsyncIOBandwidthLimit) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameMode.SetBandwidthLimit");
	AGameMode_SetBandwidthLimit_Params params;

	params.AsyncIOBandwidthLimit = AsyncIOBandwidthLimit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AGameMode::Say(const class FString& Msg) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameMode.Say");
	AGameMode_Say_Params params;

	params.Msg = Msg;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AGameMode::RestartGame() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameMode.RestartGame");
	AGameMode_RestartGame_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool AGameMode::ReadyToStartMatch() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameMode.ReadyToStartMatch");
	AGameMode_ReadyToStartMatch_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool AGameMode::ReadyToEndMatch() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameMode.ReadyToEndMatch");
	AGameMode_ReadyToEndMatch_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void AGameMode::K2_OnSetMatchState(const struct FName& NewState) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameMode.K2_OnSetMatchState");
	AGameMode_K2_OnSetMatchState_Params params;

	params.NewState = NewState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool AGameMode::IsMatchInProgress() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameMode.IsMatchInProgress");
	AGameMode_IsMatchInProgress_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool AGameMode::HasMatchEnded() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameMode.HasMatchEnded");
	AGameMode_HasMatchEnded_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FName AGameMode::GetMatchState() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameMode.GetMatchState");
	AGameMode_GetMatchState_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void AGameMode::EndMatch() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameMode.EndMatch");
	AGameMode_EndMatch_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AGameMode::AbortMatch() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameMode.AbortMatch");
	AGameMode_AbortMatch_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerState::ReceiveOverrideWith(class APlayerState* OldPlayerState) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerState.ReceiveOverrideWith");
	APlayerState_ReceiveOverrideWith_Params params;

	params.OldPlayerState = OldPlayerState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerState::ReceiveCopyProperties(class APlayerState* NewPlayerState) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerState.ReceiveCopyProperties");
	APlayerState_ReceiveCopyProperties_Params params;

	params.NewPlayerState = NewPlayerState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerState::OnRep_UniqueId() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerState.OnRep_UniqueId");
	APlayerState_OnRep_UniqueId_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerState::OnRep_Score() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerState.OnRep_Score");
	APlayerState_OnRep_Score_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerState::OnRep_PlayerName() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerState.OnRep_PlayerName");
	APlayerState_OnRep_PlayerName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerState::OnRep_PlayerId() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerState.OnRep_PlayerId");
	APlayerState_OnRep_PlayerId_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerState::OnRep_ParentPlayerId() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerState.OnRep_ParentPlayerId");
	APlayerState_OnRep_ParentPlayerId_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APlayerState::OnRep_bIsInactive() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerState.OnRep_bIsInactive");
	APlayerState_OnRep_bIsInactive_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

class FString APlayerState::GetPlayerName() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlayerState.GetPlayerName");
	APlayerState_GetPlayerName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UCapsuleComponent::SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CapsuleComponent.SetCapsuleSize");
	UCapsuleComponent_SetCapsuleSize_Params params;

	params.InRadius = InRadius;
	params.InHalfHeight = InHalfHeight;
	params.bUpdateOverlaps = bUpdateOverlaps;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCapsuleComponent::SetCapsuleRadius(float Radius, bool bUpdateOverlaps) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CapsuleComponent.SetCapsuleRadius");
	UCapsuleComponent_SetCapsuleRadius_Params params;

	params.Radius = Radius;
	params.bUpdateOverlaps = bUpdateOverlaps;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCapsuleComponent::SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CapsuleComponent.SetCapsuleHalfHeight");
	UCapsuleComponent_SetCapsuleHalfHeight_Params params;

	params.HalfHeight = HalfHeight;
	params.bUpdateOverlaps = bUpdateOverlaps;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCapsuleComponent::GetUnscaledCapsuleSize_WithoutHemisphere(float* OutRadius, float* OutHalfHeightWithoutHemisphere) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CapsuleComponent.GetUnscaledCapsuleSize_WithoutHemisphere");
	UCapsuleComponent_GetUnscaledCapsuleSize_WithoutHemisphere_Params params;

	params.OutRadius = *OutRadius;
	params.OutHalfHeightWithoutHemisphere = *OutHalfHeightWithoutHemisphere;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCapsuleComponent::GetUnscaledCapsuleSize(float* OutRadius, float* OutHalfHeight) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CapsuleComponent.GetUnscaledCapsuleSize");
	UCapsuleComponent_GetUnscaledCapsuleSize_Params params;

	params.OutRadius = *OutRadius;
	params.OutHalfHeight = *OutHalfHeight;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

float UCapsuleComponent::GetUnscaledCapsuleRadius() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CapsuleComponent.GetUnscaledCapsuleRadius");
	UCapsuleComponent_GetUnscaledCapsuleRadius_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UCapsuleComponent::GetUnscaledCapsuleHalfHeight_WithoutHemisphere() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight_WithoutHemisphere");
	UCapsuleComponent_GetUnscaledCapsuleHalfHeight_WithoutHemisphere_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UCapsuleComponent::GetUnscaledCapsuleHalfHeight() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight");
	UCapsuleComponent_GetUnscaledCapsuleHalfHeight_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UCapsuleComponent::GetShapeScale() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CapsuleComponent.GetShapeScale");
	UCapsuleComponent_GetShapeScale_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UCapsuleComponent::GetScaledCapsuleSize_WithoutHemisphere(float* OutRadius, float* OutHalfHeightWithoutHemisphere) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CapsuleComponent.GetScaledCapsuleSize_WithoutHemisphere");
	UCapsuleComponent_GetScaledCapsuleSize_WithoutHemisphere_Params params;

	params.OutRadius = *OutRadius;
	params.OutHalfHeightWithoutHemisphere = *OutHalfHeightWithoutHemisphere;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCapsuleComponent::GetScaledCapsuleSize(float* OutRadius, float* OutHalfHeight) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CapsuleComponent.GetScaledCapsuleSize");
	UCapsuleComponent_GetScaledCapsuleSize_Params params;

	params.OutRadius = *OutRadius;
	params.OutHalfHeight = *OutHalfHeight;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

float UCapsuleComponent::GetScaledCapsuleRadius() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CapsuleComponent.GetScaledCapsuleRadius");
	UCapsuleComponent_GetScaledCapsuleRadius_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UCapsuleComponent::GetScaledCapsuleHalfHeight_WithoutHemisphere() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CapsuleComponent.GetScaledCapsuleHalfHeight_WithoutHemisphere");
	UCapsuleComponent_GetScaledCapsuleHalfHeight_WithoutHemisphere_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UCapsuleComponent::GetScaledCapsuleHalfHeight() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CapsuleComponent.GetScaledCapsuleHalfHeight");
	UCapsuleComponent_GetScaledCapsuleHalfHeight_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UCharacterMovementComponent::SetWalkableFloorZ(float InWalkableFloorZ) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CharacterMovementComponent.SetWalkableFloorZ");
	UCharacterMovementComponent_SetWalkableFloorZ_Params params;

	params.InWalkableFloorZ = InWalkableFloorZ;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCharacterMovementComponent::SetWalkableFloorAngle(float InWalkableFloorAngle) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CharacterMovementComponent.SetWalkableFloorAngle");
	UCharacterMovementComponent_SetWalkableFloorAngle_Params params;

	params.InWalkableFloorAngle = InWalkableFloorAngle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCharacterMovementComponent::SetNavWalkingPhysics(bool bEnable) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CharacterMovementComponent.SetNavWalkingPhysics");
	UCharacterMovementComponent_SetNavWalkingPhysics_Params params;

	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCharacterMovementComponent::SetMovementMode(TEnumAsByte<EMovementMode> NewMovementMode, unsigned char NewCustomMode) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CharacterMovementComponent.SetMovementMode");
	UCharacterMovementComponent_SetMovementMode_Params params;

	params.NewMovementMode = NewMovementMode;
	params.NewCustomMode = NewCustomMode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCharacterMovementComponent::SetGroupsToIgnoreMask(const struct FNavAvoidanceMask& GroupMask) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CharacterMovementComponent.SetGroupsToIgnoreMask");
	UCharacterMovementComponent_SetGroupsToIgnoreMask_Params params;

	params.GroupMask = GroupMask;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCharacterMovementComponent::SetGroupsToIgnore(int GroupFlags) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CharacterMovementComponent.SetGroupsToIgnore");
	UCharacterMovementComponent_SetGroupsToIgnore_Params params;

	params.GroupFlags = GroupFlags;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCharacterMovementComponent::SetGroupsToAvoidMask(const struct FNavAvoidanceMask& GroupMask) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CharacterMovementComponent.SetGroupsToAvoidMask");
	UCharacterMovementComponent_SetGroupsToAvoidMask_Params params;

	params.GroupMask = GroupMask;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCharacterMovementComponent::SetGroupsToAvoid(int GroupFlags) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CharacterMovementComponent.SetGroupsToAvoid");
	UCharacterMovementComponent_SetGroupsToAvoid_Params params;

	params.GroupFlags = GroupFlags;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCharacterMovementComponent::SetAvoidanceGroupMask(const struct FNavAvoidanceMask& GroupMask) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CharacterMovementComponent.SetAvoidanceGroupMask");
	UCharacterMovementComponent_SetAvoidanceGroupMask_Params params;

	params.GroupMask = GroupMask;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCharacterMovementComponent::SetAvoidanceGroup(int GroupFlags) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CharacterMovementComponent.SetAvoidanceGroup");
	UCharacterMovementComponent_SetAvoidanceGroup_Params params;

	params.GroupFlags = GroupFlags;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCharacterMovementComponent::SetAvoidanceEnabled(bool bEnable) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CharacterMovementComponent.SetAvoidanceEnabled");
	UCharacterMovementComponent_SetAvoidanceEnabled_Params params;

	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

float UCharacterMovementComponent::K2_GetWalkableFloorZ() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CharacterMovementComponent.K2_GetWalkableFloorZ");
	UCharacterMovementComponent_K2_GetWalkableFloorZ_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UCharacterMovementComponent::K2_GetWalkableFloorAngle() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CharacterMovementComponent.K2_GetWalkableFloorAngle");
	UCharacterMovementComponent_K2_GetWalkableFloorAngle_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UCharacterMovementComponent::K2_GetModifiedMaxAcceleration() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CharacterMovementComponent.K2_GetModifiedMaxAcceleration");
	UCharacterMovementComponent_K2_GetModifiedMaxAcceleration_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UCharacterMovementComponent::K2_FindFloor(const struct FVector& CapsuleLocation, struct FFindFloorResult* FloorResult) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CharacterMovementComponent.K2_FindFloor");
	UCharacterMovementComponent_K2_FindFloor_Params params;

	params.CapsuleLocation = CapsuleLocation;
	params.FloorResult = *FloorResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCharacterMovementComponent::K2_ComputeFloorDist(const struct FVector& CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, struct FFindFloorResult* FloorResult) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CharacterMovementComponent.K2_ComputeFloorDist");
	UCharacterMovementComponent_K2_ComputeFloorDist_Params params;

	params.CapsuleLocation = CapsuleLocation;
	params.LineDistance = LineDistance;
	params.SweepDistance = SweepDistance;
	params.SweepRadius = SweepRadius;
	params.FloorResult = *FloorResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UCharacterMovementComponent::IsWalking() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CharacterMovementComponent.IsWalking");
	UCharacterMovementComponent_IsWalking_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UCharacterMovementComponent::IsWalkable(const struct FHitResult& Hit) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CharacterMovementComponent.IsWalkable");
	UCharacterMovementComponent_IsWalkable_Params params;

	params.Hit = Hit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UCharacterMovementComponent::GetValidPerchRadius() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CharacterMovementComponent.GetValidPerchRadius");
	UCharacterMovementComponent_GetValidPerchRadius_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UCharacterMovementComponent::GetPerchRadiusThreshold() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CharacterMovementComponent.GetPerchRadiusThreshold");
	UCharacterMovementComponent_GetPerchRadiusThreshold_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UPrimitiveComponent* UCharacterMovementComponent::GetMovementBase() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CharacterMovementComponent.GetMovementBase");
	UCharacterMovementComponent_GetMovementBase_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UCharacterMovementComponent::GetMinAnalogSpeed() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CharacterMovementComponent.GetMinAnalogSpeed");
	UCharacterMovementComponent_GetMinAnalogSpeed_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UCharacterMovementComponent::GetMaxJumpHeightWithJumpTime() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CharacterMovementComponent.GetMaxJumpHeightWithJumpTime");
	UCharacterMovementComponent_GetMaxJumpHeightWithJumpTime_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UCharacterMovementComponent::GetMaxJumpHeight() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CharacterMovementComponent.GetMaxJumpHeight");
	UCharacterMovementComponent_GetMaxJumpHeight_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UCharacterMovementComponent::GetMaxBrakingDeceleration() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CharacterMovementComponent.GetMaxBrakingDeceleration");
	UCharacterMovementComponent_GetMaxBrakingDeceleration_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UCharacterMovementComponent::GetMaxAcceleration() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CharacterMovementComponent.GetMaxAcceleration");
	UCharacterMovementComponent_GetMaxAcceleration_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UCharacterMovementComponent::GetImpartedMovementBaseVelocity() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CharacterMovementComponent.GetImpartedMovementBaseVelocity");
	UCharacterMovementComponent_GetImpartedMovementBaseVelocity_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UCharacterMovementComponent::GetCurrentAcceleration() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CharacterMovementComponent.GetCurrentAcceleration");
	UCharacterMovementComponent_GetCurrentAcceleration_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class ACharacter* UCharacterMovementComponent::GetCharacterOwner() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CharacterMovementComponent.GetCharacterOwner");
	UCharacterMovementComponent_GetCharacterOwner_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UCharacterMovementComponent::GetAnalogInputModifier() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CharacterMovementComponent.GetAnalogInputModifier");
	UCharacterMovementComponent_GetAnalogInputModifier_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UCharacterMovementComponent::DisableMovement() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CharacterMovementComponent.DisableMovement");
	UCharacterMovementComponent_DisableMovement_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCharacterMovementComponent::ClearAccumulatedForces() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CharacterMovementComponent.ClearAccumulatedForces");
	UCharacterMovementComponent_ClearAccumulatedForces_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCharacterMovementComponent::CapsuleTouched(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CharacterMovementComponent.CapsuleTouched");
	UCharacterMovementComponent_CapsuleTouched_Params params;

	params.OverlappedComp = OverlappedComp;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.OtherBodyIndex = OtherBodyIndex;
	params.bFromSweep = bFromSweep;
	params.SweepResult = SweepResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCharacterMovementComponent::CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CharacterMovementComponent.CalcVelocity");
	UCharacterMovementComponent_CalcVelocity_Params params;

	params.DeltaTime = DeltaTime;
	params.Friction = Friction;
	params.bFluid = bFluid;
	params.BrakingDeceleration = BrakingDeceleration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCharacterMovementComponent::AddImpulse(const struct FVector& Impulse, bool bVelocityChange) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CharacterMovementComponent.AddImpulse");
	UCharacterMovementComponent_AddImpulse_Params params;

	params.Impulse = Impulse;
	params.bVelocityChange = bVelocityChange;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCharacterMovementComponent::AddForce(const struct FVector& Force) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CharacterMovementComponent.AddForce");
	UCharacterMovementComponent_AddForce_Params params;

	params.Force = Force;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCheatManager::Walk() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CheatManager.Walk");
	UCheatManager_Walk_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCheatManager::ViewSelf() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CheatManager.ViewSelf");
	UCheatManager_ViewSelf_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCheatManager::ViewPlayer(const class FString& S) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CheatManager.ViewPlayer");
	UCheatManager_ViewPlayer_Params params;

	params.S = S;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCheatManager::ViewClass(class UClass* DesiredClass) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CheatManager.ViewClass");
	UCheatManager_ViewClass_Params params;

	params.DesiredClass = DesiredClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCheatManager::ViewActor(const struct FName& ActorName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CheatManager.ViewActor");
	UCheatManager_ViewActor_Params params;

	params.ActorName = ActorName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCheatManager::UpdateSafeArea() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CheatManager.UpdateSafeArea");
	UCheatManager_UpdateSafeArea_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCheatManager::ToggleServerStatReplicatorUpdateStatNet() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CheatManager.ToggleServerStatReplicatorUpdateStatNet");
	UCheatManager_ToggleServerStatReplicatorUpdateStatNet_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCheatManager::ToggleServerStatReplicatorClientOverwrite() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CheatManager.ToggleServerStatReplicatorClientOverwrite");
	UCheatManager_ToggleServerStatReplicatorClientOverwrite_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCheatManager::ToggleDebugCamera() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CheatManager.ToggleDebugCamera");
	UCheatManager_ToggleDebugCamera_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCheatManager::ToggleAILogging() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CheatManager.ToggleAILogging");
	UCheatManager_ToggleAILogging_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCheatManager::TestCollisionDistance() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CheatManager.TestCollisionDistance");
	UCheatManager_TestCollisionDistance_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCheatManager::Teleport() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CheatManager.Teleport");
	UCheatManager_Teleport_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCheatManager::Summon(const class FString& ClassName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CheatManager.Summon");
	UCheatManager_Summon_Params params;

	params.ClassName = ClassName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCheatManager::StreamLevelOut(const struct FName& PackageName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CheatManager.StreamLevelOut");
	UCheatManager_StreamLevelOut_Params params;

	params.PackageName = PackageName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCheatManager::StreamLevelIn(const struct FName& PackageName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CheatManager.StreamLevelIn");
	UCheatManager_StreamLevelIn_Params params;

	params.PackageName = PackageName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCheatManager::SpawnServerStatReplicator() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CheatManager.SpawnServerStatReplicator");
	UCheatManager_SpawnServerStatReplicator_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCheatManager::Slomo(float NewTimeDilation) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CheatManager.Slomo");
	UCheatManager_Slomo_Params params;

	params.NewTimeDilation = NewTimeDilation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCheatManager::SetWorldOrigin() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CheatManager.SetWorldOrigin");
	UCheatManager_SetWorldOrigin_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCheatManager::SetMouseSensitivityToDefault() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CheatManager.SetMouseSensitivityToDefault");
	UCheatManager_SetMouseSensitivityToDefault_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCheatManager::ServerToggleAILogging() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CheatManager.ServerToggleAILogging");
	UCheatManager_ServerToggleAILogging_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCheatManager::ReceiveInitCheatManager() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CheatManager.ReceiveInitCheatManager");
	UCheatManager_ReceiveInitCheatManager_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCheatManager::ReceiveEndPlay() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CheatManager.ReceiveEndPlay");
	UCheatManager_ReceiveEndPlay_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCheatManager::PlayersOnly() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CheatManager.PlayersOnly");
	UCheatManager_PlayersOnly_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCheatManager::OnlyLoadLevel(const struct FName& PackageName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CheatManager.OnlyLoadLevel");
	UCheatManager_OnlyLoadLevel_Params params;

	params.PackageName = PackageName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCheatManager::LogLoc() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CheatManager.LogLoc");
	UCheatManager_LogLoc_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCheatManager::InvertMouse() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CheatManager.InvertMouse");
	UCheatManager_InvertMouse_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCheatManager::FreezeFrame(float Delay) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CheatManager.FreezeFrame");
	UCheatManager_FreezeFrame_Params params;

	params.Delay = Delay;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCheatManager::Fly() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CheatManager.Fly");
	UCheatManager_Fly_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCheatManager::FlushLog() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CheatManager.FlushLog");
	UCheatManager_FlushLog_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCheatManager::EnableDebugCamera() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CheatManager.EnableDebugCamera");
	UCheatManager_EnableDebugCamera_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCheatManager::DumpVoiceMutingState() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CheatManager.DumpVoiceMutingState");
	UCheatManager_DumpVoiceMutingState_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCheatManager::DumpPartyState() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CheatManager.DumpPartyState");
	UCheatManager_DumpPartyState_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCheatManager::DumpOnlineSessionState() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CheatManager.DumpOnlineSessionState");
	UCheatManager_DumpOnlineSessionState_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCheatManager::DumpChatState() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CheatManager.DumpChatState");
	UCheatManager_DumpChatState_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCheatManager::DisableDebugCamera() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CheatManager.DisableDebugCamera");
	UCheatManager_DisableDebugCamera_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCheatManager::DestroyTarget() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CheatManager.DestroyTarget");
	UCheatManager_DestroyTarget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCheatManager::DestroyServerStatReplicator() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CheatManager.DestroyServerStatReplicator");
	UCheatManager_DestroyServerStatReplicator_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCheatManager::DestroyPawns(class UClass* aClass) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CheatManager.DestroyPawns");
	UCheatManager_DestroyPawns_Params params;

	params.aClass = aClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCheatManager::DestroyAllPawnsExceptTarget() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CheatManager.DestroyAllPawnsExceptTarget");
	UCheatManager_DestroyAllPawnsExceptTarget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCheatManager::DestroyAll(class UClass* aClass) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CheatManager.DestroyAll");
	UCheatManager_DestroyAll_Params params;

	params.aClass = aClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCheatManager::DebugCapsuleSweepSize(float HalfHeight, float Radius) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CheatManager.DebugCapsuleSweepSize");
	UCheatManager_DebugCapsuleSweepSize_Params params;

	params.HalfHeight = HalfHeight;
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCheatManager::DebugCapsuleSweepPawn() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CheatManager.DebugCapsuleSweepPawn");
	UCheatManager_DebugCapsuleSweepPawn_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCheatManager::DebugCapsuleSweepComplex(bool bTraceComplex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CheatManager.DebugCapsuleSweepComplex");
	UCheatManager_DebugCapsuleSweepComplex_Params params;

	params.bTraceComplex = bTraceComplex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCheatManager::DebugCapsuleSweepClear() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CheatManager.DebugCapsuleSweepClear");
	UCheatManager_DebugCapsuleSweepClear_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCheatManager::DebugCapsuleSweepChannel(TEnumAsByte<ECollisionChannel> Channel) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CheatManager.DebugCapsuleSweepChannel");
	UCheatManager_DebugCapsuleSweepChannel_Params params;

	params.Channel = Channel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCheatManager::DebugCapsuleSweepCapture() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CheatManager.DebugCapsuleSweepCapture");
	UCheatManager_DebugCapsuleSweepCapture_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCheatManager::DebugCapsuleSweep() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CheatManager.DebugCapsuleSweep");
	UCheatManager_DebugCapsuleSweep_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCheatManager::DamageTarget(float DamageAmount) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CheatManager.DamageTarget");
	UCheatManager_DamageTarget_Params params;

	params.DamageAmount = DamageAmount;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCheatManager::CheatScript(const class FString& ScriptName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CheatManager.CheatScript");
	UCheatManager_CheatScript_Params params;

	params.ScriptName = ScriptName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCheatManager::ChangeSize(float F) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CheatManager.ChangeSize");
	UCheatManager_ChangeSize_Params params;

	params.F = F;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCheatManager::BugItStringCreator(const struct FVector& ViewLocation, const struct FRotator& ViewRotation, class FString* GoString, class FString* LocString) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CheatManager.BugItStringCreator");
	UCheatManager_BugItStringCreator_Params params;

	params.ViewLocation = ViewLocation;
	params.ViewRotation = ViewRotation;
	params.GoString = *GoString;
	params.LocString = *LocString;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCheatManager::BugIt(const class FString& ScreenShotDescription) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CheatManager.BugIt");
	UCheatManager_BugIt_Params params;

	params.ScreenShotDescription = ScreenShotDescription;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameInstance::ReceiveShutdown() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameInstance.ReceiveShutdown");
	UGameInstance_ReceiveShutdown_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameInstance::ReceiveInit() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameInstance.ReceiveInit");
	UGameInstance_ReceiveInit_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameInstance::HandleTravelError(TEnumAsByte<ETravelFailure> FailureType) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameInstance.HandleTravelError");
	UGameInstance_HandleTravelError_Params params;

	params.FailureType = FailureType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameInstance::HandleNetworkError(TEnumAsByte<ENetworkFailure> FailureType, bool bIsServer) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameInstance.HandleNetworkError");
	UGameInstance_HandleNetworkError_Params params;

	params.FailureType = FailureType;
	params.bIsServer = bIsServer;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameInstance::DebugRemovePlayer(int ControllerId) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameInstance.DebugRemovePlayer");
	UGameInstance_DebugRemovePlayer_Params params;

	params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameInstance::DebugCreatePlayer(int ControllerId) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameInstance.DebugCreatePlayer");
	UGameInstance_DebugCreatePlayer_Params params;

	params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AGameStateBase::OnRep_SpectatorClass() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameStateBase.OnRep_SpectatorClass");
	AGameStateBase_OnRep_SpectatorClass_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AGameStateBase::OnRep_ReplicatedWorldTimeSeconds() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameStateBase.OnRep_ReplicatedWorldTimeSeconds");
	AGameStateBase_OnRep_ReplicatedWorldTimeSeconds_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AGameStateBase::OnRep_ReplicatedHasBegunPlay() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameStateBase.OnRep_ReplicatedHasBegunPlay");
	AGameStateBase_OnRep_ReplicatedHasBegunPlay_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AGameStateBase::OnRep_GameModeClass() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameStateBase.OnRep_GameModeClass");
	AGameStateBase_OnRep_GameModeClass_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool AGameStateBase::HasMatchStarted() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameStateBase.HasMatchStarted");
	AGameStateBase_HasMatchStarted_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool AGameStateBase::HasBegunPlay() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameStateBase.HasBegunPlay");
	AGameStateBase_HasBegunPlay_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float AGameStateBase::GetServerWorldTimeSeconds() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameStateBase.GetServerWorldTimeSeconds");
	AGameStateBase_GetServerWorldTimeSeconds_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float AGameStateBase::GetPlayerStartTime(class AController* Controller) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameStateBase.GetPlayerStartTime");
	AGameStateBase_GetPlayerStartTime_Params params;

	params.Controller = Controller;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float AGameStateBase::GetPlayerRespawnDelay(class AController* Controller) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameStateBase.GetPlayerRespawnDelay");
	AGameStateBase_GetPlayerRespawnDelay_Params params;

	params.Controller = Controller;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void AGameState::OnRep_MatchState() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameState.OnRep_MatchState");
	AGameState_OnRep_MatchState_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AGameState::OnRep_ElapsedTime() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameState.OnRep_ElapsedTime");
	AGameState_OnRep_ElapsedTime_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameUserSettings::ValidateSettings() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.ValidateSettings");
	UGameUserSettings_ValidateSettings_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UGameUserSettings::SupportsHDRDisplayOutput() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.SupportsHDRDisplayOutput");
	UGameUserSettings_SupportsHDRDisplayOutput_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UGameUserSettings::SetVSyncEnabled(bool bEnable) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.SetVSyncEnabled");
	UGameUserSettings_SetVSyncEnabled_Params params;

	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameUserSettings::SetVisualEffectQuality(int Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.SetVisualEffectQuality");
	UGameUserSettings_SetVisualEffectQuality_Params params;

	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameUserSettings::SetViewDistanceQuality(int Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.SetViewDistanceQuality");
	UGameUserSettings_SetViewDistanceQuality_Params params;

	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameUserSettings::SetToDefaults() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.SetToDefaults");
	UGameUserSettings_SetToDefaults_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameUserSettings::SetTextureQuality(int Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.SetTextureQuality");
	UGameUserSettings_SetTextureQuality_Params params;

	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameUserSettings::SetShadowQuality(int Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.SetShadowQuality");
	UGameUserSettings_SetShadowQuality_Params params;

	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameUserSettings::SetScreenResolution(const struct FIntPoint& Resolution) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.SetScreenResolution");
	UGameUserSettings_SetScreenResolution_Params params;

	params.Resolution = Resolution;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameUserSettings::SetResolutionScaleValueEx(float NewScaleValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.SetResolutionScaleValueEx");
	UGameUserSettings_SetResolutionScaleValueEx_Params params;

	params.NewScaleValue = NewScaleValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameUserSettings::SetResolutionScaleValue(int NewScaleValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.SetResolutionScaleValue");
	UGameUserSettings_SetResolutionScaleValue_Params params;

	params.NewScaleValue = NewScaleValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameUserSettings::SetResolutionScaleNormalized(float NewScaleNormalized) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.SetResolutionScaleNormalized");
	UGameUserSettings_SetResolutionScaleNormalized_Params params;

	params.NewScaleNormalized = NewScaleNormalized;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameUserSettings::SetPreferredRefreshRate(int NewMode) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.SetPreferredRefreshRate");
	UGameUserSettings_SetPreferredRefreshRate_Params params;

	params.NewMode = NewMode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameUserSettings::SetPreferredMonitor(const class FString& NewMonitor) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.SetPreferredMonitor");
	UGameUserSettings_SetPreferredMonitor_Params params;

	params.NewMonitor = NewMonitor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameUserSettings::SetPreferredGraphicsAPI(const struct FName& NewMode) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.SetPreferredGraphicsAPI");
	UGameUserSettings_SetPreferredGraphicsAPI_Params params;

	params.NewMode = NewMode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameUserSettings::SetPostProcessingQuality(int Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.SetPostProcessingQuality");
	UGameUserSettings_SetPostProcessingQuality_Params params;

	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameUserSettings::SetOverallScalabilityLevel(int Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.SetOverallScalabilityLevel");
	UGameUserSettings_SetOverallScalabilityLevel_Params params;

	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameUserSettings::SetFullscreenMode(TEnumAsByte<EWindowMode> InFullscreenMode) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.SetFullscreenMode");
	UGameUserSettings_SetFullscreenMode_Params params;

	params.InFullscreenMode = InFullscreenMode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameUserSettings::SetFrameRateLimit(float NewLimit) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.SetFrameRateLimit");
	UGameUserSettings_SetFrameRateLimit_Params params;

	params.NewLimit = NewLimit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameUserSettings::SetFoliageQuality(int Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.SetFoliageQuality");
	UGameUserSettings_SetFoliageQuality_Params params;

	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameUserSettings::SetDynamicResolutionEnabled(bool bEnable) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.SetDynamicResolutionEnabled");
	UGameUserSettings_SetDynamicResolutionEnabled_Params params;

	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameUserSettings::SetBenchmarkFallbackValues() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.SetBenchmarkFallbackValues");
	UGameUserSettings_SetBenchmarkFallbackValues_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameUserSettings::SetAudioQualityLevel(int QualityLevel) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.SetAudioQualityLevel");
	UGameUserSettings_SetAudioQualityLevel_Params params;

	params.QualityLevel = QualityLevel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameUserSettings::SetAntiAliasingQuality(int Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.SetAntiAliasingQuality");
	UGameUserSettings_SetAntiAliasingQuality_Params params;

	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameUserSettings::SaveSettings() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.SaveSettings");
	UGameUserSettings_SaveSettings_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameUserSettings::RunHardwareBenchmark(int WorkScale, float CPUMultiplier, float GPUMultiplier) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.RunHardwareBenchmark");
	UGameUserSettings_RunHardwareBenchmark_Params params;

	params.WorkScale = WorkScale;
	params.CPUMultiplier = CPUMultiplier;
	params.GPUMultiplier = GPUMultiplier;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameUserSettings::RevertVideoMode() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.RevertVideoMode");
	UGameUserSettings_RevertVideoMode_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameUserSettings::ResetToCurrentSettings() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.ResetToCurrentSettings");
	UGameUserSettings_ResetToCurrentSettings_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameUserSettings::LoadSettings(bool bForceReload) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.LoadSettings");
	UGameUserSettings_LoadSettings_Params params;

	params.bForceReload = bForceReload;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UGameUserSettings::IsVSyncEnabled() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.IsVSyncEnabled");
	UGameUserSettings_IsVSyncEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UGameUserSettings::IsVSyncDirty() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.IsVSyncDirty");
	UGameUserSettings_IsVSyncDirty_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UGameUserSettings::IsScreenResolutionDirty() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.IsScreenResolutionDirty");
	UGameUserSettings_IsScreenResolutionDirty_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UGameUserSettings::IsHDREnabled() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.IsHDREnabled");
	UGameUserSettings_IsHDREnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UGameUserSettings::IsFullscreenModeDirty() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.IsFullscreenModeDirty");
	UGameUserSettings_IsFullscreenModeDirty_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UGameUserSettings::IsDynamicResolutionEnabled() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.IsDynamicResolutionEnabled");
	UGameUserSettings_IsDynamicResolutionEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UGameUserSettings::IsDynamicResolutionDirty() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.IsDynamicResolutionDirty");
	UGameUserSettings_IsDynamicResolutionDirty_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UGameUserSettings::IsDirty() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.IsDirty");
	UGameUserSettings_IsDirty_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UGameUserSettings::GetVisualEffectQuality() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.GetVisualEffectQuality");
	UGameUserSettings_GetVisualEffectQuality_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UGameUserSettings::GetViewDistanceQuality() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.GetViewDistanceQuality");
	UGameUserSettings_GetViewDistanceQuality_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UGameUserSettings::GetTextureQuality() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.GetTextureQuality");
	UGameUserSettings_GetTextureQuality_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UGameUserSettings::GetShadowQuality() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.GetShadowQuality");
	UGameUserSettings_GetShadowQuality_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FIntPoint UGameUserSettings::GetScreenResolution() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.GetScreenResolution");
	UGameUserSettings_GetScreenResolution_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UGameUserSettings::GetResolutionScaleInformationEx(float* CurrentScaleNormalized, float* CurrentScaleValue, float* MinScaleValue, float* MaxScaleValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.GetResolutionScaleInformationEx");
	UGameUserSettings_GetResolutionScaleInformationEx_Params params;

	params.CurrentScaleNormalized = *CurrentScaleNormalized;
	params.CurrentScaleValue = *CurrentScaleValue;
	params.MinScaleValue = *MinScaleValue;
	params.MaxScaleValue = *MaxScaleValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameUserSettings::GetResolutionScaleInformation(float* CurrentScaleNormalized, int* CurrentScaleValue, int* MinScaleValue, int* MaxScaleValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.GetResolutionScaleInformation");
	UGameUserSettings_GetResolutionScaleInformation_Params params;

	params.CurrentScaleNormalized = *CurrentScaleNormalized;
	params.CurrentScaleValue = *CurrentScaleValue;
	params.MinScaleValue = *MinScaleValue;
	params.MaxScaleValue = *MaxScaleValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

float UGameUserSettings::GetRecommendedResolutionScale() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.GetRecommendedResolutionScale");
	UGameUserSettings_GetRecommendedResolutionScale_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UGameUserSettings::GetPreferredRefreshRate() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.GetPreferredRefreshRate");
	UGameUserSettings_GetPreferredRefreshRate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UGameUserSettings::GetPreferredMonitorDeviceName() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.GetPreferredMonitorDeviceName");
	UGameUserSettings_GetPreferredMonitorDeviceName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UGameUserSettings::GetPreferredMonitor() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.GetPreferredMonitor");
	UGameUserSettings_GetPreferredMonitor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FName UGameUserSettings::GetPreferredGraphicsAPI() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.GetPreferredGraphicsAPI");
	UGameUserSettings_GetPreferredGraphicsAPI_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UGameUserSettings::GetPostProcessingQuality() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.GetPostProcessingQuality");
	UGameUserSettings_GetPostProcessingQuality_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UGameUserSettings::GetOverallScalabilityLevel() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.GetOverallScalabilityLevel");
	UGameUserSettings_GetOverallScalabilityLevel_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UGameUserSettings::GetMonitorDisplayName(int MonitorIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.GetMonitorDisplayName");
	UGameUserSettings_GetMonitorDisplayName_Params params;

	params.MonitorIndex = MonitorIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FIntPoint UGameUserSettings::GetLastConfirmedScreenResolution() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.GetLastConfirmedScreenResolution");
	UGameUserSettings_GetLastConfirmedScreenResolution_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FText UGameUserSettings::GetGraphicsAPIName(const struct FName& GraphicsAPIName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.GetGraphicsAPIName");
	UGameUserSettings_GetGraphicsAPIName_Params params;

	params.GraphicsAPIName = GraphicsAPIName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UGameUserSettings* UGameUserSettings::GetGameUserSettings() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.GetGameUserSettings");
	UGameUserSettings_GetGameUserSettings_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UGameUserSettings::GetFrameRateLimit() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.GetFrameRateLimit");
	UGameUserSettings_GetFrameRateLimit_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UGameUserSettings::GetFoliageQuality() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.GetFoliageQuality");
	UGameUserSettings_GetFoliageQuality_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FIntPoint UGameUserSettings::GetDesktopResolution() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.GetDesktopResolution");
	UGameUserSettings_GetDesktopResolution_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FIntPoint UGameUserSettings::GetDefaultWindowPosition() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.GetDefaultWindowPosition");
	UGameUserSettings_GetDefaultWindowPosition_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UGameUserSettings::GetDefaultResolutionScale() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.GetDefaultResolutionScale");
	UGameUserSettings_GetDefaultResolutionScale_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FIntPoint UGameUserSettings::GetDefaultResolution() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.GetDefaultResolution");
	UGameUserSettings_GetDefaultResolution_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UGameUserSettings::GetDefaultRefreshRate() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.GetDefaultRefreshRate");
	UGameUserSettings_GetDefaultRefreshRate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UGameUserSettings::GetDefaultPreferredMonitor() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.GetDefaultPreferredMonitor");
	UGameUserSettings_GetDefaultPreferredMonitor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FName UGameUserSettings::GetDefaultPreferredGraphicsAPI() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.GetDefaultPreferredGraphicsAPI");
	UGameUserSettings_GetDefaultPreferredGraphicsAPI_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UGameUserSettings::GetCurrentlySupportedGraphicsAPIs(TArray<struct FName>* OutSupportedAPIs) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.GetCurrentlySupportedGraphicsAPIs");
	UGameUserSettings_GetCurrentlySupportedGraphicsAPIs_Params params;

	params.OutSupportedAPIs = *OutSupportedAPIs;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

int UGameUserSettings::GetCurrentHDRDisplayNits() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.GetCurrentHDRDisplayNits");
	UGameUserSettings_GetCurrentHDRDisplayNits_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UGameUserSettings::GetAudioQualityLevel() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.GetAudioQualityLevel");
	UGameUserSettings_GetAudioQualityLevel_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UGameUserSettings::GetAntiAliasingQuality() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.GetAntiAliasingQuality");
	UGameUserSettings_GetAntiAliasingQuality_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UGameUserSettings::EnableHDRDisplayOutput(bool bEnable, int DisplayNits) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.EnableHDRDisplayOutput");
	UGameUserSettings_EnableHDRDisplayOutput_Params params;

	params.bEnable = bEnable;
	params.DisplayNits = DisplayNits;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameUserSettings::ConfirmVideoMode() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.ConfirmVideoMode");
	UGameUserSettings_ConfirmVideoMode_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameUserSettings::ApplySettings(bool bCheckForCommandLineOverrides) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.ApplySettings");
	UGameUserSettings_ApplySettings_Params params;

	params.bCheckForCommandLineOverrides = bCheckForCommandLineOverrides;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameUserSettings::ApplyResolutionSettings(bool bCheckForCommandLineOverrides) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.ApplyResolutionSettings");
	UGameUserSettings_ApplyResolutionSettings_Params params;

	params.bCheckForCommandLineOverrides = bCheckForCommandLineOverrides;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameUserSettings::ApplyNonResolutionSettings() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.ApplyNonResolutionSettings");
	UGameUserSettings_ApplyNonResolutionSettings_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameUserSettings::ApplyHardwareBenchmarkResults() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameUserSettings.ApplyHardwareBenchmarkResults");
	UGameUserSettings_ApplyHardwareBenchmarkResults_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameViewportClient::SSSwapControllers() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameViewportClient.SSSwapControllers");
	UGameViewportClient_SSSwapControllers_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameViewportClient::ShowTitleSafeArea() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameViewportClient.ShowTitleSafeArea");
	UGameViewportClient_ShowTitleSafeArea_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameViewportClient::SetConsoleTarget(int PlayerIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameViewportClient.SetConsoleTarget");
	UGameViewportClient_SetConsoleTarget_Params params;

	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AHUD::ToggleOverrideDebugTarget() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.HUD.ToggleOverrideDebugTarget");
	AHUD_ToggleOverrideDebugTarget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AHUD::ShowHUD(int WantsVisible) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.HUD.ShowHUD");
	AHUD_ShowHUD_Params params;

	params.WantsVisible = WantsVisible;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AHUD::ShowDebugToggleSubCategory(const struct FName& Category) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.HUD.ShowDebugToggleSubCategory");
	AHUD_ShowDebugToggleSubCategory_Params params;

	params.Category = Category;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AHUD::ShowDebugForReticleTargetToggle(class UClass* DesiredClass) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.HUD.ShowDebugForReticleTargetToggle");
	AHUD_ShowDebugForReticleTargetToggle_Params params;

	params.DesiredClass = DesiredClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AHUD::ShowDebugBonesReset() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.HUD.ShowDebugBonesReset");
	AHUD_ShowDebugBonesReset_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AHUD::ShowDebugBonesRemoveChildren(const class FString& Arguments) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.HUD.ShowDebugBonesRemoveChildren");
	AHUD_ShowDebugBonesRemoveChildren_Params params;

	params.Arguments = Arguments;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AHUD::ShowDebugBonesAdd(const class FString& Arguments) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.HUD.ShowDebugBonesAdd");
	AHUD_ShowDebugBonesAdd_Params params;

	params.Arguments = Arguments;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AHUD::ShowDebug(const struct FName& DebugType) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.HUD.ShowDebug");
	AHUD_ShowDebug_Params params;

	params.DebugType = DebugType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AHUD::RemoveDebugText(class AActor* SrcActor, bool bLeaveDurationText) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.HUD.RemoveDebugText");
	AHUD_RemoveDebugText_Params params;

	params.SrcActor = SrcActor;
	params.bLeaveDurationText = bLeaveDurationText;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AHUD::RemoveAllDebugStrings() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.HUD.RemoveAllDebugStrings");
	AHUD_RemoveAllDebugStrings_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AHUD::ReceiveHitBoxRelease(const struct FName& BoxName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.HUD.ReceiveHitBoxRelease");
	AHUD_ReceiveHitBoxRelease_Params params;

	params.BoxName = BoxName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AHUD::ReceiveHitBoxEndCursorOver(const struct FName& BoxName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.HUD.ReceiveHitBoxEndCursorOver");
	AHUD_ReceiveHitBoxEndCursorOver_Params params;

	params.BoxName = BoxName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AHUD::ReceiveHitBoxClick(const struct FName& BoxName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.HUD.ReceiveHitBoxClick");
	AHUD_ReceiveHitBoxClick_Params params;

	params.BoxName = BoxName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AHUD::ReceiveHitBoxBeginCursorOver(const struct FName& BoxName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.HUD.ReceiveHitBoxBeginCursorOver");
	AHUD_ReceiveHitBoxBeginCursorOver_Params params;

	params.BoxName = BoxName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AHUD::ReceiveDrawHUD(int SizeX, int SizeY) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.HUD.ReceiveDrawHUD");
	AHUD_ReceiveDrawHUD_Params params;

	params.SizeX = SizeX;
	params.SizeY = SizeY;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

struct FVector AHUD::Project(const struct FVector& Location) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.HUD.Project");
	AHUD_Project_Params params;

	params.Location = Location;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void AHUD::PreviousDebugTarget() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.HUD.PreviousDebugTarget");
	AHUD_PreviousDebugTarget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AHUD::NextDebugTarget() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.HUD.NextDebugTarget");
	AHUD_NextDebugTarget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AHUD::GetTextSize(const class FString& Text, class UFont* Font, float Scale, float* OutWidth, float* OutHeight) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.HUD.GetTextSize");
	AHUD_GetTextSize_Params params;

	params.Text = Text;
	params.Font = Font;
	params.Scale = Scale;
	params.OutWidth = *OutWidth;
	params.OutHeight = *OutHeight;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

class APlayerController* AHUD::GetOwningPlayerController() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.HUD.GetOwningPlayerController");
	AHUD_GetOwningPlayerController_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class APawn* AHUD::GetOwningPawn() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.HUD.GetOwningPawn");
	AHUD_GetOwningPawn_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void AHUD::GetActorsInSelectionRectangle(class UClass* ClassFilter, const struct FVector2D& FirstPoint, const struct FVector2D& SecondPoint, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed, TArray<class AActor*>* OutActors) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.HUD.GetActorsInSelectionRectangle");
	AHUD_GetActorsInSelectionRectangle_Params params;

	params.ClassFilter = ClassFilter;
	params.FirstPoint = FirstPoint;
	params.SecondPoint = SecondPoint;
	params.bIncludeNonCollidingComponents = bIncludeNonCollidingComponents;
	params.bActorMustBeFullyEnclosed = bActorMustBeFullyEnclosed;
	params.OutActors = *OutActors;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AHUD::DrawTextureSimple(class UTexture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.HUD.DrawTextureSimple");
	AHUD_DrawTextureSimple_Params params;

	params.Texture = Texture;
	params.ScreenX = ScreenX;
	params.ScreenY = ScreenY;
	params.Scale = Scale;
	params.bScalePosition = bScalePosition;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AHUD::DrawTexture(class UTexture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, const struct FLinearColor& TintColor, TEnumAsByte<EBlendMode> BlendMode, float Scale, bool bScalePosition, float Rotation, const struct FVector2D& RotPivot) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.HUD.DrawTexture");
	AHUD_DrawTexture_Params params;

	params.Texture = Texture;
	params.ScreenX = ScreenX;
	params.ScreenY = ScreenY;
	params.ScreenW = ScreenW;
	params.ScreenH = ScreenH;
	params.TextureU = TextureU;
	params.TextureV = TextureV;
	params.TextureUWidth = TextureUWidth;
	params.TextureVHeight = TextureVHeight;
	params.TintColor = TintColor;
	params.BlendMode = BlendMode;
	params.Scale = Scale;
	params.bScalePosition = bScalePosition;
	params.Rotation = Rotation;
	params.RotPivot = RotPivot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AHUD::DrawText(const class FString& Text, const struct FLinearColor& TextColor, float ScreenX, float ScreenY, class UFont* Font, float Scale, bool bScalePosition) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.HUD.DrawText");
	AHUD_DrawText_Params params;

	params.Text = Text;
	params.TextColor = TextColor;
	params.ScreenX = ScreenX;
	params.ScreenY = ScreenY;
	params.Font = Font;
	params.Scale = Scale;
	params.bScalePosition = bScalePosition;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AHUD::DrawRect(const struct FLinearColor& RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.HUD.DrawRect");
	AHUD_DrawRect_Params params;

	params.RectColor = RectColor;
	params.ScreenX = ScreenX;
	params.ScreenY = ScreenY;
	params.ScreenW = ScreenW;
	params.ScreenH = ScreenH;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AHUD::DrawMaterialSimple(class UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.HUD.DrawMaterialSimple");
	AHUD_DrawMaterialSimple_Params params;

	params.Material = Material;
	params.ScreenX = ScreenX;
	params.ScreenY = ScreenY;
	params.ScreenW = ScreenW;
	params.ScreenH = ScreenH;
	params.Scale = Scale;
	params.bScalePosition = bScalePosition;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AHUD::DrawMaterial(class UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, const struct FVector2D& RotPivot) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.HUD.DrawMaterial");
	AHUD_DrawMaterial_Params params;

	params.Material = Material;
	params.ScreenX = ScreenX;
	params.ScreenY = ScreenY;
	params.ScreenW = ScreenW;
	params.ScreenH = ScreenH;
	params.MaterialU = MaterialU;
	params.MaterialV = MaterialV;
	params.MaterialUWidth = MaterialUWidth;
	params.MaterialVHeight = MaterialVHeight;
	params.Scale = Scale;
	params.bScalePosition = bScalePosition;
	params.Rotation = Rotation;
	params.RotPivot = RotPivot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AHUD::DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, const struct FLinearColor& LineColor, float LineThickness) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.HUD.DrawLine");
	AHUD_DrawLine_Params params;

	params.StartScreenX = StartScreenX;
	params.StartScreenY = StartScreenY;
	params.EndScreenX = EndScreenX;
	params.EndScreenY = EndScreenY;
	params.LineColor = LineColor;
	params.LineThickness = LineThickness;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AHUD::Deproject(float ScreenX, float ScreenY, struct FVector* WorldPosition, struct FVector* WorldDirection) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.HUD.Deproject");
	AHUD_Deproject_Params params;

	params.ScreenX = ScreenX;
	params.ScreenY = ScreenY;
	params.WorldPosition = *WorldPosition;
	params.WorldDirection = *WorldDirection;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AHUD::AddHitBox(const struct FVector2D& Position, const struct FVector2D& Size, const struct FName& InName, bool bConsumesInput, int Priority) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.HUD.AddHitBox");
	AHUD_AddHitBox_Params params;

	params.Position = Position;
	params.Size = Size;
	params.InName = InName;
	params.bConsumesInput = bConsumesInput;
	params.Priority = Priority;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AHUD::AddDebugText(const class FString& DebugText, class AActor* SrcActor, float Duration, const struct FVector& Offset, const struct FVector& DesiredOffset, const struct FColor& TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, class UFont* InFont, float FontScale, bool bDrawShadow) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.HUD.AddDebugText");
	AHUD_AddDebugText_Params params;

	params.DebugText = DebugText;
	params.SrcActor = SrcActor;
	params.Duration = Duration;
	params.Offset = Offset;
	params.DesiredOffset = DesiredOffset;
	params.TextColor = TextColor;
	params.bSkipOverwriteCheck = bSkipOverwriteCheck;
	params.bAbsoluteLocation = bAbsoluteLocation;
	params.bKeepAttachedToActor = bKeepAttachedToActor;
	params.InFont = InFont;
	params.FontScale = FontScale;
	params.bDrawShadow = bDrawShadow;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ALevelScriptActor::WorldOriginLocationChanged(const struct FIntVector& OldOriginLocation, const struct FIntVector& NewOriginLocation) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.LevelScriptActor.WorldOriginLocationChanged");
	ALevelScriptActor_WorldOriginLocationChanged_Params params;

	params.OldOriginLocation = OldOriginLocation;
	params.NewOriginLocation = NewOriginLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ALevelScriptActor::SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.LevelScriptActor.SetCinematicMode");
	ALevelScriptActor_SetCinematicMode_Params params;

	params.bCinematicMode = bCinematicMode;
	params.bHidePlayer = bHidePlayer;
	params.bAffectsHUD = bAffectsHUD;
	params.bAffectsMovement = bAffectsMovement;
	params.bAffectsTurning = bAffectsTurning;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool ALevelScriptActor::RemoteEvent(const struct FName& EventName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.LevelScriptActor.RemoteEvent");
	ALevelScriptActor_RemoteEvent_Params params;

	params.EventName = EventName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void ALevelScriptActor::LevelReset() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.LevelScriptActor.LevelReset");
	ALevelScriptActor_LevelReset_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool ULevelStreaming::ShouldBeLoaded() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.LevelStreaming.ShouldBeLoaded");
	ULevelStreaming_ShouldBeLoaded_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void ULevelStreaming::SetShouldBeVisible(bool bInShouldBeVisible) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.LevelStreaming.SetShouldBeVisible");
	ULevelStreaming_SetShouldBeVisible_Params params;

	params.bInShouldBeVisible = bInShouldBeVisible;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ULevelStreaming::SetShouldBeLoaded(bool bInShouldBeLoaded) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.LevelStreaming.SetShouldBeLoaded");
	ULevelStreaming_SetShouldBeLoaded_Params params;

	params.bInShouldBeLoaded = bInShouldBeLoaded;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ULevelStreaming::SetLevelLODIndex(int LODIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.LevelStreaming.SetLevelLODIndex");
	ULevelStreaming_SetLevelLODIndex_Params params;

	params.LODIndex = LODIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool ULevelStreaming::IsStreamingStatePending() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.LevelStreaming.IsStreamingStatePending");
	ULevelStreaming_IsStreamingStatePending_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool ULevelStreaming::IsLevelVisible() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.LevelStreaming.IsLevelVisible");
	ULevelStreaming_IsLevelVisible_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool ULevelStreaming::IsLevelLoaded() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.LevelStreaming.IsLevelLoaded");
	ULevelStreaming_IsLevelLoaded_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FName ULevelStreaming::GetWorldAssetPackageFName() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.LevelStreaming.GetWorldAssetPackageFName");
	ULevelStreaming_GetWorldAssetPackageFName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class ALevelScriptActor* ULevelStreaming::GetLevelScriptActor() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.LevelStreaming.GetLevelScriptActor");
	ULevelStreaming_GetLevelScriptActor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class ULevelStreaming* ULevelStreaming::CreateInstance(const class FString& UniqueInstanceName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.LevelStreaming.CreateInstance");
	ULevelStreaming_CreateInstance_Params params;

	params.UniqueInstanceName = UniqueInstanceName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void AStaticMeshActor::SetMobility(TEnumAsByte<EComponentMobility> InMobility) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.StaticMeshActor.SetMobility");
	AStaticMeshActor_SetMobility_Params params;

	params.InMobility = InMobility;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UMaterialBillboardComponent::SetElements(TArray<struct FMaterialSpriteElement> NewElements) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MaterialBillboardComponent.SetElements");
	UMaterialBillboardComponent_SetElements_Params params;

	params.NewElements = NewElements;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UMaterialBillboardComponent::AddElement(class UMaterialInterface* Material, class UCurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, class UCurveFloat* DistanceToSizeCurve) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MaterialBillboardComponent.AddElement");
	UMaterialBillboardComponent_AddElement_Params params;

	params.Material = Material;
	params.DistanceToOpacityCurve = DistanceToOpacityCurve;
	params.bSizeIsInScreenSpace = bSizeIsInScreenSpace;
	params.BaseSizeX = BaseSizeX;
	params.BaseSizeY = BaseSizeY;
	params.DistanceToSizeCurve = DistanceToSizeCurve;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UBlueprintAsyncActionBase::Activate() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.BlueprintAsyncActionBase.Activate");
	UBlueprintAsyncActionBase_Activate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UInstancedStaticMeshComponent::UpdateInstanceTransform(int InstanceIndex, const struct FTransform& NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.InstancedStaticMeshComponent.UpdateInstanceTransform");
	UInstancedStaticMeshComponent_UpdateInstanceTransform_Params params;

	params.InstanceIndex = InstanceIndex;
	params.NewInstanceTransform = NewInstanceTransform;
	params.bWorldSpace = bWorldSpace;
	params.bMarkRenderStateDirty = bMarkRenderStateDirty;
	params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UInstancedStaticMeshComponent::SetCullDistances(int StartCullDistance, int EndCullDistance) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.InstancedStaticMeshComponent.SetCullDistances");
	UInstancedStaticMeshComponent_SetCullDistances_Params params;

	params.StartCullDistance = StartCullDistance;
	params.EndCullDistance = EndCullDistance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UInstancedStaticMeshComponent::RemoveInstance(int InstanceIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.InstancedStaticMeshComponent.RemoveInstance");
	UInstancedStaticMeshComponent_RemoveInstance_Params params;

	params.InstanceIndex = InstanceIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UInstancedStaticMeshComponent::GetInstanceTransform(int InstanceIndex, bool bWorldSpace, struct FTransform* OutInstanceTransform) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.InstancedStaticMeshComponent.GetInstanceTransform");
	UInstancedStaticMeshComponent_GetInstanceTransform_Params params;

	params.InstanceIndex = InstanceIndex;
	params.bWorldSpace = bWorldSpace;
	params.OutInstanceTransform = *OutInstanceTransform;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UInstancedStaticMeshComponent::GetInstanceCount() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.InstancedStaticMeshComponent.GetInstanceCount");
	UInstancedStaticMeshComponent_GetInstanceCount_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UInstancedStaticMeshComponent::ClearInstances() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.InstancedStaticMeshComponent.ClearInstances");
	UInstancedStaticMeshComponent_ClearInstances_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

int UInstancedStaticMeshComponent::AddInstanceWorldSpace(const struct FTransform& WorldTransform) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.InstancedStaticMeshComponent.AddInstanceWorldSpace");
	UInstancedStaticMeshComponent_AddInstanceWorldSpace_Params params;

	params.WorldTransform = WorldTransform;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UInstancedStaticMeshComponent::AddInstance(const struct FTransform& InstanceTransform) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.InstancedStaticMeshComponent.AddInstance");
	UInstancedStaticMeshComponent_AddInstance_Params params;

	params.InstanceTransform = InstanceTransform;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UHierarchicalInstancedStaticMeshComponent::RemoveInstances(TArray<int> InstancesToRemove) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.HierarchicalInstancedStaticMeshComponent.RemoveInstances");
	UHierarchicalInstancedStaticMeshComponent_RemoveInstances_Params params;

	params.InstancesToRemove = InstancesToRemove;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UMaterialInterface::SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MaterialInterface.SetForceMipLevelsToBeResident");
	UMaterialInterface_SetForceMipLevelsToBeResident_Params params;

	params.OverrideForceMiplevelsToBeResident = OverrideForceMiplevelsToBeResident;
	params.bForceMiplevelsToBeResidentValue = bForceMiplevelsToBeResidentValue;
	params.ForceDuration = ForceDuration;
	params.CinematicTextureGroups = CinematicTextureGroups;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

class UPhysicalMaterial* UMaterialInterface::GetPhysicalMaterial() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MaterialInterface.GetPhysicalMaterial");
	UMaterialInterface_GetPhysicalMaterial_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UMaterial* UMaterialInterface::GetBaseMaterial() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MaterialInterface.GetBaseMaterial");
	UMaterialInterface_GetBaseMaterial_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FLinearColor UMaterialInstanceConstant::K2_GetVectorParameterValue(const struct FName& ParameterName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MaterialInstanceConstant.K2_GetVectorParameterValue");
	UMaterialInstanceConstant_K2_GetVectorParameterValue_Params params;

	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UTexture* UMaterialInstanceConstant::K2_GetTextureParameterValue(const struct FName& ParameterName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MaterialInstanceConstant.K2_GetTextureParameterValue");
	UMaterialInstanceConstant_K2_GetTextureParameterValue_Params params;

	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UMaterialInstanceConstant::K2_GetScalarParameterValue(const struct FName& ParameterName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MaterialInstanceConstant.K2_GetScalarParameterValue");
	UMaterialInstanceConstant_K2_GetScalarParameterValue_Params params;

	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int ACameraActor::GetAutoActivatePlayerIndex() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CameraActor.GetAutoActivatePlayerIndex");
	ACameraActor_GetAutoActivatePlayerIndex_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UCameraComponent::SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CameraComponent.SetUseFieldOfViewForLOD");
	UCameraComponent_SetUseFieldOfViewForLOD_Params params;

	params.bInUseFieldOfViewForLOD = bInUseFieldOfViewForLOD;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCameraComponent::SetProjectionMode(TEnumAsByte<ECameraProjectionMode> InProjectionMode) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CameraComponent.SetProjectionMode");
	UCameraComponent_SetProjectionMode_Params params;

	params.InProjectionMode = InProjectionMode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCameraComponent::SetPostProcessBlendWeight(float InPostProcessBlendWeight) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CameraComponent.SetPostProcessBlendWeight");
	UCameraComponent_SetPostProcessBlendWeight_Params params;

	params.InPostProcessBlendWeight = InPostProcessBlendWeight;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCameraComponent::SetOrthoWidth(float InOrthoWidth) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CameraComponent.SetOrthoWidth");
	UCameraComponent_SetOrthoWidth_Params params;

	params.InOrthoWidth = InOrthoWidth;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCameraComponent::SetOrthoNearClipPlane(float InOrthoNearClipPlane) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CameraComponent.SetOrthoNearClipPlane");
	UCameraComponent_SetOrthoNearClipPlane_Params params;

	params.InOrthoNearClipPlane = InOrthoNearClipPlane;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCameraComponent::SetOrthoFarClipPlane(float InOrthoFarClipPlane) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CameraComponent.SetOrthoFarClipPlane");
	UCameraComponent_SetOrthoFarClipPlane_Params params;

	params.InOrthoFarClipPlane = InOrthoFarClipPlane;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCameraComponent::SetFieldOfView(float InFieldOfView) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CameraComponent.SetFieldOfView");
	UCameraComponent_SetFieldOfView_Params params;

	params.InFieldOfView = InFieldOfView;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCameraComponent::SetConstraintAspectRatio(bool bInConstrainAspectRatio) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CameraComponent.SetConstraintAspectRatio");
	UCameraComponent_SetConstraintAspectRatio_Params params;

	params.bInConstrainAspectRatio = bInConstrainAspectRatio;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCameraComponent::SetAspectRatio(float InAspectRatio) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CameraComponent.SetAspectRatio");
	UCameraComponent_SetAspectRatio_Params params;

	params.InAspectRatio = InAspectRatio;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCameraComponent::RemoveBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CameraComponent.RemoveBlendable");
	UCameraComponent_RemoveBlendable_Params params;

	params.InBlendableObject = InBlendableObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCameraComponent::GetCameraView(float DeltaTime, struct FMinimalViewInfo* DesiredView) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CameraComponent.GetCameraView");
	UCameraComponent_GetCameraView_Params params;

	params.DeltaTime = DeltaTime;
	params.DesiredView = *DesiredView;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCameraComponent::AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CameraComponent.AddOrUpdateBlendable");
	UCameraComponent_AddOrUpdateBlendable_Params params;

	params.InBlendableObject = InBlendableObject;
	params.InWeight = InWeight;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AAmbientSound::Stop() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AmbientSound.Stop");
	AAmbientSound_Stop_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AAmbientSound::Play(float StartTime) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AmbientSound.Play");
	AAmbientSound_Play_Params params;

	params.StartTime = StartTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AAmbientSound::FadeOut(float FadeOutDuration, float FadeVolumeLevel) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AmbientSound.FadeOut");
	AAmbientSound_FadeOut_Params params;

	params.FadeOutDuration = FadeOutDuration;
	params.FadeVolumeLevel = FadeVolumeLevel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AAmbientSound::FadeIn(float FadeInDuration, float FadeVolumeLevel) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AmbientSound.FadeIn");
	AAmbientSound_FadeIn_Params params;

	params.FadeInDuration = FadeInDuration;
	params.FadeVolumeLevel = FadeVolumeLevel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AAmbientSound::AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AmbientSound.AdjustVolume");
	AAmbientSound_AdjustVolume_Params params;

	params.AdjustVolumeDuration = AdjustVolumeDuration;
	params.AdjustVolumeLevel = AdjustVolumeLevel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

float UAnimSequenceBase::GetPlayLength() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimSequenceBase.GetPlayLength");
	UAnimSequenceBase_GetPlayLength_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UParticleSystem* UAnimNotifyState_Trail::OverridePSTemplate(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimNotifyState_Trail.OverridePSTemplate");
	UAnimNotifyState_Trail_OverridePSTemplate_Params params;

	params.MeshComp = MeshComp;
	params.Animation = Animation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FTransform UAnimSequence::GetBoneTransform(const struct FName& BoneName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimSequence.GetBoneTransform");
	UAnimSequence_GetBoneTransform_Params params;

	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UAnimSingleNodeInstance::StopAnim() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimSingleNodeInstance.StopAnim");
	UAnimSingleNodeInstance_StopAnim_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAnimSingleNodeInstance::SetReverse(bool bInReverse) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimSingleNodeInstance.SetReverse");
	UAnimSingleNodeInstance_SetReverse_Params params;

	params.bInReverse = bInReverse;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAnimSingleNodeInstance::SetPreviewCurveOverride(const struct FName& PoseName, float Value, bool bRemoveIfZero) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimSingleNodeInstance.SetPreviewCurveOverride");
	UAnimSingleNodeInstance_SetPreviewCurveOverride_Params params;

	params.PoseName = PoseName;
	params.Value = Value;
	params.bRemoveIfZero = bRemoveIfZero;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAnimSingleNodeInstance::SetPositionWithPreviousTime(float InPosition, float InPreviousTime, bool bFireNotifies) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimSingleNodeInstance.SetPositionWithPreviousTime");
	UAnimSingleNodeInstance_SetPositionWithPreviousTime_Params params;

	params.InPosition = InPosition;
	params.InPreviousTime = InPreviousTime;
	params.bFireNotifies = bFireNotifies;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAnimSingleNodeInstance::SetPosition(float InPosition, bool bFireNotifies) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimSingleNodeInstance.SetPosition");
	UAnimSingleNodeInstance_SetPosition_Params params;

	params.InPosition = InPosition;
	params.bFireNotifies = bFireNotifies;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAnimSingleNodeInstance::SetPlayRate(float InPlayRate) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimSingleNodeInstance.SetPlayRate");
	UAnimSingleNodeInstance_SetPlayRate_Params params;

	params.InPlayRate = InPlayRate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAnimSingleNodeInstance::SetPlaying(bool bIsPlaying) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimSingleNodeInstance.SetPlaying");
	UAnimSingleNodeInstance_SetPlaying_Params params;

	params.bIsPlaying = bIsPlaying;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAnimSingleNodeInstance::SetLooping(bool bIsLooping) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimSingleNodeInstance.SetLooping");
	UAnimSingleNodeInstance_SetLooping_Params params;

	params.bIsLooping = bIsLooping;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAnimSingleNodeInstance::SetBlendSpaceInput(const struct FVector& InBlendInput) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimSingleNodeInstance.SetBlendSpaceInput");
	UAnimSingleNodeInstance_SetBlendSpaceInput_Params params;

	params.InBlendInput = InBlendInput;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAnimSingleNodeInstance::SetAnimationAsset(class UAnimationAsset* NewAsset, bool bIsLooping, float InPlayRate) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimSingleNodeInstance.SetAnimationAsset");
	UAnimSingleNodeInstance_SetAnimationAsset_Params params;

	params.NewAsset = NewAsset;
	params.bIsLooping = bIsLooping;
	params.InPlayRate = InPlayRate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAnimSingleNodeInstance::PlayAnim(bool bIsLooping, float InPlayRate, float InStartPosition) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimSingleNodeInstance.PlayAnim");
	UAnimSingleNodeInstance_PlayAnim_Params params;

	params.bIsLooping = bIsLooping;
	params.InPlayRate = InPlayRate;
	params.InStartPosition = InStartPosition;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

float UAnimSingleNodeInstance::GetLength() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimSingleNodeInstance.GetLength");
	UAnimSingleNodeInstance_GetLength_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UAnimationAsset* UAnimSingleNodeInstance::GetAnimationAsset() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AnimSingleNodeInstance.GetAnimationAsset");
	UAnimSingleNodeInstance_GetAnimationAsset_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UArrowComponent::SetArrowColor(const struct FLinearColor& NewColor) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ArrowComponent.SetArrowColor");
	UArrowComponent_SetArrowColor_Params params;

	params.NewColor = NewColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

class UAsyncActionLoadPrimaryAsset* UAsyncActionLoadPrimaryAsset::AsyncLoadPrimaryAsset(class UObject* WorldContextObject, const struct FPrimaryAssetId& PrimaryAsset, TArray<struct FName> LoadBundles) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AsyncActionLoadPrimaryAsset.AsyncLoadPrimaryAsset");
	UAsyncActionLoadPrimaryAsset_AsyncLoadPrimaryAsset_Params params;

	params.WorldContextObject = WorldContextObject;
	params.PrimaryAsset = PrimaryAsset;
	params.LoadBundles = LoadBundles;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UAsyncActionLoadPrimaryAssetClass* UAsyncActionLoadPrimaryAssetClass::AsyncLoadPrimaryAssetClass(class UObject* WorldContextObject, const struct FPrimaryAssetId& PrimaryAsset, TArray<struct FName> LoadBundles) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AsyncActionLoadPrimaryAssetClass.AsyncLoadPrimaryAssetClass");
	UAsyncActionLoadPrimaryAssetClass_AsyncLoadPrimaryAssetClass_Params params;

	params.WorldContextObject = WorldContextObject;
	params.PrimaryAsset = PrimaryAsset;
	params.LoadBundles = LoadBundles;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UAsyncActionLoadPrimaryAssetList* UAsyncActionLoadPrimaryAssetList::AsyncLoadPrimaryAssetList(class UObject* WorldContextObject, TArray<struct FPrimaryAssetId> PrimaryAssetList, TArray<struct FName> LoadBundles) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AsyncActionLoadPrimaryAssetList.AsyncLoadPrimaryAssetList");
	UAsyncActionLoadPrimaryAssetList_AsyncLoadPrimaryAssetList_Params params;

	params.WorldContextObject = WorldContextObject;
	params.PrimaryAssetList = PrimaryAssetList;
	params.LoadBundles = LoadBundles;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UAsyncActionLoadPrimaryAssetClassList* UAsyncActionLoadPrimaryAssetClassList::AsyncLoadPrimaryAssetClassList(class UObject* WorldContextObject, TArray<struct FPrimaryAssetId> PrimaryAssetList, TArray<struct FName> LoadBundles) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AsyncActionLoadPrimaryAssetClassList.AsyncLoadPrimaryAssetClassList");
	UAsyncActionLoadPrimaryAssetClassList_AsyncLoadPrimaryAssetClassList_Params params;

	params.WorldContextObject = WorldContextObject;
	params.PrimaryAssetList = PrimaryAssetList;
	params.LoadBundles = LoadBundles;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UAsyncActionChangePrimaryAssetBundles* UAsyncActionChangePrimaryAssetBundles::AsyncChangeBundleStateForPrimaryAssetList(class UObject* WorldContextObject, TArray<struct FPrimaryAssetId> PrimaryAssetList, TArray<struct FName> AddBundles, TArray<struct FName> RemoveBundles) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AsyncActionChangePrimaryAssetBundles.AsyncChangeBundleStateForPrimaryAssetList");
	UAsyncActionChangePrimaryAssetBundles_AsyncChangeBundleStateForPrimaryAssetList_Params params;

	params.WorldContextObject = WorldContextObject;
	params.PrimaryAssetList = PrimaryAssetList;
	params.AddBundles = AddBundles;
	params.RemoveBundles = RemoveBundles;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UAsyncActionChangePrimaryAssetBundles* UAsyncActionChangePrimaryAssetBundles::AsyncChangeBundleStateForMatchingPrimaryAssets(class UObject* WorldContextObject, TArray<struct FName> NewBundles, TArray<struct FName> OldBundles) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AsyncActionChangePrimaryAssetBundles.AsyncChangeBundleStateForMatchingPrimaryAssets");
	UAsyncActionChangePrimaryAssetBundles_AsyncChangeBundleStateForMatchingPrimaryAssets_Params params;

	params.WorldContextObject = WorldContextObject;
	params.NewBundles = NewBundles;
	params.OldBundles = OldBundles;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UAtmosphericFogComponent::StartPrecompute() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AtmosphericFogComponent.StartPrecompute");
	UAtmosphericFogComponent_StartPrecompute_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAtmosphericFogComponent::SetSunMultiplier(float NewSunMultiplier) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AtmosphericFogComponent.SetSunMultiplier");
	UAtmosphericFogComponent_SetSunMultiplier_Params params;

	params.NewSunMultiplier = NewSunMultiplier;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAtmosphericFogComponent::SetStartDistance(float NewStartDistance) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AtmosphericFogComponent.SetStartDistance");
	UAtmosphericFogComponent_SetStartDistance_Params params;

	params.NewStartDistance = NewStartDistance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAtmosphericFogComponent::SetPrecomputeParams(float DensityHeight, int MaxScatteringOrder, int InscatterAltitudeSampleNum) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AtmosphericFogComponent.SetPrecomputeParams");
	UAtmosphericFogComponent_SetPrecomputeParams_Params params;

	params.DensityHeight = DensityHeight;
	params.MaxScatteringOrder = MaxScatteringOrder;
	params.InscatterAltitudeSampleNum = InscatterAltitudeSampleNum;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAtmosphericFogComponent::SetFogMultiplier(float NewFogMultiplier) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AtmosphericFogComponent.SetFogMultiplier");
	UAtmosphericFogComponent_SetFogMultiplier_Params params;

	params.NewFogMultiplier = NewFogMultiplier;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAtmosphericFogComponent::SetDistanceScale(float NewDistanceScale) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AtmosphericFogComponent.SetDistanceScale");
	UAtmosphericFogComponent_SetDistanceScale_Params params;

	params.NewDistanceScale = NewDistanceScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAtmosphericFogComponent::SetDistanceOffset(float NewDistanceOffset) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AtmosphericFogComponent.SetDistanceOffset");
	UAtmosphericFogComponent_SetDistanceOffset_Params params;

	params.NewDistanceOffset = NewDistanceOffset;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAtmosphericFogComponent::SetDensityOffset(float NewDensityOffset) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AtmosphericFogComponent.SetDensityOffset");
	UAtmosphericFogComponent_SetDensityOffset_Params params;

	params.NewDensityOffset = NewDensityOffset;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAtmosphericFogComponent::SetDensityMultiplier(float NewDensityMultiplier) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AtmosphericFogComponent.SetDensityMultiplier");
	UAtmosphericFogComponent_SetDensityMultiplier_Params params;

	params.NewDensityMultiplier = NewDensityMultiplier;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAtmosphericFogComponent::SetDefaultLightColor(const struct FLinearColor& NewLightColor) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AtmosphericFogComponent.SetDefaultLightColor");
	UAtmosphericFogComponent_SetDefaultLightColor_Params params;

	params.NewLightColor = NewLightColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAtmosphericFogComponent::SetDefaultBrightness(float NewBrightness) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AtmosphericFogComponent.SetDefaultBrightness");
	UAtmosphericFogComponent_SetDefaultBrightness_Params params;

	params.NewBrightness = NewBrightness;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAtmosphericFogComponent::SetAltitudeScale(float NewAltitudeScale) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AtmosphericFogComponent.SetAltitudeScale");
	UAtmosphericFogComponent_SetAltitudeScale_Params params;

	params.NewAltitudeScale = NewAltitudeScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAtmosphericFogComponent::DisableSunDisk(bool NewSunDisk) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AtmosphericFogComponent.DisableSunDisk");
	UAtmosphericFogComponent_DisableSunDisk_Params params;

	params.NewSunDisk = NewSunDisk;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UAtmosphericFogComponent::DisableGroundScattering(bool NewGroundScattering) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AtmosphericFogComponent.DisableGroundScattering");
	UAtmosphericFogComponent_DisableGroundScattering_Params params;

	params.NewGroundScattering = NewGroundScattering;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AAudioVolume::SetReverbSettings(const struct FReverbSettings& NewReverbSettings) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AudioVolume.SetReverbSettings");
	AAudioVolume_SetReverbSettings_Params params;

	params.NewReverbSettings = NewReverbSettings;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AAudioVolume::SetPriority(float NewPriority) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AudioVolume.SetPriority");
	AAudioVolume_SetPriority_Params params;

	params.NewPriority = NewPriority;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AAudioVolume::SetInteriorSettings(const struct FInteriorSettings& NewInteriorSettings) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AudioVolume.SetInteriorSettings");
	AAudioVolume_SetInteriorSettings_Params params;

	params.NewInteriorSettings = NewInteriorSettings;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AAudioVolume::SetEnabled(bool bNewEnabled) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AudioVolume.SetEnabled");
	AAudioVolume_SetEnabled_Params params;

	params.bNewEnabled = bNewEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AAudioVolume::OnRep_bEnabled() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AudioVolume.OnRep_bEnabled");
	AAudioVolume_OnRep_bEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UAvoidanceManager::RegisterMovementComponent(class UMovementComponent* MovementComp, float AvoidanceWeight) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AvoidanceManager.RegisterMovementComponent");
	UAvoidanceManager_RegisterMovementComponent_Params params;

	params.MovementComp = MovementComp;
	params.AvoidanceWeight = AvoidanceWeight;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UAvoidanceManager::GetObjectCount() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AvoidanceManager.GetObjectCount");
	UAvoidanceManager_GetObjectCount_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UAvoidanceManager::GetNewAvoidanceUID() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AvoidanceManager.GetNewAvoidanceUID");
	UAvoidanceManager_GetNewAvoidanceUID_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UAvoidanceManager::GetAvoidanceVelocityForComponent(class UMovementComponent* MovementComp) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.AvoidanceManager.GetAvoidanceVelocityForComponent");
	UAvoidanceManager_GetAvoidanceVelocityForComponent_Params params;

	params.MovementComp = MovementComp;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UBillboardComponent::SetUV(int NewU, int NewUL, int NewV, int NewVL) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.BillboardComponent.SetUV");
	UBillboardComponent_SetUV_Params params;

	params.NewU = NewU;
	params.NewUL = NewUL;
	params.NewV = NewV;
	params.NewVL = NewVL;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UBillboardComponent::SetSpriteAndUV(class UTexture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.BillboardComponent.SetSpriteAndUV");
	UBillboardComponent_SetSpriteAndUV_Params params;

	params.NewSprite = NewSprite;
	params.NewU = NewU;
	params.NewUL = NewUL;
	params.NewV = NewV;
	params.NewVL = NewVL;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UBillboardComponent::SetSprite(class UTexture2D* NewSprite) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.BillboardComponent.SetSprite");
	UBillboardComponent_SetSprite_Params params;

	params.NewSprite = NewSprite;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UBlueprintMapLibrary::SetMapPropertyByName(class UObject* Object, const struct FName& PropertyName, TMap<int, int> Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.BlueprintMapLibrary.SetMapPropertyByName");
	UBlueprintMapLibrary_SetMapPropertyByName_Params params;

	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UBlueprintMapLibrary::Map_Values(TMap<int, int> TargetMap, TArray<int>* Values) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.BlueprintMapLibrary.Map_Values");
	UBlueprintMapLibrary_Map_Values_Params params;

	
	params.TargetMap = TargetMap;
	params.Values = *Values;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UBlueprintMapLibrary::Map_Remove(TMap<int, int> TargetMap, int Key) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.BlueprintMapLibrary.Map_Remove");
	UBlueprintMapLibrary_Map_Remove_Params params;

	
	params.TargetMap = TargetMap;
	params.Key = Key;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UBlueprintMapLibrary::Map_Length(TMap<int, int> TargetMap) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.BlueprintMapLibrary.Map_Length");
	UBlueprintMapLibrary_Map_Length_Params params;

	
	params.TargetMap = TargetMap;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UBlueprintMapLibrary::Map_Keys(TMap<int, int> TargetMap, TArray<int>* Keys) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.BlueprintMapLibrary.Map_Keys");
	UBlueprintMapLibrary_Map_Keys_Params params;

	
	params.TargetMap = TargetMap;
	params.Keys = *Keys;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UBlueprintMapLibrary::Map_Find(TMap<int, int> TargetMap, int Key, int* Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.BlueprintMapLibrary.Map_Find");
	UBlueprintMapLibrary_Map_Find_Params params;

	
	params.TargetMap = TargetMap;
	params.Key = Key;
	params.Value = *Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UBlueprintMapLibrary::Map_Contains(TMap<int, int> TargetMap, int Key) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.BlueprintMapLibrary.Map_Contains");
	UBlueprintMapLibrary_Map_Contains_Params params;

	
	params.TargetMap = TargetMap;
	params.Key = Key;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UBlueprintMapLibrary::Map_Clear(TMap<int, int> TargetMap) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.BlueprintMapLibrary.Map_Clear");
	UBlueprintMapLibrary_Map_Clear_Params params;

	
	params.TargetMap = TargetMap;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UBlueprintMapLibrary::Map_Add(TMap<int, int> TargetMap, int Key, int Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.BlueprintMapLibrary.Map_Add");
	UBlueprintMapLibrary_Map_Add_Params params;

	
	params.TargetMap = TargetMap;
	params.Key = Key;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UBlueprintPlatformLibrary::ScheduleLocalNotificationFromNow(int inSecondsFromNow, const struct FText& Title, const struct FText& Body, const struct FText& Action, const class FString& ActivationEvent) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationFromNow");
	UBlueprintPlatformLibrary_ScheduleLocalNotificationFromNow_Params params;

	params.inSecondsFromNow = inSecondsFromNow;
	params.Title = Title;
	params.Body = Body;
	params.Action = Action;
	params.ActivationEvent = ActivationEvent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UBlueprintPlatformLibrary::ScheduleLocalNotificationBadgeFromNow(int inSecondsFromNow, const class FString& ActivationEvent) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationBadgeFromNow");
	UBlueprintPlatformLibrary_ScheduleLocalNotificationBadgeFromNow_Params params;

	params.inSecondsFromNow = inSecondsFromNow;
	params.ActivationEvent = ActivationEvent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UBlueprintPlatformLibrary::ScheduleLocalNotificationBadgeAtTime(const struct FDateTime& FireDateTime, bool LocalTime, const class FString& ActivationEvent) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationBadgeAtTime");
	UBlueprintPlatformLibrary_ScheduleLocalNotificationBadgeAtTime_Params params;

	params.FireDateTime = FireDateTime;
	params.LocalTime = LocalTime;
	params.ActivationEvent = ActivationEvent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UBlueprintPlatformLibrary::ScheduleLocalNotificationAtTime(const struct FDateTime& FireDateTime, bool LocalTime, const struct FText& Title, const struct FText& Body, const struct FText& Action, const class FString& ActivationEvent) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationAtTime");
	UBlueprintPlatformLibrary_ScheduleLocalNotificationAtTime_Params params;

	params.FireDateTime = FireDateTime;
	params.LocalTime = LocalTime;
	params.Title = Title;
	params.Body = Body;
	params.Action = Action;
	params.ActivationEvent = ActivationEvent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UBlueprintPlatformLibrary::GetLaunchNotification(bool* NotificationLaunchedApp, class FString* ActivationEvent, int* FireDate) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.BlueprintPlatformLibrary.GetLaunchNotification");
	UBlueprintPlatformLibrary_GetLaunchNotification_Params params;

	params.NotificationLaunchedApp = NotificationLaunchedApp;
	params.ActivationEvent = *ActivationEvent;
	params.FireDate = *FireDate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UBlueprintPlatformLibrary::ClearAllLocalNotifications() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.BlueprintPlatformLibrary.ClearAllLocalNotifications");
	UBlueprintPlatformLibrary_ClearAllLocalNotifications_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UBlueprintPlatformLibrary::CancelLocalNotification(const class FString& ActivationEvent) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.BlueprintPlatformLibrary.CancelLocalNotification");
	UBlueprintPlatformLibrary_CancelLocalNotification_Params params;

	params.ActivationEvent = ActivationEvent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UBlueprintSetLibrary::SetSetPropertyByName(class UObject* Object, const struct FName& PropertyName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.BlueprintSetLibrary.SetSetPropertyByName");
	UBlueprintSetLibrary_SetSetPropertyByName_Params params;

	params.Object = Object;
	params.PropertyName = PropertyName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UBlueprintSetLibrary::Set_Union() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.BlueprintSetLibrary.Set_Union");
	UBlueprintSetLibrary_Set_Union_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UBlueprintSetLibrary::Set_ToArray(TArray<int>* Result) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.BlueprintSetLibrary.Set_ToArray");
	UBlueprintSetLibrary_Set_ToArray_Params params;

	params.Result = *Result;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UBlueprintSetLibrary::Set_RemoveItems(TArray<int> Items) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.BlueprintSetLibrary.Set_RemoveItems");
	UBlueprintSetLibrary_Set_RemoveItems_Params params;

	params.Items = Items;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UBlueprintSetLibrary::Set_Remove(int Item) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.BlueprintSetLibrary.Set_Remove");
	UBlueprintSetLibrary_Set_Remove_Params params;

	params.Item = Item;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UBlueprintSetLibrary::Set_Length() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.BlueprintSetLibrary.Set_Length");
	UBlueprintSetLibrary_Set_Length_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UBlueprintSetLibrary::Set_Intersection() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.BlueprintSetLibrary.Set_Intersection");
	UBlueprintSetLibrary_Set_Intersection_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UBlueprintSetLibrary::Set_Difference() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.BlueprintSetLibrary.Set_Difference");
	UBlueprintSetLibrary_Set_Difference_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UBlueprintSetLibrary::Set_Contains(int ItemToFind) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.BlueprintSetLibrary.Set_Contains");
	UBlueprintSetLibrary_Set_Contains_Params params;

	params.ItemToFind = ItemToFind;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UBlueprintSetLibrary::Set_Clear() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.BlueprintSetLibrary.Set_Clear");
	UBlueprintSetLibrary_Set_Clear_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UBlueprintSetLibrary::Set_AddItems(TArray<int> NewItems) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.BlueprintSetLibrary.Set_AddItems");
	UBlueprintSetLibrary_Set_AddItems_Params params;

	params.NewItems = NewItems;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UBlueprintSetLibrary::Set_Add(int NewItem) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.BlueprintSetLibrary.Set_Add");
	UBlueprintSetLibrary_Set_Add_Params params;

	params.NewItem = NewItem;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCameraAnimInst::Stop(bool bImmediate) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CameraAnimInst.Stop");
	UCameraAnimInst_Stop_Params params;

	params.bImmediate = bImmediate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCameraAnimInst::SetScale(float NewDuration) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CameraAnimInst.SetScale");
	UCameraAnimInst_SetScale_Params params;

	params.NewDuration = NewDuration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCameraAnimInst::SetDuration(float NewDuration) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CameraAnimInst.SetDuration");
	UCameraAnimInst_SetDuration_Params params;

	params.NewDuration = NewDuration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UCameraModifier::IsDisabled() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CameraModifier.IsDisabled");
	UCameraModifier_IsDisabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class AActor* UCameraModifier::GetViewTarget() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CameraModifier.GetViewTarget");
	UCameraModifier_GetViewTarget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UCameraModifier::EnableModifier() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CameraModifier.EnableModifier");
	UCameraModifier_EnableModifier_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCameraModifier::DisableModifier(bool bImmediate) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CameraModifier.DisableModifier");
	UCameraModifier_DisableModifier_Params params;

	params.bImmediate = bImmediate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCameraModifier::BlueprintModifyPostProcess(float DeltaTime, float* PostProcessBlendWeight, struct FPostProcessSettings* PostProcessSettings) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CameraModifier.BlueprintModifyPostProcess");
	UCameraModifier_BlueprintModifyPostProcess_Params params;

	params.DeltaTime = DeltaTime;
	params.PostProcessBlendWeight = *PostProcessBlendWeight;
	params.PostProcessSettings = *PostProcessSettings;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCameraModifier::BlueprintModifyCamera(float DeltaTime, const struct FVector& ViewLocation, const struct FRotator& ViewRotation, float FOV, struct FVector* NewViewLocation, struct FRotator* NewViewRotation, float* NewFOV) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CameraModifier.BlueprintModifyCamera");
	UCameraModifier_BlueprintModifyCamera_Params params;

	params.DeltaTime = DeltaTime;
	params.ViewLocation = ViewLocation;
	params.ViewRotation = ViewRotation;
	params.FOV = FOV;
	params.NewViewLocation = *NewViewLocation;
	params.NewViewRotation = *NewViewRotation;
	params.NewFOV = *NewFOV;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCameraShake::ReceiveStopShake(bool bImmediately) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CameraShake.ReceiveStopShake");
	UCameraShake_ReceiveStopShake_Params params;

	params.bImmediately = bImmediately;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCameraShake::ReceivePlayShake(float Scale) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CameraShake.ReceivePlayShake");
	UCameraShake_ReceivePlayShake_Params params;

	params.Scale = Scale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UCameraShake::ReceiveIsFinished() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CameraShake.ReceiveIsFinished");
	UCameraShake_ReceiveIsFinished_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UCameraShake::BlueprintUpdateCameraShake(float DeltaTime, float Alpha, const struct FMinimalViewInfo& POV, struct FMinimalViewInfo* ModifiedPOV) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CameraShake.BlueprintUpdateCameraShake");
	UCameraShake_BlueprintUpdateCameraShake_Params params;

	params.DeltaTime = DeltaTime;
	params.Alpha = Alpha;
	params.POV = POV;
	params.ModifiedPOV = *ModifiedPOV;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

struct FVector2D UCanvas::K2_TextSize(class UFont* RenderFont, const class FString& RenderText, const struct FVector2D& Scale) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Canvas.K2_TextSize");
	UCanvas_K2_TextSize_Params params;

	params.RenderFont = RenderFont;
	params.RenderText = RenderText;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector2D UCanvas::K2_StrLen(class UFont* RenderFont, const class FString& RenderText) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Canvas.K2_StrLen");
	UCanvas_K2_StrLen_Params params;

	params.RenderFont = RenderFont;
	params.RenderText = RenderText;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UCanvas::K2_Project(const struct FVector& WorldLocation) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Canvas.K2_Project");
	UCanvas_K2_Project_Params params;

	params.WorldLocation = WorldLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UCanvas::K2_DrawTriangle(class UTexture* RenderTexture, TArray<struct FCanvasUVTri> Triangles) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Canvas.K2_DrawTriangle");
	UCanvas_K2_DrawTriangle_Params params;

	params.RenderTexture = RenderTexture;
	params.Triangles = Triangles;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCanvas::K2_DrawTexture(class UTexture* RenderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, const struct FLinearColor& RenderColor, TEnumAsByte<EBlendMode> BlendMode, float Rotation, const struct FVector2D& PivotPoint) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Canvas.K2_DrawTexture");
	UCanvas_K2_DrawTexture_Params params;

	params.RenderTexture = RenderTexture;
	params.ScreenPosition = ScreenPosition;
	params.ScreenSize = ScreenSize;
	params.CoordinatePosition = CoordinatePosition;
	params.CoordinateSize = CoordinateSize;
	params.RenderColor = RenderColor;
	params.BlendMode = BlendMode;
	params.Rotation = Rotation;
	params.PivotPoint = PivotPoint;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCanvas::K2_DrawText(class UFont* RenderFont, const class FString& RenderText, const struct FVector2D& ScreenPosition, const struct FLinearColor& RenderColor, float Kerning, const struct FLinearColor& ShadowColor, const struct FVector2D& ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, const struct FLinearColor& OutlineColor) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Canvas.K2_DrawText");
	UCanvas_K2_DrawText_Params params;

	params.RenderFont = RenderFont;
	params.RenderText = RenderText;
	params.ScreenPosition = ScreenPosition;
	params.RenderColor = RenderColor;
	params.Kerning = Kerning;
	params.ShadowColor = ShadowColor;
	params.ShadowOffset = ShadowOffset;
	params.bCentreX = bCentreX;
	params.bCentreY = bCentreY;
	params.bOutlined = bOutlined;
	params.OutlineColor = OutlineColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCanvas::K2_DrawPolygon(class UTexture* RenderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& Radius, int NumberOfSides, const struct FLinearColor& RenderColor) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Canvas.K2_DrawPolygon");
	UCanvas_K2_DrawPolygon_Params params;

	params.RenderTexture = RenderTexture;
	params.ScreenPosition = ScreenPosition;
	params.Radius = Radius;
	params.NumberOfSides = NumberOfSides;
	params.RenderColor = RenderColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCanvas::K2_DrawMaterialTriangle(class UMaterialInterface* RenderMaterial, TArray<struct FCanvasUVTri> Triangles) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Canvas.K2_DrawMaterialTriangle");
	UCanvas_K2_DrawMaterialTriangle_Params params;

	params.RenderMaterial = RenderMaterial;
	params.Triangles = Triangles;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCanvas::K2_DrawMaterial(class UMaterialInterface* RenderMaterial, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, float Rotation, const struct FVector2D& PivotPoint) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Canvas.K2_DrawMaterial");
	UCanvas_K2_DrawMaterial_Params params;

	params.RenderMaterial = RenderMaterial;
	params.ScreenPosition = ScreenPosition;
	params.ScreenSize = ScreenSize;
	params.CoordinatePosition = CoordinatePosition;
	params.CoordinateSize = CoordinateSize;
	params.Rotation = Rotation;
	params.PivotPoint = PivotPoint;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCanvas::K2_DrawLine(const struct FVector2D& ScreenPositionA, const struct FVector2D& ScreenPositionB, float Thickness, const struct FLinearColor& RenderColor) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Canvas.K2_DrawLine");
	UCanvas_K2_DrawLine_Params params;

	params.ScreenPositionA = ScreenPositionA;
	params.ScreenPositionB = ScreenPositionB;
	params.Thickness = Thickness;
	params.RenderColor = RenderColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCanvas::K2_DrawBox(const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, float Thickness, const struct FLinearColor& RenderColor) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Canvas.K2_DrawBox");
	UCanvas_K2_DrawBox_Params params;

	params.ScreenPosition = ScreenPosition;
	params.ScreenSize = ScreenSize;
	params.Thickness = Thickness;
	params.RenderColor = RenderColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCanvas::K2_DrawBorder(class UTexture* BorderTexture, class UTexture* BackgroundTexture, class UTexture* LeftBorderTexture, class UTexture* RightBorderTexture, class UTexture* TopBorderTexture, class UTexture* BottomBorderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, const struct FLinearColor& RenderColor, const struct FVector2D& BorderScale, const struct FVector2D& BackgroundScale, float Rotation, const struct FVector2D& PivotPoint, const struct FVector2D& CornerSize) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Canvas.K2_DrawBorder");
	UCanvas_K2_DrawBorder_Params params;

	params.BorderTexture = BorderTexture;
	params.BackgroundTexture = BackgroundTexture;
	params.LeftBorderTexture = LeftBorderTexture;
	params.RightBorderTexture = RightBorderTexture;
	params.TopBorderTexture = TopBorderTexture;
	params.BottomBorderTexture = BottomBorderTexture;
	params.ScreenPosition = ScreenPosition;
	params.ScreenSize = ScreenSize;
	params.CoordinatePosition = CoordinatePosition;
	params.CoordinateSize = CoordinateSize;
	params.RenderColor = RenderColor;
	params.BorderScale = BorderScale;
	params.BackgroundScale = BackgroundScale;
	params.Rotation = Rotation;
	params.PivotPoint = PivotPoint;
	params.CornerSize = CornerSize;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCanvas::K2_Deproject(const struct FVector2D& ScreenPosition, struct FVector* WorldOrigin, struct FVector* WorldDirection) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Canvas.K2_Deproject");
	UCanvas_K2_Deproject_Params params;

	params.ScreenPosition = ScreenPosition;
	params.WorldOrigin = *WorldOrigin;
	params.WorldDirection = *WorldDirection;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCanvasRenderTarget2D::UpdateResource() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CanvasRenderTarget2D.UpdateResource");
	UCanvasRenderTarget2D_UpdateResource_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCanvasRenderTarget2D::ReceiveUpdate(class UCanvas* Canvas, int Width, int Height) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CanvasRenderTarget2D.ReceiveUpdate");
	UCanvasRenderTarget2D_ReceiveUpdate_Params params;

	params.Canvas = Canvas;
	params.Width = Width;
	params.Height = Height;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCanvasRenderTarget2D::GetSize(int* Width, int* Height) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CanvasRenderTarget2D.GetSize");
	UCanvasRenderTarget2D_GetSize_Params params;

	params.Width = *Width;
	params.Height = *Height;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

class UCanvasRenderTarget2D* UCanvasRenderTarget2D::CreateCanvasRenderTarget2D(class UObject* WorldContextObject, class UClass* CanvasRenderTarget2DClass, int Width, int Height) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CanvasRenderTarget2D.CreateCanvasRenderTarget2D");
	UCanvasRenderTarget2D_CreateCanvasRenderTarget2D_Params params;

	params.WorldContextObject = WorldContextObject;
	params.CanvasRenderTarget2DClass = CanvasRenderTarget2DClass;
	params.Width = Width;
	params.Height = Height;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UCurveBase::GetValueRange(float* MinValue, float* MaxValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CurveBase.GetValueRange");
	UCurveBase_GetValueRange_Params params;

	params.MinValue = *MinValue;
	params.MaxValue = *MaxValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UCurveBase::GetTimeRange(float* MinTime, float* MaxTime) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CurveBase.GetTimeRange");
	UCurveBase_GetTimeRange_Params params;

	params.MinTime = *MinTime;
	params.MaxTime = *MaxTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

float UCurveFloat::GetFloatValue(float InTime) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CurveFloat.GetFloatValue");
	UCurveFloat_GetFloatValue_Params params;

	params.InTime = InTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FLinearColor UCurveLinearColor::GetLinearColorValue(float InTime) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CurveLinearColor.GetLinearColorValue");
	UCurveLinearColor_GetLinearColorValue_Params params;

	params.InTime = InTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UTexture2D::Blueprint_GetSizeY() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Texture2D.Blueprint_GetSizeY");
	UTexture2D_Blueprint_GetSizeY_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UTexture2D::Blueprint_GetSizeX() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Texture2D.Blueprint_GetSizeX");
	UTexture2D_Blueprint_GetSizeX_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UCurveLinearColorAtlas::GetCurvePosition(class UCurveLinearColor* InCurve, float* Position) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CurveLinearColorAtlas.GetCurvePosition");
	UCurveLinearColorAtlas_GetCurvePosition_Params params;

	params.InCurve = InCurve;
	params.Position = *Position;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UCurveLinearColorAtlas::GetCurveIndex(class UCurveLinearColor* InCurve, int* Index) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CurveLinearColorAtlas.GetCurveIndex");
	UCurveLinearColorAtlas_GetCurveIndex_Params params;

	params.InCurve = InCurve;
	params.Index = *Index;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UCurveSourceInterface::GetCurveValue(const struct FName& CurveName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CurveSourceInterface.GetCurveValue");
	UCurveSourceInterface_GetCurveValue_Params params;

	params.CurveName = CurveName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UCurveSourceInterface::GetCurves(TArray<struct FNamedCurveValue>* OutValues) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CurveSourceInterface.GetCurves");
	UCurveSourceInterface_GetCurves_Params params;

	params.OutValues = *OutValues;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

struct FName UCurveSourceInterface::GetBindingName() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CurveSourceInterface.GetBindingName");
	UCurveSourceInterface_GetBindingName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UCurveVector::GetVectorValue(float InTime) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.CurveVector.GetVectorValue");
	UCurveVector_GetVectorValue_Params params;

	params.InTime = InTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UDataTableFunctionLibrary::GetRowHandleSummaryString(const struct FDataTableRowHandle& RowHandle) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.DataTableFunctionLibrary.GetRowHandleSummaryString");
	UDataTableFunctionLibrary_GetRowHandleSummaryString_Params params;

	params.RowHandle = RowHandle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UDataTableFunctionLibrary::GetDataTableRowNames(class UDataTable* Table, TArray<struct FName>* OutRowNames) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.DataTableFunctionLibrary.GetDataTableRowNames");
	UDataTableFunctionLibrary_GetDataTableRowNames_Params params;

	params.Table = Table;
	params.OutRowNames = *OutRowNames;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UDataTableFunctionLibrary::GetDataTableRowFromName(class UDataTable* Table, const struct FName& RowName, struct FTableRowBase* OutRow) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.DataTableFunctionLibrary.GetDataTableRowFromName");
	UDataTableFunctionLibrary_GetDataTableRowFromName_Params params;

	params.Table = Table;
	params.RowName = RowName;
	params.OutRow = *OutRow;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UDataTableFunctionLibrary::GetDataTableRowFromHandle(const struct FDataTableRowHandle& RowHandle, class UScriptStruct* RequiredDataTableStruct, struct FTableRowBase* OutRow) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.DataTableFunctionLibrary.GetDataTableRowFromHandle");
	UDataTableFunctionLibrary_GetDataTableRowFromHandle_Params params;

	params.RowHandle = RowHandle;
	params.RequiredDataTableStruct = RequiredDataTableStruct;
	params.OutRow = *OutRow;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UDataTableFunctionLibrary::EvaluateCurveTableRow(class UCurveTable* CurveTable, const struct FName& RowName, float InXY, const class FString& ContextString, TEnumAsByte<EEvaluateCurveTableResult>* OutResult, float* OutXY) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.DataTableFunctionLibrary.EvaluateCurveTableRow");
	UDataTableFunctionLibrary_EvaluateCurveTableRow_Params params;

	params.CurveTable = CurveTable;
	params.RowName = RowName;
	params.InXY = InXY;
	params.ContextString = ContextString;
	params.OutResult = *OutResult;
	params.OutXY = *OutXY;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ADebugCameraController::ToggleDisplay() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.DebugCameraController.ToggleDisplay");
	ADebugCameraController_ToggleDisplay_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ADebugCameraController::ShowDebugSelectedInfo() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.DebugCameraController.ShowDebugSelectedInfo");
	ADebugCameraController_ShowDebugSelectedInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ADebugCameraController::SetPawnMovementSpeedScale(float NewSpeedScale) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.DebugCameraController.SetPawnMovementSpeedScale");
	ADebugCameraController_SetPawnMovementSpeedScale_Params params;

	params.NewSpeedScale = NewSpeedScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ADebugCameraController::ReceiveOnDeactivate(class APlayerController* RestoredPC) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.DebugCameraController.ReceiveOnDeactivate");
	ADebugCameraController_ReceiveOnDeactivate_Params params;

	params.RestoredPC = RestoredPC;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ADebugCameraController::ReceiveOnActorSelected(class AActor* NewSelectedActor, const struct FVector& SelectHitLocation, const struct FVector& SelectHitNormal, const struct FHitResult& Hit) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.DebugCameraController.ReceiveOnActorSelected");
	ADebugCameraController_ReceiveOnActorSelected_Params params;

	params.NewSelectedActor = NewSelectedActor;
	params.SelectHitLocation = SelectHitLocation;
	params.SelectHitNormal = SelectHitNormal;
	params.Hit = Hit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ADebugCameraController::ReceiveOnActivate(class APlayerController* OriginalPC) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.DebugCameraController.ReceiveOnActivate");
	ADebugCameraController_ReceiveOnActivate_Params params;

	params.OriginalPC = OriginalPC;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

class AActor* ADebugCameraController::GetSelectedActor() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.DebugCameraController.GetSelectedActor");
	ADebugCameraController_GetSelectedActor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void ADecalActor::SetDecalMaterial(class UMaterialInterface* NewDecalMaterial) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.DecalActor.SetDecalMaterial");
	ADecalActor_SetDecalMaterial_Params params;

	params.NewDecalMaterial = NewDecalMaterial;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

class UMaterialInterface* ADecalActor::GetDecalMaterial() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.DecalActor.GetDecalMaterial");
	ADecalActor_GetDecalMaterial_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UMaterialInstanceDynamic* ADecalActor::CreateDynamicMaterialInstance() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.DecalActor.CreateDynamicMaterialInstance");
	ADecalActor_CreateDynamicMaterialInstance_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UDecalComponent::SetSortOrder(int Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.DecalComponent.SetSortOrder");
	UDecalComponent_SetSortOrder_Params params;

	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UDecalComponent::SetSecondaryChannel(bool bUseChannel) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.DecalComponent.SetSecondaryChannel");
	UDecalComponent_SetSecondaryChannel_Params params;

	params.bUseChannel = bUseChannel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UDecalComponent::SetFadeScreenSize(float NewFadeScreenSize) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.DecalComponent.SetFadeScreenSize");
	UDecalComponent_SetFadeScreenSize_Params params;

	params.NewFadeScreenSize = NewFadeScreenSize;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UDecalComponent::SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.DecalComponent.SetFadeOut");
	UDecalComponent_SetFadeOut_Params params;

	params.StartDelay = StartDelay;
	params.Duration = Duration;
	params.DestroyOwnerAfterFade = DestroyOwnerAfterFade;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UDecalComponent::SetDecalMaterial(class UMaterialInterface* NewDecalMaterial) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.DecalComponent.SetDecalMaterial");
	UDecalComponent_SetDecalMaterial_Params params;

	params.NewDecalMaterial = NewDecalMaterial;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UDecalComponent::IsFadingOut() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.DecalComponent.IsFadingOut");
	UDecalComponent_IsFadingOut_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UDecalComponent::GetRemainingLifeSpan() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.DecalComponent.GetRemainingLifeSpan");
	UDecalComponent_GetRemainingLifeSpan_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UDecalComponent::GetFadeStartDelay() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.DecalComponent.GetFadeStartDelay");
	UDecalComponent_GetFadeStartDelay_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UDecalComponent::GetFadeDuration() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.DecalComponent.GetFadeDuration");
	UDecalComponent_GetFadeDuration_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UMaterialInterface* UDecalComponent::GetDecalMaterial() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.DecalComponent.GetDecalMaterial");
	UDecalComponent_GetDecalMaterial_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void ADefaultPawn::TurnAtRate(float Rate) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.DefaultPawn.TurnAtRate");
	ADefaultPawn_TurnAtRate_Params params;

	params.Rate = Rate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ADefaultPawn::MoveUp_World(float Val) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.DefaultPawn.MoveUp_World");
	ADefaultPawn_MoveUp_World_Params params;

	params.Val = Val;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ADefaultPawn::MoveRight(float Val) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.DefaultPawn.MoveRight");
	ADefaultPawn_MoveRight_Params params;

	params.Val = Val;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ADefaultPawn::MoveForward(float Val) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.DefaultPawn.MoveForward");
	ADefaultPawn_MoveForward_Params params;

	params.Val = Val;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ADefaultPawn::LookUpAtRate(float Rate) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.DefaultPawn.LookUpAtRate");
	ADefaultPawn_LookUpAtRate_Params params;

	params.Rate = Rate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APhysicsVolume::OnActorLeftVolume(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsVolume.OnActorLeftVolume");
	APhysicsVolume_OnActorLeftVolume_Params params;

	params.OverlappedComponent = OverlappedComponent;
	params.OtherActor = OtherActor;
	params.OtherComp = OtherComp;
	params.OtherBodyIndex = OtherBodyIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APhysicsVolume::OnActorEnteredVolume(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& OverlapInfo) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsVolume.OnActorEnteredVolume");
	APhysicsVolume_OnActorEnteredVolume_Params params;

	params.OverlappedComp = OverlappedComp;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.OtherBodyIndex = OtherBodyIndex;
	params.bFromSweep = bFromSweep;
	params.OverlapInfo = OverlapInfo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ALight::ToggleEnabled() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Light.ToggleEnabled");
	ALight_ToggleEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ALight::SetLightFunctionScale(const struct FVector& NewLightFunctionScale) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Light.SetLightFunctionScale");
	ALight_SetLightFunctionScale_Params params;

	params.NewLightFunctionScale = NewLightFunctionScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ALight::SetLightFunctionMaterial(class UMaterialInterface* NewLightFunctionMaterial) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Light.SetLightFunctionMaterial");
	ALight_SetLightFunctionMaterial_Params params;

	params.NewLightFunctionMaterial = NewLightFunctionMaterial;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ALight::SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Light.SetLightFunctionFadeDistance");
	ALight_SetLightFunctionFadeDistance_Params params;

	params.NewLightFunctionFadeDistance = NewLightFunctionFadeDistance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ALight::SetLightColor(const struct FLinearColor& NewLightColor) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Light.SetLightColor");
	ALight_SetLightColor_Params params;

	params.NewLightColor = NewLightColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ALight::SetEnabled(bool bSetEnabled) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Light.SetEnabled");
	ALight_SetEnabled_Params params;

	params.bSetEnabled = bSetEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ALight::SetCastShadows(bool bNewValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Light.SetCastShadows");
	ALight_SetCastShadows_Params params;

	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ALight::SetBrightness(float NewBrightness) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Light.SetBrightness");
	ALight_SetBrightness_Params params;

	params.NewBrightness = NewBrightness;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ALight::SetAffectTranslucentLighting(bool bNewValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Light.SetAffectTranslucentLighting");
	ALight_SetAffectTranslucentLighting_Params params;

	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ALight::OnRep_bEnabled() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Light.OnRep_bEnabled");
	ALight_OnRep_bEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool ALight::IsEnabled() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Light.IsEnabled");
	ALight_IsEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FLinearColor ALight::GetLightColor() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Light.GetLightColor");
	ALight_GetLightColor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float ALight::GetBrightness() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Light.GetBrightness");
	ALight_GetBrightness_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void ULightComponentBase::SetCastVolumetricShadow(bool bNewValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.LightComponentBase.SetCastVolumetricShadow");
	ULightComponentBase_SetCastVolumetricShadow_Params params;

	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ULightComponentBase::SetCastShadows(bool bNewValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.LightComponentBase.SetCastShadows");
	ULightComponentBase_SetCastShadows_Params params;

	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

struct FLinearColor ULightComponentBase::GetLightColor() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.LightComponentBase.GetLightColor");
	ULightComponentBase_GetLightColor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void ULightComponent::SetVolumetricScatteringIntensity(float NewIntensity) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.LightComponent.SetVolumetricScatteringIntensity");
	ULightComponent_SetVolumetricScatteringIntensity_Params params;

	params.NewIntensity = NewIntensity;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ULightComponent::SetTransmission(bool bNewValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.LightComponent.SetTransmission");
	ULightComponent_SetTransmission_Params params;

	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ULightComponent::SetTemperature(float NewTemperature) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.LightComponent.SetTemperature");
	ULightComponent_SetTemperature_Params params;

	params.NewTemperature = NewTemperature;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ULightComponent::SetShadowBias(float NewValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.LightComponent.SetShadowBias");
	ULightComponent_SetShadowBias_Params params;

	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ULightComponent::SetLightFunctionScale(const struct FVector& NewLightFunctionScale) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.LightComponent.SetLightFunctionScale");
	ULightComponent_SetLightFunctionScale_Params params;

	params.NewLightFunctionScale = NewLightFunctionScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ULightComponent::SetLightFunctionMaterial(class UMaterialInterface* NewLightFunctionMaterial) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.LightComponent.SetLightFunctionMaterial");
	ULightComponent_SetLightFunctionMaterial_Params params;

	params.NewLightFunctionMaterial = NewLightFunctionMaterial;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ULightComponent::SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.LightComponent.SetLightFunctionFadeDistance");
	ULightComponent_SetLightFunctionFadeDistance_Params params;

	params.NewLightFunctionFadeDistance = NewLightFunctionFadeDistance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ULightComponent::SetLightFunctionDisabledBrightness(float NewValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.LightComponent.SetLightFunctionDisabledBrightness");
	ULightComponent_SetLightFunctionDisabledBrightness_Params params;

	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ULightComponent::SetLightColor(const struct FLinearColor& NewLightColor, bool bSRGB) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.LightComponent.SetLightColor");
	ULightComponent_SetLightColor_Params params;

	params.NewLightColor = NewLightColor;
	params.bSRGB = bSRGB;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ULightComponent::SetIntensity(float NewIntensity) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.LightComponent.SetIntensity");
	ULightComponent_SetIntensity_Params params;

	params.NewIntensity = NewIntensity;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ULightComponent::SetIndirectLightingIntensity(float NewIntensity) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.LightComponent.SetIndirectLightingIntensity");
	ULightComponent_SetIndirectLightingIntensity_Params params;

	params.NewIntensity = NewIntensity;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ULightComponent::SetIESTexture(class UTextureLightProfile* NewValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.LightComponent.SetIESTexture");
	ULightComponent_SetIESTexture_Params params;

	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ULightComponent::SetForceCachedShadowsForMovablePrimitives(bool bNewValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.LightComponent.SetForceCachedShadowsForMovablePrimitives");
	ULightComponent_SetForceCachedShadowsForMovablePrimitives_Params params;

	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ULightComponent::SetEnableLightShaftBloom(bool bNewValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.LightComponent.SetEnableLightShaftBloom");
	ULightComponent_SetEnableLightShaftBloom_Params params;

	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ULightComponent::SetBloomTint(const struct FColor& NewValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.LightComponent.SetBloomTint");
	ULightComponent_SetBloomTint_Params params;

	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ULightComponent::SetBloomThreshold(float NewValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.LightComponent.SetBloomThreshold");
	ULightComponent_SetBloomThreshold_Params params;

	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ULightComponent::SetBloomScale(float NewValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.LightComponent.SetBloomScale");
	ULightComponent_SetBloomScale_Params params;

	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ULightComponent::SetAffectTranslucentLighting(bool bNewValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.LightComponent.SetAffectTranslucentLighting");
	ULightComponent_SetAffectTranslucentLighting_Params params;

	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ULightComponent::SetAffectDynamicIndirectLighting(bool bNewValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.LightComponent.SetAffectDynamicIndirectLighting");
	ULightComponent_SetAffectDynamicIndirectLighting_Params params;

	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UDirectionalLightComponent::SetShadowDistanceFadeoutFraction(float NewValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.DirectionalLightComponent.SetShadowDistanceFadeoutFraction");
	UDirectionalLightComponent_SetShadowDistanceFadeoutFraction_Params params;

	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UDirectionalLightComponent::SetOcclusionMaskDarkness(float NewValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.DirectionalLightComponent.SetOcclusionMaskDarkness");
	UDirectionalLightComponent_SetOcclusionMaskDarkness_Params params;

	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UDirectionalLightComponent::SetLightShaftOverrideDirection(const struct FVector& NewValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.DirectionalLightComponent.SetLightShaftOverrideDirection");
	UDirectionalLightComponent_SetLightShaftOverrideDirection_Params params;

	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UDirectionalLightComponent::SetEnableLightShaftOcclusion(bool bNewValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.DirectionalLightComponent.SetEnableLightShaftOcclusion");
	UDirectionalLightComponent_SetEnableLightShaftOcclusion_Params params;

	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UDirectionalLightComponent::SetDynamicShadowDistanceStationaryLight(float NewValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.DirectionalLightComponent.SetDynamicShadowDistanceStationaryLight");
	UDirectionalLightComponent_SetDynamicShadowDistanceStationaryLight_Params params;

	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UDirectionalLightComponent::SetDynamicShadowDistanceMovableLight(float NewValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.DirectionalLightComponent.SetDynamicShadowDistanceMovableLight");
	UDirectionalLightComponent_SetDynamicShadowDistanceMovableLight_Params params;

	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UDirectionalLightComponent::SetDynamicShadowCascades(int NewValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.DirectionalLightComponent.SetDynamicShadowCascades");
	UDirectionalLightComponent_SetDynamicShadowCascades_Params params;

	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UDirectionalLightComponent::SetCascadeTransitionFraction(float NewValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.DirectionalLightComponent.SetCascadeTransitionFraction");
	UDirectionalLightComponent_SetCascadeTransitionFraction_Params params;

	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UDirectionalLightComponent::SetCascadeDistributionExponent(float NewValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.DirectionalLightComponent.SetCascadeDistributionExponent");
	UDirectionalLightComponent_SetCascadeDistributionExponent_Params params;

	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AEmitter::ToggleActive() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Emitter.ToggleActive");
	AEmitter_ToggleActive_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AEmitter::SetVectorParameter(const struct FName& ParameterName, const struct FVector& Param) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Emitter.SetVectorParameter");
	AEmitter_SetVectorParameter_Params params;

	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AEmitter::SetTemplate(class UParticleSystem* NewTemplate) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Emitter.SetTemplate");
	AEmitter_SetTemplate_Params params;

	params.NewTemplate = NewTemplate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AEmitter::SetMaterialParameter(const struct FName& ParameterName, class UMaterialInterface* Param) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Emitter.SetMaterialParameter");
	AEmitter_SetMaterialParameter_Params params;

	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AEmitter::SetFloatParameter(const struct FName& ParameterName, float Param) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Emitter.SetFloatParameter");
	AEmitter_SetFloatParameter_Params params;

	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AEmitter::SetColorParameter(const struct FName& ParameterName, const struct FLinearColor& Param) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Emitter.SetColorParameter");
	AEmitter_SetColorParameter_Params params;

	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AEmitter::SetActorParameter(const struct FName& ParameterName, class AActor* Param) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Emitter.SetActorParameter");
	AEmitter_SetActorParameter_Params params;

	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AEmitter::OnRep_bCurrentlyActive() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Emitter.OnRep_bCurrentlyActive");
	AEmitter_OnRep_bCurrentlyActive_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AEmitter::OnParticleSystemFinished(class UParticleSystemComponent* FinishedComponent) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Emitter.OnParticleSystemFinished");
	AEmitter_OnParticleSystemFinished_Params params;

	params.FinishedComponent = FinishedComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool AEmitter::IsActive() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Emitter.IsActive");
	AEmitter_IsActive_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void AEmitter::Deactivate() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Emitter.Deactivate");
	AEmitter_Deactivate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AEmitter::Activate() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Emitter.Activate");
	AEmitter_Activate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AExponentialHeightFog::OnRep_bEnabled() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ExponentialHeightFog.OnRep_bEnabled");
	AExponentialHeightFog_OnRep_bEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UExponentialHeightFogComponent::SetVolumetricFogScatteringDistribution(float NewValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ExponentialHeightFogComponent.SetVolumetricFogScatteringDistribution");
	UExponentialHeightFogComponent_SetVolumetricFogScatteringDistribution_Params params;

	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UExponentialHeightFogComponent::SetVolumetricFogExtinctionScale(float NewValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ExponentialHeightFogComponent.SetVolumetricFogExtinctionScale");
	UExponentialHeightFogComponent_SetVolumetricFogExtinctionScale_Params params;

	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UExponentialHeightFogComponent::SetVolumetricFogEmissive(const struct FLinearColor& NewValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ExponentialHeightFogComponent.SetVolumetricFogEmissive");
	UExponentialHeightFogComponent_SetVolumetricFogEmissive_Params params;

	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UExponentialHeightFogComponent::SetVolumetricFogDistance(float NewValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ExponentialHeightFogComponent.SetVolumetricFogDistance");
	UExponentialHeightFogComponent_SetVolumetricFogDistance_Params params;

	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UExponentialHeightFogComponent::SetVolumetricFogAlbedo(const struct FColor& NewValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ExponentialHeightFogComponent.SetVolumetricFogAlbedo");
	UExponentialHeightFogComponent_SetVolumetricFogAlbedo_Params params;

	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UExponentialHeightFogComponent::SetVolumetricFog(bool bNewValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ExponentialHeightFogComponent.SetVolumetricFog");
	UExponentialHeightFogComponent_SetVolumetricFog_Params params;

	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UExponentialHeightFogComponent::SetStartDistance(float Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ExponentialHeightFogComponent.SetStartDistance");
	UExponentialHeightFogComponent_SetStartDistance_Params params;

	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UExponentialHeightFogComponent::SetNonDirectionalInscatteringColorDistance(float Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ExponentialHeightFogComponent.SetNonDirectionalInscatteringColorDistance");
	UExponentialHeightFogComponent_SetNonDirectionalInscatteringColorDistance_Params params;

	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UExponentialHeightFogComponent::SetInscatteringTextureTint(const struct FLinearColor& Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ExponentialHeightFogComponent.SetInscatteringTextureTint");
	UExponentialHeightFogComponent_SetInscatteringTextureTint_Params params;

	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UExponentialHeightFogComponent::SetInscatteringColorCubemapAngle(float Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ExponentialHeightFogComponent.SetInscatteringColorCubemapAngle");
	UExponentialHeightFogComponent_SetInscatteringColorCubemapAngle_Params params;

	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UExponentialHeightFogComponent::SetInscatteringColorCubemap(class UTextureCube* Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ExponentialHeightFogComponent.SetInscatteringColorCubemap");
	UExponentialHeightFogComponent_SetInscatteringColorCubemap_Params params;

	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UExponentialHeightFogComponent::SetFullyDirectionalInscatteringColorDistance(float Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ExponentialHeightFogComponent.SetFullyDirectionalInscatteringColorDistance");
	UExponentialHeightFogComponent_SetFullyDirectionalInscatteringColorDistance_Params params;

	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UExponentialHeightFogComponent::SetFogMaxOpacity(float Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ExponentialHeightFogComponent.SetFogMaxOpacity");
	UExponentialHeightFogComponent_SetFogMaxOpacity_Params params;

	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UExponentialHeightFogComponent::SetFogInscatteringColor(const struct FLinearColor& Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ExponentialHeightFogComponent.SetFogInscatteringColor");
	UExponentialHeightFogComponent_SetFogInscatteringColor_Params params;

	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UExponentialHeightFogComponent::SetFogHeightFalloff(float Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ExponentialHeightFogComponent.SetFogHeightFalloff");
	UExponentialHeightFogComponent_SetFogHeightFalloff_Params params;

	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UExponentialHeightFogComponent::SetFogDensity(float Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ExponentialHeightFogComponent.SetFogDensity");
	UExponentialHeightFogComponent_SetFogDensity_Params params;

	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UExponentialHeightFogComponent::SetFogCutoffDistance(float Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ExponentialHeightFogComponent.SetFogCutoffDistance");
	UExponentialHeightFogComponent_SetFogCutoffDistance_Params params;

	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UExponentialHeightFogComponent::SetDirectionalInscatteringStartDistance(float Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringStartDistance");
	UExponentialHeightFogComponent_SetDirectionalInscatteringStartDistance_Params params;

	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UExponentialHeightFogComponent::SetDirectionalInscatteringExponent(float Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringExponent");
	UExponentialHeightFogComponent_SetDirectionalInscatteringExponent_Params params;

	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UExponentialHeightFogComponent::SetDirectionalInscatteringColor(const struct FLinearColor& Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringColor");
	UExponentialHeightFogComponent_SetDirectionalInscatteringColor_Params params;

	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UExporter::RunAssetExportTasks(TArray<class UAssetExportTask*> ExportTasks) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Exporter.RunAssetExportTasks");
	UExporter_RunAssetExportTasks_Params params;

	params.ExportTasks = ExportTasks;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UExporter::RunAssetExportTask(class UAssetExportTask* Task) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.Exporter.RunAssetExportTask");
	UExporter_RunAssetExportTask_Params params;

	params.Task = Task;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UForceFeedbackComponent::Stop() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ForceFeedbackComponent.Stop");
	UForceFeedbackComponent_Stop_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UForceFeedbackComponent::SetIntensityMultiplier(float NewIntensityMultiplier) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ForceFeedbackComponent.SetIntensityMultiplier");
	UForceFeedbackComponent_SetIntensityMultiplier_Params params;

	params.NewIntensityMultiplier = NewIntensityMultiplier;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UForceFeedbackComponent::SetForceFeedbackEffect(class UForceFeedbackEffect* NewForceFeedbackEffect) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ForceFeedbackComponent.SetForceFeedbackEffect");
	UForceFeedbackComponent_SetForceFeedbackEffect_Params params;

	params.NewForceFeedbackEffect = NewForceFeedbackEffect;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UForceFeedbackComponent::Play(float StartTime) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ForceFeedbackComponent.Play");
	UForceFeedbackComponent_Play_Params params;

	params.StartTime = StartTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UForceFeedbackComponent::BP_GetAttenuationSettingsToApply(struct FForceFeedbackAttenuationSettings* OutAttenuationSettings) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ForceFeedbackComponent.BP_GetAttenuationSettingsToApply");
	UForceFeedbackComponent_BP_GetAttenuationSettingsToApply_Params params;

	params.OutAttenuationSettings = *OutAttenuationSettings;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UForceFeedbackComponent::AdjustAttenuation(const struct FForceFeedbackAttenuationSettings& InAttenuationSettings) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ForceFeedbackComponent.AdjustAttenuation");
	UForceFeedbackComponent_AdjustAttenuation_Params params;

	params.InAttenuationSettings = InAttenuationSettings;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameObjectPoolManagerExt::OnComponentUnregistered(class UActorComponent* Component) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameObjectPoolManagerExt.OnComponentUnregistered");
	UGameObjectPoolManagerExt_OnComponentUnregistered_Params params;

	params.Component = Component;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameplayStatics::UnloadStreamLevel(class UObject* WorldContextObject, const struct FName& LevelName, const struct FLatentActionInfo& LatentInfo, bool bShouldBlockOnUnload) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.UnloadStreamLevel");
	UGameplayStatics_UnloadStreamLevel_Params params;

	params.WorldContextObject = WorldContextObject;
	params.LevelName = LevelName;
	params.LatentInfo = LatentInfo;
	params.bShouldBlockOnUnload = bShouldBlockOnUnload;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UGameplayStatics::SuggestProjectileVelocity_CustomArc(class UObject* WorldContextObject, const struct FVector& StartPos, const struct FVector& EndPos, float OverrideGravityZ, float ArcParam, struct FVector* OutLaunchVelocity) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.SuggestProjectileVelocity_CustomArc");
	UGameplayStatics_SuggestProjectileVelocity_CustomArc_Params params;

	params.WorldContextObject = WorldContextObject;
	params.StartPos = StartPos;
	params.EndPos = EndPos;
	params.OverrideGravityZ = OverrideGravityZ;
	params.ArcParam = ArcParam;
	params.OutLaunchVelocity = *OutLaunchVelocity;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UAudioComponent* UGameplayStatics::SpawnSoundAttached(class USoundBase* Sound, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, bool bAutoDestroy) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.SpawnSoundAttached");
	UGameplayStatics_SpawnSoundAttached_Params params;

	params.Sound = Sound;
	params.AttachToComponent = AttachToComponent;
	params.AttachPointName = AttachPointName;
	params.Location = Location;
	params.Rotation = Rotation;
	params.LocationType = LocationType;
	params.bStopWhenAttachedToDestroyed = bStopWhenAttachedToDestroyed;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;
	params.StartTime = StartTime;
	params.AttenuationSettings = AttenuationSettings;
	params.ConcurrencySettings = ConcurrencySettings;
	params.bAutoDestroy = bAutoDestroy;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UAudioComponent* UGameplayStatics::SpawnSoundAtLocation(class UObject* WorldContextObject, class USoundBase* Sound, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, bool bAutoDestroy) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.SpawnSoundAtLocation");
	UGameplayStatics_SpawnSoundAtLocation_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Sound = Sound;
	params.Location = Location;
	params.Rotation = Rotation;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;
	params.StartTime = StartTime;
	params.AttenuationSettings = AttenuationSettings;
	params.ConcurrencySettings = ConcurrencySettings;
	params.bAutoDestroy = bAutoDestroy;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UAudioComponent* UGameplayStatics::SpawnSound2D(class UObject* WorldContextObject, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.SpawnSound2D");
	UGameplayStatics_SpawnSound2D_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Sound = Sound;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;
	params.StartTime = StartTime;
	params.ConcurrencySettings = ConcurrencySettings;
	params.bPersistAcrossLevelTransition = bPersistAcrossLevelTransition;
	params.bAutoDestroy = bAutoDestroy;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UObject* UGameplayStatics::SpawnObject(class UClass* ObjectClass, class UObject* Outer) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.SpawnObject");
	UGameplayStatics_SpawnObject_Params params;

	params.ObjectClass = ObjectClass;
	params.Outer = Outer;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UForceFeedbackComponent* UGameplayStatics::SpawnForceFeedbackAttached(class UForceFeedbackEffect* ForceFeedbackEffect, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, bool bLooping, float IntensityMultiplier, float StartTime, class UForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.SpawnForceFeedbackAttached");
	UGameplayStatics_SpawnForceFeedbackAttached_Params params;

	params.ForceFeedbackEffect = ForceFeedbackEffect;
	params.AttachToComponent = AttachToComponent;
	params.AttachPointName = AttachPointName;
	params.Location = Location;
	params.Rotation = Rotation;
	params.LocationType = LocationType;
	params.bStopWhenAttachedToDestroyed = bStopWhenAttachedToDestroyed;
	params.bLooping = bLooping;
	params.IntensityMultiplier = IntensityMultiplier;
	params.StartTime = StartTime;
	params.AttenuationSettings = AttenuationSettings;
	params.bAutoDestroy = bAutoDestroy;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UForceFeedbackComponent* UGameplayStatics::SpawnForceFeedbackAtLocation(class UObject* WorldContextObject, class UForceFeedbackEffect* ForceFeedbackEffect, const struct FVector& Location, const struct FRotator& Rotation, bool bLooping, float IntensityMultiplier, float StartTime, class UForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.SpawnForceFeedbackAtLocation");
	UGameplayStatics_SpawnForceFeedbackAtLocation_Params params;

	params.WorldContextObject = WorldContextObject;
	params.ForceFeedbackEffect = ForceFeedbackEffect;
	params.Location = Location;
	params.Rotation = Rotation;
	params.bLooping = bLooping;
	params.IntensityMultiplier = IntensityMultiplier;
	params.StartTime = StartTime;
	params.AttenuationSettings = AttenuationSettings;
	params.bAutoDestroy = bAutoDestroy;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UParticleSystemComponent* UGameplayStatics::SpawnEmitterAttached(class UParticleSystem* EmitterTemplate, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale, TEnumAsByte<EAttachLocation> LocationType, bool bAutoDestroy, EPSCPoolMethod PoolingMethod, bool bInheritViewFlags, class UObject* ParameterEvaluationContext) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.SpawnEmitterAttached");
	UGameplayStatics_SpawnEmitterAttached_Params params;

	params.EmitterTemplate = EmitterTemplate;
	params.AttachToComponent = AttachToComponent;
	params.AttachPointName = AttachPointName;
	params.Location = Location;
	params.Rotation = Rotation;
	params.Scale = Scale;
	params.LocationType = LocationType;
	params.bAutoDestroy = bAutoDestroy;
	params.PoolingMethod = PoolingMethod;
	params.bInheritViewFlags = bInheritViewFlags;
	params.ParameterEvaluationContext = ParameterEvaluationContext;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UParticleSystemComponent* UGameplayStatics::SpawnEmitterAtLocation(class UObject* WorldContextObject, class UParticleSystem* EmitterTemplate, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale, bool bAutoDestroy, EPSCPoolMethod PoolingMethod, class UObject* ParameterEvaluationContext) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.SpawnEmitterAtLocation");
	UGameplayStatics_SpawnEmitterAtLocation_Params params;

	params.WorldContextObject = WorldContextObject;
	params.EmitterTemplate = EmitterTemplate;
	params.Location = Location;
	params.Rotation = Rotation;
	params.Scale = Scale;
	params.bAutoDestroy = bAutoDestroy;
	params.PoolingMethod = PoolingMethod;
	params.ParameterEvaluationContext = ParameterEvaluationContext;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UAudioComponent* UGameplayStatics::SpawnDialogueAttached(class UDialogueWave* Dialogue, const struct FDialogueContext& Context, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, bool bAutoDestroy) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.SpawnDialogueAttached");
	UGameplayStatics_SpawnDialogueAttached_Params params;

	params.Dialogue = Dialogue;
	params.Context = Context;
	params.AttachToComponent = AttachToComponent;
	params.AttachPointName = AttachPointName;
	params.Location = Location;
	params.Rotation = Rotation;
	params.LocationType = LocationType;
	params.bStopWhenAttachedToDestroyed = bStopWhenAttachedToDestroyed;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;
	params.StartTime = StartTime;
	params.AttenuationSettings = AttenuationSettings;
	params.bAutoDestroy = bAutoDestroy;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UAudioComponent* UGameplayStatics::SpawnDialogueAtLocation(class UObject* WorldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, bool bAutoDestroy) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.SpawnDialogueAtLocation");
	UGameplayStatics_SpawnDialogueAtLocation_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Dialogue = Dialogue;
	params.Context = Context;
	params.Location = Location;
	params.Rotation = Rotation;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;
	params.StartTime = StartTime;
	params.AttenuationSettings = AttenuationSettings;
	params.bAutoDestroy = bAutoDestroy;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UAudioComponent* UGameplayStatics::SpawnDialogue2D(class UObject* WorldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime, bool bAutoDestroy) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.SpawnDialogue2D");
	UGameplayStatics_SpawnDialogue2D_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Dialogue = Dialogue;
	params.Context = Context;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;
	params.StartTime = StartTime;
	params.bAutoDestroy = bAutoDestroy;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UDecalComponent* UGameplayStatics::SpawnDecalAttached(class UMaterialInterface* DecalMaterial, const struct FVector& DecalSize, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<EAttachLocation> LocationType, float LifeSpan, float FadeDuration, float FadeStartDelay, float FadeScreenSize) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.SpawnDecalAttached");
	UGameplayStatics_SpawnDecalAttached_Params params;

	params.DecalMaterial = DecalMaterial;
	params.DecalSize = DecalSize;
	params.AttachToComponent = AttachToComponent;
	params.AttachPointName = AttachPointName;
	params.Location = Location;
	params.Rotation = Rotation;
	params.LocationType = LocationType;
	params.LifeSpan = LifeSpan;
	params.FadeDuration = FadeDuration;
	params.FadeStartDelay = FadeStartDelay;
	params.FadeScreenSize = FadeScreenSize;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UDecalComponent* UGameplayStatics::SpawnDecalAtLocation(class UObject* WorldContextObject, class UMaterialInterface* DecalMaterial, const struct FVector& DecalSize, const struct FVector& Location, const struct FRotator& Rotation, float LifeSpan, float FadeDuration, float FadeStartDelay, float FadeScreenSize) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.SpawnDecalAtLocation");
	UGameplayStatics_SpawnDecalAtLocation_Params params;

	params.WorldContextObject = WorldContextObject;
	params.DecalMaterial = DecalMaterial;
	params.DecalSize = DecalSize;
	params.Location = Location;
	params.Rotation = Rotation;
	params.LifeSpan = LifeSpan;
	params.FadeDuration = FadeDuration;
	params.FadeStartDelay = FadeStartDelay;
	params.FadeScreenSize = FadeScreenSize;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UGameplayStatics::SetWorldOriginLocation(class UObject* WorldContextObject, const struct FIntVector& NewLocation) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.SetWorldOriginLocation");
	UGameplayStatics_SetWorldOriginLocation_Params params;

	params.WorldContextObject = WorldContextObject;
	params.NewLocation = NewLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameplayStatics::SetSubtitlesEnabled(bool bEnabled) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.SetSubtitlesEnabled");
	UGameplayStatics_SetSubtitlesEnabled_Params params;

	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameplayStatics::SetSoundMixClassOverride(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier, class USoundClass* InSoundClass, float Volume, float Pitch, float FadeInTime, bool bApplyToChildren) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.SetSoundMixClassOverride");
	UGameplayStatics_SetSoundMixClassOverride_Params params;

	params.WorldContextObject = WorldContextObject;
	params.InSoundMixModifier = InSoundMixModifier;
	params.InSoundClass = InSoundClass;
	params.Volume = Volume;
	params.Pitch = Pitch;
	params.FadeInTime = FadeInTime;
	params.bApplyToChildren = bApplyToChildren;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameplayStatics::SetPlayerControllerID(class APlayerController* Player, int ControllerId) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.SetPlayerControllerID");
	UGameplayStatics_SetPlayerControllerID_Params params;

	params.Player = Player;
	params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameplayStatics::SetGlobalTimeDilation(class UObject* WorldContextObject, float TimeDilation) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.SetGlobalTimeDilation");
	UGameplayStatics_SetGlobalTimeDilation_Params params;

	params.WorldContextObject = WorldContextObject;
	params.TimeDilation = TimeDilation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameplayStatics::SetGlobalPitchModulation(class UObject* WorldContextObject, float PitchModulation, float TimeSec) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.SetGlobalPitchModulation");
	UGameplayStatics_SetGlobalPitchModulation_Params params;

	params.WorldContextObject = WorldContextObject;
	params.PitchModulation = PitchModulation;
	params.TimeSec = TimeSec;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameplayStatics::SetGlobalListenerFocusParameters(class UObject* WorldContextObject, float FocusAzimuthScale, float NonFocusAzimuthScale, float FocusDistanceScale, float NonFocusDistanceScale, float FocusVolumeScale, float NonFocusVolumeScale, float FocusPriorityScale, float NonFocusPriorityScale) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.SetGlobalListenerFocusParameters");
	UGameplayStatics_SetGlobalListenerFocusParameters_Params params;

	params.WorldContextObject = WorldContextObject;
	params.FocusAzimuthScale = FocusAzimuthScale;
	params.NonFocusAzimuthScale = NonFocusAzimuthScale;
	params.FocusDistanceScale = FocusDistanceScale;
	params.NonFocusDistanceScale = NonFocusDistanceScale;
	params.FocusVolumeScale = FocusVolumeScale;
	params.NonFocusVolumeScale = NonFocusVolumeScale;
	params.FocusPriorityScale = FocusPriorityScale;
	params.NonFocusPriorityScale = NonFocusPriorityScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UGameplayStatics::SetGamePaused(class UObject* WorldContextObject, bool bPaused) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.SetGamePaused");
	UGameplayStatics_SetGamePaused_Params params;

	params.WorldContextObject = WorldContextObject;
	params.bPaused = bPaused;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UGameplayStatics::SetBaseSoundMix(class UObject* WorldContextObject, class USoundMix* InSoundMix) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.SetBaseSoundMix");
	UGameplayStatics_SetBaseSoundMix_Params params;

	params.WorldContextObject = WorldContextObject;
	params.InSoundMix = InSoundMix;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UGameplayStatics::SaveGameToSlot(class USaveGame* SaveGameObject, const class FString& SlotName, int UserIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.SaveGameToSlot");
	UGameplayStatics_SaveGameToSlot_Params params;

	params.SaveGameObject = SaveGameObject;
	params.SlotName = SlotName;
	params.UserIndex = UserIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UGameplayStatics::RemovePlayer(class APlayerController* Player, bool bDestroyPawn) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.RemovePlayer");
	UGameplayStatics_RemovePlayer_Params params;

	params.Player = Player;
	params.bDestroyPawn = bDestroyPawn;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

struct FVector UGameplayStatics::RebaseZeroOriginOntoLocal(class UObject* WorldContextObject, const struct FVector& WorldLocation) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.RebaseZeroOriginOntoLocal");
	UGameplayStatics_RebaseZeroOriginOntoLocal_Params params;

	params.WorldContextObject = WorldContextObject;
	params.WorldLocation = WorldLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UGameplayStatics::RebaseLocalOriginOntoZero(class UObject* WorldContextObject, const struct FVector& WorldLocation) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.RebaseLocalOriginOntoZero");
	UGameplayStatics_RebaseLocalOriginOntoZero_Params params;

	params.WorldContextObject = WorldContextObject;
	params.WorldLocation = WorldLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UGameplayStatics::PushSoundMixModifier(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.PushSoundMixModifier");
	UGameplayStatics_PushSoundMixModifier_Params params;

	params.WorldContextObject = WorldContextObject;
	params.InSoundMixModifier = InSoundMixModifier;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UGameplayStatics::ProjectWorldToScreen(class APlayerController* Player, const struct FVector& WorldPosition, bool bPlayerViewportRelative, bool bUseForgroundProjection, struct FVector2D* ScreenPosition) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.ProjectWorldToScreen");
	UGameplayStatics_ProjectWorldToScreen_Params params;

	params.Player = Player;
	params.WorldPosition = WorldPosition;
	params.bPlayerViewportRelative = bPlayerViewportRelative;
	params.bUseForgroundProjection = bUseForgroundProjection;
	params.ScreenPosition = *ScreenPosition;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UGameplayStatics::PopSoundMixModifier(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.PopSoundMixModifier");
	UGameplayStatics_PopSoundMixModifier_Params params;

	params.WorldContextObject = WorldContextObject;
	params.InSoundMixModifier = InSoundMixModifier;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameplayStatics::PlayWorldCameraShake(class UObject* WorldContextObject, class UClass* Shake, const struct FVector& Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.PlayWorldCameraShake");
	UGameplayStatics_PlayWorldCameraShake_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Shake = Shake;
	params.Epicenter = Epicenter;
	params.InnerRadius = InnerRadius;
	params.OuterRadius = OuterRadius;
	params.Falloff = Falloff;
	params.bOrientShakeTowardsEpicenter = bOrientShakeTowardsEpicenter;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameplayStatics::PlaySoundAtLocation(class UObject* WorldContextObject, class USoundBase* Sound, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, class AActor* OwningActor) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.PlaySoundAtLocation");
	UGameplayStatics_PlaySoundAtLocation_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Sound = Sound;
	params.Location = Location;
	params.Rotation = Rotation;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;
	params.StartTime = StartTime;
	params.AttenuationSettings = AttenuationSettings;
	params.ConcurrencySettings = ConcurrencySettings;
	params.OwningActor = OwningActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameplayStatics::PlaySound2D(class UObject* WorldContextObject, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings, class AActor* OwningActor) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.PlaySound2D");
	UGameplayStatics_PlaySound2D_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Sound = Sound;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;
	params.StartTime = StartTime;
	params.ConcurrencySettings = ConcurrencySettings;
	params.OwningActor = OwningActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameplayStatics::PlayDialogueAtLocation(class UObject* WorldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.PlayDialogueAtLocation");
	UGameplayStatics_PlayDialogueAtLocation_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Dialogue = Dialogue;
	params.Context = Context;
	params.Location = Location;
	params.Rotation = Rotation;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;
	params.StartTime = StartTime;
	params.AttenuationSettings = AttenuationSettings;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameplayStatics::PlayDialogue2D(class UObject* WorldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.PlayDialogue2D");
	UGameplayStatics_PlayDialogue2D_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Dialogue = Dialogue;
	params.Context = Context;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;
	params.StartTime = StartTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

class FString UGameplayStatics::ParseOption(const class FString& Options, const class FString& Key) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.ParseOption");
	UGameplayStatics_ParseOption_Params params;

	params.Options = Options;
	params.Key = Key;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UGameplayStatics::OpenLevel(class UObject* WorldContextObject, const struct FName& LevelName, bool bAbsolute, const class FString& Options) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.OpenLevel");
	UGameplayStatics_OpenLevel_Params params;

	params.WorldContextObject = WorldContextObject;
	params.LevelName = LevelName;
	params.bAbsolute = bAbsolute;
	params.Options = Options;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

struct FHitResult UGameplayStatics::MakeHitResult(bool bBlockingHit, bool bInitialOverlap, float Time, float Distance, const struct FVector& Location, const struct FVector& ImpactPoint, const struct FVector& Normal, const struct FVector& ImpactNormal, class UPhysicalMaterial* PhysMat, class AActor* HitActor, class UPrimitiveComponent* HitComponent, const struct FName& HitBoneName, int HitItem, int FaceIndex, const struct FVector& TraceStart, const struct FVector& TraceEnd) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.MakeHitResult");
	UGameplayStatics_MakeHitResult_Params params;

	params.bBlockingHit = bBlockingHit;
	params.bInitialOverlap = bInitialOverlap;
	params.Time = Time;
	params.Distance = Distance;
	params.Location = Location;
	params.ImpactPoint = ImpactPoint;
	params.Normal = Normal;
	params.ImpactNormal = ImpactNormal;
	params.PhysMat = PhysMat;
	params.HitActor = HitActor;
	params.HitComponent = HitComponent;
	params.HitBoneName = HitBoneName;
	params.HitItem = HitItem;
	params.FaceIndex = FaceIndex;
	params.TraceStart = TraceStart;
	params.TraceEnd = TraceEnd;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UGameplayStatics::LoadStreamLevel(class UObject* WorldContextObject, const struct FName& LevelName, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, const struct FLatentActionInfo& LatentInfo) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.LoadStreamLevel");
	UGameplayStatics_LoadStreamLevel_Params params;

	params.WorldContextObject = WorldContextObject;
	params.LevelName = LevelName;
	params.bMakeVisibleAfterLoad = bMakeVisibleAfterLoad;
	params.bShouldBlockOnLoad = bShouldBlockOnLoad;
	params.LatentInfo = LatentInfo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

class USaveGame* UGameplayStatics::LoadGameFromSlot(const class FString& SlotName, int UserIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.LoadGameFromSlot");
	UGameplayStatics_LoadGameFromSlot_Params params;

	params.SlotName = SlotName;
	params.UserIndex = UserIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UGameplayStatics::IsGamePaused(class UObject* WorldContextObject) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.IsGamePaused");
	UGameplayStatics_IsGamePaused_Params params;

	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UGameplayStatics::HasOption(const class FString& Options, const class FString& InKey) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.HasOption");
	UGameplayStatics_HasOption_Params params;

	params.Options = Options;
	params.InKey = InKey;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UGameplayStatics::HasLaunchOption(const class FString& OptionToCheck) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.HasLaunchOption");
	UGameplayStatics_HasLaunchOption_Params params;

	params.OptionToCheck = OptionToCheck;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UGameplayStatics::GrassOverlappingSphereCount(class UObject* WorldContextObject, class UStaticMesh* StaticMesh, const struct FVector& CenterPosition, float Radius) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.GrassOverlappingSphereCount");
	UGameplayStatics_GrassOverlappingSphereCount_Params params;

	params.WorldContextObject = WorldContextObject;
	params.StaticMesh = StaticMesh;
	params.CenterPosition = CenterPosition;
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FIntVector UGameplayStatics::GetWorldOriginLocation(class UObject* WorldContextObject) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.GetWorldOriginLocation");
	UGameplayStatics_GetWorldOriginLocation_Params params;

	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UGameplayStatics::GetWorldDeltaSeconds(class UObject* WorldContextObject) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.GetWorldDeltaSeconds");
	UGameplayStatics_GetWorldDeltaSeconds_Params params;

	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UGameplayStatics::GetUnpausedTimeSeconds(class UObject* WorldContextObject) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.GetUnpausedTimeSeconds");
	UGameplayStatics_GetUnpausedTimeSeconds_Params params;

	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UGameplayStatics::GetTimeSeconds(class UObject* WorldContextObject) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.GetTimeSeconds");
	UGameplayStatics_GetTimeSeconds_Params params;

	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class ULevelStreaming* UGameplayStatics::GetStreamingLevel(class UObject* WorldContextObject, const struct FName& PackageName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.GetStreamingLevel");
	UGameplayStatics_GetStreamingLevel_Params params;

	params.WorldContextObject = WorldContextObject;
	params.PackageName = PackageName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UGameplayStatics::GetRealTimeSeconds(class UObject* WorldContextObject) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.GetRealTimeSeconds");
	UGameplayStatics_GetRealTimeSeconds_Params params;

	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class APawn* UGameplayStatics::GetPlayerPawn(class UObject* WorldContextObject, int PlayerIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.GetPlayerPawn");
	UGameplayStatics_GetPlayerPawn_Params params;

	params.WorldContextObject = WorldContextObject;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UGameplayStatics::GetPlayerControllerID(class APlayerController* Player) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.GetPlayerControllerID");
	UGameplayStatics_GetPlayerControllerID_Params params;

	params.Player = Player;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class APlayerController* UGameplayStatics::GetPlayerController(class UObject* WorldContextObject, int PlayerIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.GetPlayerController");
	UGameplayStatics_GetPlayerController_Params params;

	params.WorldContextObject = WorldContextObject;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class ACharacter* UGameplayStatics::GetPlayerCharacter(class UObject* WorldContextObject, int PlayerIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.GetPlayerCharacter");
	UGameplayStatics_GetPlayerCharacter_Params params;

	params.WorldContextObject = WorldContextObject;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class APlayerCameraManager* UGameplayStatics::GetPlayerCameraManager(class UObject* WorldContextObject, int PlayerIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.GetPlayerCameraManager");
	UGameplayStatics_GetPlayerCameraManager_Params params;

	params.WorldContextObject = WorldContextObject;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UGameplayStatics::GetPlatformName() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.GetPlatformName");
	UGameplayStatics_GetPlatformName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UClass* UGameplayStatics::GetObjectClass(class UObject* Object) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.GetObjectClass");
	UGameplayStatics_GetObjectClass_Params params;

	params.Object = Object;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UGameplayStatics::GetKeyValue(const class FString& Pair, class FString* Key, class FString* Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.GetKeyValue");
	UGameplayStatics_GetKeyValue_Params params;

	params.Pair = Pair;
	params.Key = *Key;
	params.Value = *Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

int UGameplayStatics::GetIntOption(const class FString& Options, const class FString& Key, int DefaultValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.GetIntOption");
	UGameplayStatics_GetIntOption_Params params;

	params.Options = Options;
	params.Key = Key;
	params.DefaultValue = DefaultValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UGameplayStatics::GetGlobalTimeDilation(class UObject* WorldContextObject) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.GetGlobalTimeDilation");
	UGameplayStatics_GetGlobalTimeDilation_Params params;

	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class AGameStateBase* UGameplayStatics::GetGameState(class UObject* WorldContextObject) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.GetGameState");
	UGameplayStatics_GetGameState_Params params;

	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class AGameModeBase* UGameplayStatics::GetGameMode(class UObject* WorldContextObject) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.GetGameMode");
	UGameplayStatics_GetGameMode_Params params;

	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UGameInstance* UGameplayStatics::GetGameInstance(class UObject* WorldContextObject) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.GetGameInstance");
	UGameplayStatics_GetGameInstance_Params params;

	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UReverbEffect* UGameplayStatics::GetCurrentReverbEffect(class UObject* WorldContextObject) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.GetCurrentReverbEffect");
	UGameplayStatics_GetCurrentReverbEffect_Params params;

	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UGameplayStatics::GetCurrentLevelName(class UObject* WorldContextObject, bool bRemovePrefixString) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.GetCurrentLevelName");
	UGameplayStatics_GetCurrentLevelName_Params params;

	params.WorldContextObject = WorldContextObject;
	params.bRemovePrefixString = bRemovePrefixString;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UGameplayStatics::GetAudioTimeSeconds(class UObject* WorldContextObject) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.GetAudioTimeSeconds");
	UGameplayStatics_GetAudioTimeSeconds_Params params;

	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UGameplayStatics::GetAllActorsWithTag(class UObject* WorldContextObject, const struct FName& Tag, TArray<class AActor*>* OutActors) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.GetAllActorsWithTag");
	UGameplayStatics_GetAllActorsWithTag_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Tag = Tag;
	params.OutActors = *OutActors;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameplayStatics::GetAllActorsWithInterface(class UObject* WorldContextObject, class UClass* Interface, TArray<class AActor*>* OutActors) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.GetAllActorsWithInterface");
	UGameplayStatics_GetAllActorsWithInterface_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Interface = Interface;
	params.OutActors = *OutActors;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameplayStatics::GetAllActorsOfClass(class UObject* WorldContextObject, class UClass* ActorClass, TArray<class AActor*>* OutActors) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.GetAllActorsOfClass");
	UGameplayStatics_GetAllActorsOfClass_Params params;

	params.WorldContextObject = WorldContextObject;
	params.ActorClass = ActorClass;
	params.OutActors = *OutActors;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameplayStatics::GetActorArrayBounds(TArray<class AActor*> Actors, bool bOnlyCollidingComponents, struct FVector* Center, struct FVector* BoxExtent) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.GetActorArrayBounds");
	UGameplayStatics_GetActorArrayBounds_Params params;

	params.Actors = Actors;
	params.bOnlyCollidingComponents = bOnlyCollidingComponents;
	params.Center = *Center;
	params.BoxExtent = *BoxExtent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

struct FVector UGameplayStatics::GetActorArrayAverageLocation(TArray<class AActor*> Actors) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.GetActorArrayAverageLocation");
	UGameplayStatics_GetActorArrayAverageLocation_Params params;

	params.Actors = Actors;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UGameplayStatics::GetAccurateRealTime(class UObject* WorldContextObject, int* Seconds, float* PartialSeconds) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.GetAccurateRealTime");
	UGameplayStatics_GetAccurateRealTime_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Seconds = *Seconds;
	params.PartialSeconds = *PartialSeconds;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameplayStatics::FlushLevelStreaming(class UObject* WorldContextObject) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.FlushLevelStreaming");
	UGameplayStatics_FlushLevelStreaming_Params params;

	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

class AActor* UGameplayStatics::FinishSpawningActor(class AActor* Actor, const struct FTransform& SpawnTransform) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.FinishSpawningActor");
	UGameplayStatics_FinishSpawningActor_Params params;

	params.Actor = Actor;
	params.SpawnTransform = SpawnTransform;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UGameplayStatics::FindCollisionUV(const struct FHitResult& Hit, int UVChannel, struct FVector2D* UV) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.FindCollisionUV");
	UGameplayStatics_FindCollisionUV_Params params;

	params.Hit = Hit;
	params.UVChannel = UVChannel;
	params.UV = *UV;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UGameplayStatics::EnableLiveStreaming(bool Enable) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.EnableLiveStreaming");
	UGameplayStatics_EnableLiveStreaming_Params params;

	params.Enable = Enable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UGameplayStatics::DoesSaveGameExist(const class FString& SlotName, int UserIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.DoesSaveGameExist");
	UGameplayStatics_DoesSaveGameExist_Params params;

	params.SlotName = SlotName;
	params.UserIndex = UserIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UGameplayStatics::DeprojectScreenToWorld(class APlayerController* Player, const struct FVector2D& ScreenPosition, bool bUseForgroundProjection, bool bTruncateScreenPosition, struct FVector* WorldPosition, struct FVector* WorldDirection) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.DeprojectScreenToWorld");
	UGameplayStatics_DeprojectScreenToWorld_Params params;

	params.Player = Player;
	params.ScreenPosition = ScreenPosition;
	params.bUseForgroundProjection = bUseForgroundProjection;
	params.bTruncateScreenPosition = bTruncateScreenPosition;
	params.WorldPosition = *WorldPosition;
	params.WorldDirection = *WorldDirection;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UGameplayStatics::DeleteGameInSlot(const class FString& SlotName, int UserIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.DeleteGameInSlot");
	UGameplayStatics_DeleteGameInSlot_Params params;

	params.SlotName = SlotName;
	params.UserIndex = UserIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UGameplayStatics::DeactivateReverbEffect(class UObject* WorldContextObject, const struct FName& TagName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.DeactivateReverbEffect");
	UGameplayStatics_DeactivateReverbEffect_Params params;

	params.WorldContextObject = WorldContextObject;
	params.TagName = TagName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

class UAudioComponent* UGameplayStatics::CreateSound2D(class UObject* WorldContextObject, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.CreateSound2D");
	UGameplayStatics_CreateSound2D_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Sound = Sound;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;
	params.StartTime = StartTime;
	params.ConcurrencySettings = ConcurrencySettings;
	params.bPersistAcrossLevelTransition = bPersistAcrossLevelTransition;
	params.bAutoDestroy = bAutoDestroy;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class USaveGame* UGameplayStatics::CreateSaveGameObjectFromBlueprint(class UBlueprint* SaveGameBlueprint) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.CreateSaveGameObjectFromBlueprint");
	UGameplayStatics_CreateSaveGameObjectFromBlueprint_Params params;

	params.SaveGameBlueprint = SaveGameBlueprint;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class USaveGame* UGameplayStatics::CreateSaveGameObject(class UClass* SaveGameClass) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.CreateSaveGameObject");
	UGameplayStatics_CreateSaveGameObject_Params params;

	params.SaveGameClass = SaveGameClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class APlayerController* UGameplayStatics::CreatePlayer(class UObject* WorldContextObject, int ControllerId, bool bSpawnPawn) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.CreatePlayer");
	UGameplayStatics_CreatePlayer_Params params;

	params.WorldContextObject = WorldContextObject;
	params.ControllerId = ControllerId;
	params.bSpawnPawn = bSpawnPawn;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UGameplayStatics::ClearSoundMixModifiers(class UObject* WorldContextObject) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.ClearSoundMixModifiers");
	UGameplayStatics_ClearSoundMixModifiers_Params params;

	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameplayStatics::ClearSoundMixClassOverride(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier, class USoundClass* InSoundClass, float FadeOutTime) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.ClearSoundMixClassOverride");
	UGameplayStatics_ClearSoundMixClassOverride_Params params;

	params.WorldContextObject = WorldContextObject;
	params.InSoundMixModifier = InSoundMixModifier;
	params.InSoundClass = InSoundClass;
	params.FadeOutTime = FadeOutTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameplayStatics::CancelAsyncLoading() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.CancelAsyncLoading");
	UGameplayStatics_CancelAsyncLoading_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGameplayStatics::BreakHitResult(const struct FHitResult& Hit, bool* bBlockingHit, bool* bInitialOverlap, float* Time, float* Distance, struct FVector* Location, struct FVector* ImpactPoint, struct FVector* Normal, struct FVector* ImpactNormal, class UPhysicalMaterial** PhysMat, class AActor** HitActor, class UPrimitiveComponent** HitComponent, struct FName* HitBoneName, int* HitItem, int* FaceIndex, struct FVector* TraceStart, struct FVector* TraceEnd) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.BreakHitResult");
	UGameplayStatics_BreakHitResult_Params params;

	params.Hit = Hit;
	params.bBlockingHit = bBlockingHit;
	params.bInitialOverlap = bInitialOverlap;
	params.Time = *Time;
	params.Distance = *Distance;
	params.Location = *Location;
	params.ImpactPoint = *ImpactPoint;
	params.Normal = *Normal;
	params.ImpactNormal = *ImpactNormal;
	params.PhysMat = *PhysMat;
	params.HitActor = *HitActor;
	params.HitComponent = *HitComponent;
	params.HitBoneName = *HitBoneName;
	params.HitItem = *HitItem;
	params.FaceIndex = *FaceIndex;
	params.TraceStart = *TraceStart;
	params.TraceEnd = *TraceEnd;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UGameplayStatics::BlueprintSuggestProjectileVelocity(class UObject* WorldContextObject, const struct FVector& StartLocation, const struct FVector& EndLocation, float LaunchSpeed, float OverrideGravityZ, TEnumAsByte<ESuggestProjVelocityTraceOption> TraceOption, float CollisionRadius, bool bFavorHighArc, bool bDrawDebug, struct FVector* TossVelocity) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.BlueprintSuggestProjectileVelocity");
	UGameplayStatics_BlueprintSuggestProjectileVelocity_Params params;

	params.WorldContextObject = WorldContextObject;
	params.StartLocation = StartLocation;
	params.EndLocation = EndLocation;
	params.LaunchSpeed = LaunchSpeed;
	params.OverrideGravityZ = OverrideGravityZ;
	params.TraceOption = TraceOption;
	params.CollisionRadius = CollisionRadius;
	params.bFavorHighArc = bFavorHighArc;
	params.bDrawDebug = bDrawDebug;
	params.TossVelocity = *TossVelocity;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UGameplayStatics::Blueprint_PredictProjectilePath_ByTraceChannel(class UObject* WorldContextObject, const struct FVector& StartPos, const struct FVector& LaunchVelocity, bool bTracePath, float ProjectileRadius, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ, struct FHitResult* OutHit, TArray<struct FVector>* OutPathPositions, struct FVector* OutLastTraceDestination) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.Blueprint_PredictProjectilePath_ByTraceChannel");
	UGameplayStatics_Blueprint_PredictProjectilePath_ByTraceChannel_Params params;

	params.WorldContextObject = WorldContextObject;
	params.StartPos = StartPos;
	params.LaunchVelocity = LaunchVelocity;
	params.bTracePath = bTracePath;
	params.ProjectileRadius = ProjectileRadius;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.DrawDebugTime = DrawDebugTime;
	params.SimFrequency = SimFrequency;
	params.MaxSimTime = MaxSimTime;
	params.OverrideGravityZ = OverrideGravityZ;
	params.OutHit = *OutHit;
	params.OutPathPositions = *OutPathPositions;
	params.OutLastTraceDestination = *OutLastTraceDestination;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UGameplayStatics::Blueprint_PredictProjectilePath_ByObjectType(class UObject* WorldContextObject, const struct FVector& StartPos, const struct FVector& LaunchVelocity, bool bTracePath, float ProjectileRadius, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ, struct FHitResult* OutHit, TArray<struct FVector>* OutPathPositions, struct FVector* OutLastTraceDestination) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.Blueprint_PredictProjectilePath_ByObjectType");
	UGameplayStatics_Blueprint_PredictProjectilePath_ByObjectType_Params params;

	params.WorldContextObject = WorldContextObject;
	params.StartPos = StartPos;
	params.LaunchVelocity = LaunchVelocity;
	params.bTracePath = bTracePath;
	params.ProjectileRadius = ProjectileRadius;
	params.ObjectTypes = ObjectTypes;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.DrawDebugTime = DrawDebugTime;
	params.SimFrequency = SimFrequency;
	params.MaxSimTime = MaxSimTime;
	params.OverrideGravityZ = OverrideGravityZ;
	params.OutHit = *OutHit;
	params.OutPathPositions = *OutPathPositions;
	params.OutLastTraceDestination = *OutLastTraceDestination;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UGameplayStatics::Blueprint_PredictProjectilePath_Advanced(class UObject* WorldContextObject, const struct FPredictProjectilePathParams& PredictParams, struct FPredictProjectilePathResult* PredictResult) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.Blueprint_PredictProjectilePath_Advanced");
	UGameplayStatics_Blueprint_PredictProjectilePath_Advanced_Params params;

	params.WorldContextObject = WorldContextObject;
	params.PredictParams = PredictParams;
	params.PredictResult = *PredictResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class AActor* UGameplayStatics::BeginSpawningActorFromClass(class UObject* WorldContextObject, class UClass* ActorClass, const struct FTransform& SpawnTransform, bool bNoCollisionFail, class AActor* Owner) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.BeginSpawningActorFromClass");
	UGameplayStatics_BeginSpawningActorFromClass_Params params;

	params.WorldContextObject = WorldContextObject;
	params.ActorClass = ActorClass;
	params.SpawnTransform = SpawnTransform;
	params.bNoCollisionFail = bNoCollisionFail;
	params.Owner = Owner;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class AActor* UGameplayStatics::BeginSpawningActorFromBlueprint(class UObject* WorldContextObject, class UBlueprint* Blueprint, const struct FTransform& SpawnTransform, bool bNoCollisionFail) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.BeginSpawningActorFromBlueprint");
	UGameplayStatics_BeginSpawningActorFromBlueprint_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Blueprint = Blueprint;
	params.SpawnTransform = SpawnTransform;
	params.bNoCollisionFail = bNoCollisionFail;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class AActor* UGameplayStatics::BeginDeferredActorSpawnFromClass(class UObject* WorldContextObject, class UClass* ActorClass, const struct FTransform& SpawnTransform, ESpawnActorCollisionHandlingMethod CollisionHandlingOverride, class AActor* Owner) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.BeginDeferredActorSpawnFromClass");
	UGameplayStatics_BeginDeferredActorSpawnFromClass_Params params;

	params.WorldContextObject = WorldContextObject;
	params.ActorClass = ActorClass;
	params.SpawnTransform = SpawnTransform;
	params.CollisionHandlingOverride = CollisionHandlingOverride;
	params.Owner = Owner;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UGameplayStatics::AreSubtitlesEnabled() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.AreSubtitlesEnabled");
	UGameplayStatics_AreSubtitlesEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UGameplayStatics::AreAnyListenersWithinRange(class UObject* WorldContextObject, const struct FVector& Location, float MaximumRange) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.AreAnyListenersWithinRange");
	UGameplayStatics_AreAnyListenersWithinRange_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Location = Location;
	params.MaximumRange = MaximumRange;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UGameplayStatics::ApplyRadialDamageWithFalloff(class UObject* WorldContextObject, float BaseDamage, float MinimumDamage, const struct FVector& Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, class UClass* DamageTypeClass, TArray<class AActor*> IgnoreActors, class AActor* DamageCauser, class AController* InstigatedByController, TEnumAsByte<ECollisionChannel> DamagePreventionChannel) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.ApplyRadialDamageWithFalloff");
	UGameplayStatics_ApplyRadialDamageWithFalloff_Params params;

	params.WorldContextObject = WorldContextObject;
	params.BaseDamage = BaseDamage;
	params.MinimumDamage = MinimumDamage;
	params.Origin = Origin;
	params.DamageInnerRadius = DamageInnerRadius;
	params.DamageOuterRadius = DamageOuterRadius;
	params.DamageFalloff = DamageFalloff;
	params.DamageTypeClass = DamageTypeClass;
	params.IgnoreActors = IgnoreActors;
	params.DamageCauser = DamageCauser;
	params.InstigatedByController = InstigatedByController;
	params.DamagePreventionChannel = DamagePreventionChannel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UGameplayStatics::ApplyRadialDamage(class UObject* WorldContextObject, float BaseDamage, const struct FVector& Origin, float DamageRadius, class UClass* DamageTypeClass, TArray<class AActor*> IgnoreActors, class AActor* DamageCauser, class AController* InstigatedByController, bool bDoFullDamage, TEnumAsByte<ECollisionChannel> DamagePreventionChannel) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.ApplyRadialDamage");
	UGameplayStatics_ApplyRadialDamage_Params params;

	params.WorldContextObject = WorldContextObject;
	params.BaseDamage = BaseDamage;
	params.Origin = Origin;
	params.DamageRadius = DamageRadius;
	params.DamageTypeClass = DamageTypeClass;
	params.IgnoreActors = IgnoreActors;
	params.DamageCauser = DamageCauser;
	params.InstigatedByController = InstigatedByController;
	params.bDoFullDamage = bDoFullDamage;
	params.DamagePreventionChannel = DamagePreventionChannel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UGameplayStatics::ApplyPointDamage(class AActor* DamagedActor, float BaseDamage, const struct FVector& HitFromDirection, const struct FHitResult& HitInfo, class AController* EventInstigator, class AActor* DamageCauser, class UClass* DamageTypeClass) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.ApplyPointDamage");
	UGameplayStatics_ApplyPointDamage_Params params;

	params.DamagedActor = DamagedActor;
	params.BaseDamage = BaseDamage;
	params.HitFromDirection = HitFromDirection;
	params.HitInfo = HitInfo;
	params.EventInstigator = EventInstigator;
	params.DamageCauser = DamageCauser;
	params.DamageTypeClass = DamageTypeClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UGameplayStatics::ApplyDamage(class AActor* DamagedActor, float BaseDamage, class AController* EventInstigator, class AActor* DamageCauser, class UClass* DamageTypeClass) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.ApplyDamage");
	UGameplayStatics_ApplyDamage_Params params;

	params.DamagedActor = DamagedActor;
	params.BaseDamage = BaseDamage;
	params.EventInstigator = EventInstigator;
	params.DamageCauser = DamageCauser;
	params.DamageTypeClass = DamageTypeClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UGameplayStatics::ActivateReverbEffect(class UObject* WorldContextObject, class UReverbEffect* ReverbEffect, const struct FName& TagName, float Priority, float Volume, float FadeTime) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GameplayStatics.ActivateReverbEffect");
	UGameplayStatics_ActivateReverbEffect_Params params;

	params.WorldContextObject = WorldContextObject;
	params.ReverbEffect = ReverbEffect;
	params.TagName = TagName;
	params.Priority = Priority;
	params.Volume = Volume;
	params.FadeTime = FadeTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGbxAnimBlueprintLibrary::EnableAnimDebugChannel(EAnimDebugChannel Channel) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GbxAnimBlueprintLibrary.EnableAnimDebugChannel");
	UGbxAnimBlueprintLibrary_EnableAnimDebugChannel_Params params;

	params.Channel = Channel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGbxAnimBlueprintLibrary::DisableAnimDebugChannel(EAnimDebugChannel Channel) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GbxAnimBlueprintLibrary.DisableAnimDebugChannel");
	UGbxAnimBlueprintLibrary_DisableAnimDebugChannel_Params params;

	params.Channel = Channel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGbxLagCompensationManager::OnActorEndPlay(class AActor* Actor, TEnumAsByte<EEndPlayReason> EndPlayReason) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GbxLagCompensationManager.OnActorEndPlay");
	UGbxLagCompensationManager_OnActorEndPlay_Params params;

	params.Actor = Actor;
	params.EndPlayReason = EndPlayReason;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGbxOrientedBoxComponent::SetOuterBoxExtent(const struct FVector& InBoxExtent) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GbxOrientedBoxComponent.SetOuterBoxExtent");
	UGbxOrientedBoxComponent_SetOuterBoxExtent_Params params;

	params.InBoxExtent = InBoxExtent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGbxOrientedBoxComponent::SetInnerBoxFactor(const struct FVector& InBoxFactor) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GbxOrientedBoxComponent.SetInnerBoxFactor");
	UGbxOrientedBoxComponent_SetInnerBoxFactor_Params params;

	params.InBoxFactor = InBoxFactor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

struct FVector UGbxOrientedBoxComponent::GetOuterUnscaledBoxExtent() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GbxOrientedBoxComponent.GetOuterUnscaledBoxExtent");
	UGbxOrientedBoxComponent_GetOuterUnscaledBoxExtent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UGbxOrientedBoxComponent::GetOuterScaledBoxExtent() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GbxOrientedBoxComponent.GetOuterScaledBoxExtent");
	UGbxOrientedBoxComponent_GetOuterScaledBoxExtent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UGbxOrientedBoxComponent::GetInnerBoxFactor() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GbxOrientedBoxComponent.GetInnerBoxFactor");
	UGbxOrientedBoxComponent_GetInnerBoxFactor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UGbxSpawnActorAsyncManager::SpawnActorAsync(class UObject* WorldContext, const struct FGbxSpawnActorAsyncRequest& Request) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GbxSpawnActorAsyncManager.SpawnActorAsync");
	UGbxSpawnActorAsyncManager_SpawnActorAsync_Params params;

	params.WorldContext = WorldContext;
	params.Request = Request;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UGbxSpawnActorAsyncManager::CancelSpawnActorAsyncRequest(class UObject* WorldContext, int RequestID) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GbxSpawnActorAsyncManager.CancelSpawnActorAsyncRequest");
	UGbxSpawnActorAsyncManager_CancelSpawnActorAsyncRequest_Params params;

	params.WorldContext = WorldContext;
	params.RequestID = RequestID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGbxSpawnActorAsyncManager::CacheExposeOnSpawnValue(const struct FGbxExposeOnSpawnValueCache& Cache, class UProperty* Property, int Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GbxSpawnActorAsyncManager.CacheExposeOnSpawnValue");
	UGbxSpawnActorAsyncManager_CacheExposeOnSpawnValue_Params params;

	params.Cache = Cache;
	params.Property = Property;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGbxTraceAsyncLibrary::TraceAsync(class UObject* WorldContext, const struct FGbxTraceAsyncRequest& Request) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GbxTraceAsyncLibrary.TraceAsync");
	UGbxTraceAsyncLibrary_TraceAsync_Params params;

	params.WorldContext = WorldContext;
	params.Request = Request;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ASpotLight::SetOuterConeAngle(float NewOuterConeAngle) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SpotLight.SetOuterConeAngle");
	ASpotLight_SetOuterConeAngle_Params params;

	params.NewOuterConeAngle = NewOuterConeAngle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ASpotLight::SetInnerConeAngle(float NewInnerConeAngle) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SpotLight.SetInnerConeAngle");
	ASpotLight_SetInnerConeAngle_Params params;

	params.NewInnerConeAngle = NewInnerConeAngle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UGestaltData::EnumeratePartNames(TArray<struct FName>* OutPartNames) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.GestaltData.EnumeratePartNames");
	UGestaltData_EnumeratePartNames_Params params;

	params.OutPartNames = *OutPartNames;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

float UImportanceSamplingLibrary::RandomSobolFloat(int Index, int Dimension, float Seed) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ImportanceSamplingLibrary.RandomSobolFloat");
	UImportanceSamplingLibrary_RandomSobolFloat_Params params;

	params.Index = Index;
	params.Dimension = Dimension;
	params.Seed = Seed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UImportanceSamplingLibrary::RandomSobolCell3D(int Index, int NumCells, const struct FVector& Cell, const struct FVector& Seed) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ImportanceSamplingLibrary.RandomSobolCell3D");
	UImportanceSamplingLibrary_RandomSobolCell3D_Params params;

	params.Index = Index;
	params.NumCells = NumCells;
	params.Cell = Cell;
	params.Seed = Seed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector2D UImportanceSamplingLibrary::RandomSobolCell2D(int Index, int NumCells, const struct FVector2D& Cell, const struct FVector2D& Seed) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ImportanceSamplingLibrary.RandomSobolCell2D");
	UImportanceSamplingLibrary_RandomSobolCell2D_Params params;

	params.Index = Index;
	params.NumCells = NumCells;
	params.Cell = Cell;
	params.Seed = Seed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UImportanceSamplingLibrary::NextSobolFloat(int Index, int Dimension, float PreviousValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ImportanceSamplingLibrary.NextSobolFloat");
	UImportanceSamplingLibrary_NextSobolFloat_Params params;

	params.Index = Index;
	params.Dimension = Dimension;
	params.PreviousValue = PreviousValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UImportanceSamplingLibrary::NextSobolCell3D(int Index, int NumCells, const struct FVector& PreviousValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ImportanceSamplingLibrary.NextSobolCell3D");
	UImportanceSamplingLibrary_NextSobolCell3D_Params params;

	params.Index = Index;
	params.NumCells = NumCells;
	params.PreviousValue = PreviousValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector2D UImportanceSamplingLibrary::NextSobolCell2D(int Index, int NumCells, const struct FVector2D& PreviousValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ImportanceSamplingLibrary.NextSobolCell2D");
	UImportanceSamplingLibrary_NextSobolCell2D_Params params;

	params.Index = Index;
	params.NumCells = NumCells;
	params.PreviousValue = PreviousValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FImportanceTexture UImportanceSamplingLibrary::MakeImportanceTexture(class UTexture2D* Texture, TEnumAsByte<EImportanceWeight> WeightingFunc) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ImportanceSamplingLibrary.MakeImportanceTexture");
	UImportanceSamplingLibrary_MakeImportanceTexture_Params params;

	params.Texture = Texture;
	params.WeightingFunc = WeightingFunc;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UImportanceSamplingLibrary::ImportanceSample(const struct FImportanceTexture& Texture, const struct FVector2D& Rand, int Samples, float Intensity, struct FVector2D* SamplePosition, struct FLinearColor* SampleColor, float* SampleIntensity, float* SampleSize) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ImportanceSamplingLibrary.ImportanceSample");
	UImportanceSamplingLibrary_ImportanceSample_Params params;

	params.Texture = Texture;
	params.Rand = Rand;
	params.Samples = Samples;
	params.Intensity = Intensity;
	params.SamplePosition = *SamplePosition;
	params.SampleColor = *SampleColor;
	params.SampleIntensity = *SampleIntensity;
	params.SampleSize = *SampleSize;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UImportanceSamplingLibrary::BreakImportanceTexture(const struct FImportanceTexture& ImportanceTexture, class UTexture2D** Texture, TEnumAsByte<EImportanceWeight>* WeightingFunc) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ImportanceSamplingLibrary.BreakImportanceTexture");
	UImportanceSamplingLibrary_BreakImportanceTexture_Params params;

	params.ImportanceTexture = ImportanceTexture;
	params.Texture = *Texture;
	params.WeightingFunc = *WeightingFunc;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UInputSettings::SaveKeyMappings() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.InputSettings.SaveKeyMappings");
	UInputSettings_SaveKeyMappings_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UInputSettings::RemoveAxisMapping(const struct FInputAxisKeyMapping& KeyMapping, bool bForceRebuildKeymaps) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.InputSettings.RemoveAxisMapping");
	UInputSettings_RemoveAxisMapping_Params params;

	params.KeyMapping = KeyMapping;
	params.bForceRebuildKeymaps = bForceRebuildKeymaps;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UInputSettings::RemoveActionMapping(const struct FInputActionKeyMapping& KeyMapping, bool bForceRebuildKeymaps) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.InputSettings.RemoveActionMapping");
	UInputSettings_RemoveActionMapping_Params params;

	params.KeyMapping = KeyMapping;
	params.bForceRebuildKeymaps = bForceRebuildKeymaps;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

class UInputSettings* UInputSettings::GetInputSettings() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.InputSettings.GetInputSettings");
	UInputSettings_GetInputSettings_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UInputSettings::GetAxisNames(TArray<struct FName>* AxisNames) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.InputSettings.GetAxisNames");
	UInputSettings_GetAxisNames_Params params;

	params.AxisNames = *AxisNames;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UInputSettings::GetAxisMappingByName(const struct FName& InAxisName, TArray<struct FInputAxisKeyMapping>* OutMappings) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.InputSettings.GetAxisMappingByName");
	UInputSettings_GetAxisMappingByName_Params params;

	params.InAxisName = InAxisName;
	params.OutMappings = *OutMappings;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UInputSettings::GetActionNames(TArray<struct FName>* ActionNames) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.InputSettings.GetActionNames");
	UInputSettings_GetActionNames_Params params;

	params.ActionNames = *ActionNames;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UInputSettings::GetActionMappingByName(const struct FName& InActionName, TArray<struct FInputActionKeyMapping>* OutMappings) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.InputSettings.GetActionMappingByName");
	UInputSettings_GetActionMappingByName_Params params;

	params.InActionName = InActionName;
	params.OutMappings = *OutMappings;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UInputSettings::ForceRebuildKeymaps() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.InputSettings.ForceRebuildKeymaps");
	UInputSettings_ForceRebuildKeymaps_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UInputSettings::AddAxisMapping(const struct FInputAxisKeyMapping& KeyMapping, bool bForceRebuildKeymaps) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.InputSettings.AddAxisMapping");
	UInputSettings_AddAxisMapping_Params params;

	params.KeyMapping = KeyMapping;
	params.bForceRebuildKeymaps = bForceRebuildKeymaps;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UInputSettings::AddActionMapping(const struct FInputActionKeyMapping& KeyMapping, bool bForceRebuildKeymaps) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.InputSettings.AddActionMapping");
	UInputSettings_AddActionMapping_Params params;

	params.KeyMapping = KeyMapping;
	params.bForceRebuildKeymaps = bForceRebuildKeymaps;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UInterpToMovementComponent::StopSimulating(const struct FHitResult& HitResult) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.InterpToMovementComponent.StopSimulating");
	UInterpToMovementComponent_StopSimulating_Params params;

	params.HitResult = HitResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UInterpToMovementComponent::RestartMovement(float InitialDirection) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.InterpToMovementComponent.RestartMovement");
	UInterpToMovementComponent_RestartMovement_Params params;

	params.InitialDirection = InitialDirection;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UInterpToMovementComponent::OnInterpToWaitEndDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.InterpToMovementComponent.OnInterpToWaitEndDelegate__DelegateSignature");
	UInterpToMovementComponent_OnInterpToWaitEndDelegate__DelegateSignature_Params params;

	params.ImpactResult = ImpactResult;
	params.Time = Time;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UInterpToMovementComponent::OnInterpToWaitBeginDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.InterpToMovementComponent.OnInterpToWaitBeginDelegate__DelegateSignature");
	UInterpToMovementComponent_OnInterpToWaitBeginDelegate__DelegateSignature_Params params;

	params.ImpactResult = ImpactResult;
	params.Time = Time;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UInterpToMovementComponent::OnInterpToStopDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.InterpToMovementComponent.OnInterpToStopDelegate__DelegateSignature");
	UInterpToMovementComponent_OnInterpToStopDelegate__DelegateSignature_Params params;

	params.ImpactResult = ImpactResult;
	params.Time = Time;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UInterpToMovementComponent::OnInterpToReverseDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.InterpToMovementComponent.OnInterpToReverseDelegate__DelegateSignature");
	UInterpToMovementComponent_OnInterpToReverseDelegate__DelegateSignature_Params params;

	params.ImpactResult = ImpactResult;
	params.Time = Time;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UInterpToMovementComponent::OnInterpToResetDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.InterpToMovementComponent.OnInterpToResetDelegate__DelegateSignature");
	UInterpToMovementComponent_OnInterpToResetDelegate__DelegateSignature_Params params;

	params.ImpactResult = ImpactResult;
	params.Time = Time;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UInterpToMovementComponent::FinaliseControlPoints() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.InterpToMovementComponent.FinaliseControlPoints");
	UInterpToMovementComponent_FinaliseControlPoints_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetArrayLibrary::SetArrayPropertyByName(class UObject* Object, const struct FName& PropertyName, TArray<int> Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetArrayLibrary.SetArrayPropertyByName");
	UKismetArrayLibrary_SetArrayPropertyByName_Params params;

	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetArrayLibrary::FilterArray(TArray<class AActor*> TargetArray, class UClass* FilterClass, TArray<class AActor*>* FilteredArray) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetArrayLibrary.FilterArray");
	UKismetArrayLibrary_FilterArray_Params params;

	params.TargetArray = TargetArray;
	params.FilterClass = FilterClass;
	params.FilteredArray = *FilteredArray;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetArrayLibrary::Array_Swap(TArray<int> TargetArray, int FirstIndex, int SecondIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetArrayLibrary.Array_Swap");
	UKismetArrayLibrary_Array_Swap_Params params;

	params.TargetArray = TargetArray;
	params.FirstIndex = FirstIndex;
	params.SecondIndex = SecondIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetArrayLibrary::Array_Shuffle(TArray<int> TargetArray) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetArrayLibrary.Array_Shuffle");
	UKismetArrayLibrary_Array_Shuffle_Params params;

	params.TargetArray = TargetArray;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetArrayLibrary::Array_Set(TArray<int> TargetArray, int Index, int Item, bool bSizeToFit) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetArrayLibrary.Array_Set");
	UKismetArrayLibrary_Array_Set_Params params;

	params.TargetArray = TargetArray;
	params.Index = Index;
	params.Item = Item;
	params.bSizeToFit = bSizeToFit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetArrayLibrary::Array_Resize(TArray<int> TargetArray, int Size) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetArrayLibrary.Array_Resize");
	UKismetArrayLibrary_Array_Resize_Params params;

	params.TargetArray = TargetArray;
	params.Size = Size;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UKismetArrayLibrary::Array_RemoveItem(TArray<int> TargetArray, int Item) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetArrayLibrary.Array_RemoveItem");
	UKismetArrayLibrary_Array_RemoveItem_Params params;

	params.TargetArray = TargetArray;
	params.Item = Item;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UKismetArrayLibrary::Array_Remove(TArray<int> TargetArray, int IndexToRemove) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetArrayLibrary.Array_Remove");
	UKismetArrayLibrary_Array_Remove_Params params;

	params.TargetArray = TargetArray;
	params.IndexToRemove = IndexToRemove;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

int UKismetArrayLibrary::Array_Length(TArray<int> TargetArray) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetArrayLibrary.Array_Length");
	UKismetArrayLibrary_Array_Length_Params params;

	params.TargetArray = TargetArray;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetArrayLibrary::Array_LastIndex(TArray<int> TargetArray) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetArrayLibrary.Array_LastIndex");
	UKismetArrayLibrary_Array_LastIndex_Params params;

	params.TargetArray = TargetArray;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetArrayLibrary::Array_IsValidIndex(TArray<int> TargetArray, int IndexToTest) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetArrayLibrary.Array_IsValidIndex");
	UKismetArrayLibrary_Array_IsValidIndex_Params params;

	params.TargetArray = TargetArray;
	params.IndexToTest = IndexToTest;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UKismetArrayLibrary::Array_Insert(TArray<int> TargetArray, int NewItem, int Index) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetArrayLibrary.Array_Insert");
	UKismetArrayLibrary_Array_Insert_Params params;

	params.TargetArray = TargetArray;
	params.NewItem = NewItem;
	params.Index = Index;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetArrayLibrary::Array_Get(TArray<int> TargetArray, int Index, int* Item) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetArrayLibrary.Array_Get");
	UKismetArrayLibrary_Array_Get_Params params;

	params.TargetArray = TargetArray;
	params.Index = Index;
	params.Item = *Item;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

int UKismetArrayLibrary::Array_Find(TArray<int> TargetArray, int ItemToFind) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetArrayLibrary.Array_Find");
	UKismetArrayLibrary_Array_Find_Params params;

	params.TargetArray = TargetArray;
	params.ItemToFind = ItemToFind;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetArrayLibrary::Array_Contains(TArray<int> TargetArray, int ItemToFind) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetArrayLibrary.Array_Contains");
	UKismetArrayLibrary_Array_Contains_Params params;

	params.TargetArray = TargetArray;
	params.ItemToFind = ItemToFind;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UKismetArrayLibrary::Array_Clear(TArray<int> TargetArray) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetArrayLibrary.Array_Clear");
	UKismetArrayLibrary_Array_Clear_Params params;

	params.TargetArray = TargetArray;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetArrayLibrary::Array_Append(TArray<int> TargetArray, TArray<int> SourceArray) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetArrayLibrary.Array_Append");
	UKismetArrayLibrary_Array_Append_Params params;

	params.TargetArray = TargetArray;
	params.SourceArray = SourceArray;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

int UKismetArrayLibrary::Array_AddUnique(TArray<int> TargetArray, int NewItem) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetArrayLibrary.Array_AddUnique");
	UKismetArrayLibrary_Array_AddUnique_Params params;

	params.TargetArray = TargetArray;
	params.NewItem = NewItem;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetArrayLibrary::Array_Add(TArray<int> TargetArray, int NewItem) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetArrayLibrary.Array_Add");
	UKismetArrayLibrary_Array_Add_Params params;

	params.TargetArray = TargetArray;
	params.NewItem = NewItem;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UKismetGuidLibrary::Parse_StringToGuid(const class FString& GuidString, struct FGuid* OutGuid, bool* Success) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetGuidLibrary.Parse_StringToGuid");
	UKismetGuidLibrary_Parse_StringToGuid_Params params;

	params.GuidString = GuidString;
	params.OutGuid = *OutGuid;
	params.Success = Success;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UKismetGuidLibrary::NotEqual_GuidGuid(const struct FGuid& A, const struct FGuid& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetGuidLibrary.NotEqual_GuidGuid");
	UKismetGuidLibrary_NotEqual_GuidGuid_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FGuid UKismetGuidLibrary::NewGuid() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetGuidLibrary.NewGuid");
	UKismetGuidLibrary_NewGuid_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetGuidLibrary::IsValid_Guid(const struct FGuid& InGuid) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetGuidLibrary.IsValid_Guid");
	UKismetGuidLibrary_IsValid_Guid_Params params;

	params.InGuid = InGuid;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UKismetGuidLibrary::Invalidate_Guid(struct FGuid* InGuid) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetGuidLibrary.Invalidate_Guid");
	UKismetGuidLibrary_Invalidate_Guid_Params params;

	params.InGuid = *InGuid;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UKismetGuidLibrary::EqualEqual_GuidGuid(const struct FGuid& A, const struct FGuid& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetGuidLibrary.EqualEqual_GuidGuid");
	UKismetGuidLibrary_EqualEqual_GuidGuid_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetGuidLibrary::Conv_GuidToString(const struct FGuid& InGuid) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetGuidLibrary.Conv_GuidToString");
	UKismetGuidLibrary_Conv_GuidToString_Params params;

	params.InGuid = InGuid;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetInputLibrary::PointerEvent_IsTouchEvent(const struct FPointerEvent& Input) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetInputLibrary.PointerEvent_IsTouchEvent");
	UKismetInputLibrary_PointerEvent_IsTouchEvent_Params params;

	params.Input = Input;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetInputLibrary::PointerEvent_IsMouseButtonDown(const struct FPointerEvent& Input, const struct FKey& MouseButton) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetInputLibrary.PointerEvent_IsMouseButtonDown");
	UKismetInputLibrary_PointerEvent_IsMouseButtonDown_Params params;

	params.Input = Input;
	params.MouseButton = MouseButton;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetInputLibrary::PointerEvent_GetWheelDelta(const struct FPointerEvent& Input) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetInputLibrary.PointerEvent_GetWheelDelta");
	UKismetInputLibrary_PointerEvent_GetWheelDelta_Params params;

	params.Input = Input;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetInputLibrary::PointerEvent_GetUserIndex(const struct FPointerEvent& Input) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetInputLibrary.PointerEvent_GetUserIndex");
	UKismetInputLibrary_PointerEvent_GetUserIndex_Params params;

	params.Input = Input;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetInputLibrary::PointerEvent_GetTouchpadIndex(const struct FPointerEvent& Input) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetInputLibrary.PointerEvent_GetTouchpadIndex");
	UKismetInputLibrary_PointerEvent_GetTouchpadIndex_Params params;

	params.Input = Input;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector2D UKismetInputLibrary::PointerEvent_GetScreenSpacePosition(const struct FPointerEvent& Input) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetInputLibrary.PointerEvent_GetScreenSpacePosition");
	UKismetInputLibrary_PointerEvent_GetScreenSpacePosition_Params params;

	params.Input = Input;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetInputLibrary::PointerEvent_GetPointerIndex(const struct FPointerEvent& Input) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetInputLibrary.PointerEvent_GetPointerIndex");
	UKismetInputLibrary_PointerEvent_GetPointerIndex_Params params;

	params.Input = Input;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector2D UKismetInputLibrary::PointerEvent_GetLastScreenSpacePosition(const struct FPointerEvent& Input) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetInputLibrary.PointerEvent_GetLastScreenSpacePosition");
	UKismetInputLibrary_PointerEvent_GetLastScreenSpacePosition_Params params;

	params.Input = Input;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

ESlateGesture UKismetInputLibrary::PointerEvent_GetGestureType(const struct FPointerEvent& Input) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetInputLibrary.PointerEvent_GetGestureType");
	UKismetInputLibrary_PointerEvent_GetGestureType_Params params;

	params.Input = Input;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector2D UKismetInputLibrary::PointerEvent_GetGestureDelta(const struct FPointerEvent& Input) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetInputLibrary.PointerEvent_GetGestureDelta");
	UKismetInputLibrary_PointerEvent_GetGestureDelta_Params params;

	params.Input = Input;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FKey UKismetInputLibrary::PointerEvent_GetEffectingButton(const struct FPointerEvent& Input) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetInputLibrary.PointerEvent_GetEffectingButton");
	UKismetInputLibrary_PointerEvent_GetEffectingButton_Params params;

	params.Input = Input;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector2D UKismetInputLibrary::PointerEvent_GetCursorDelta(const struct FPointerEvent& Input) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetInputLibrary.PointerEvent_GetCursorDelta");
	UKismetInputLibrary_PointerEvent_GetCursorDelta_Params params;

	params.Input = Input;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetInputLibrary::Key_IsVectorAxis(const struct FKey& Key) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetInputLibrary.Key_IsVectorAxis");
	UKismetInputLibrary_Key_IsVectorAxis_Params params;

	params.Key = Key;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetInputLibrary::Key_IsValid(const struct FKey& Key) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetInputLibrary.Key_IsValid");
	UKismetInputLibrary_Key_IsValid_Params params;

	params.Key = Key;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetInputLibrary::Key_IsMouseButton(const struct FKey& Key) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetInputLibrary.Key_IsMouseButton");
	UKismetInputLibrary_Key_IsMouseButton_Params params;

	params.Key = Key;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetInputLibrary::Key_IsModifierKey(const struct FKey& Key) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetInputLibrary.Key_IsModifierKey");
	UKismetInputLibrary_Key_IsModifierKey_Params params;

	params.Key = Key;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetInputLibrary::Key_IsKeyboardKey(const struct FKey& Key) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetInputLibrary.Key_IsKeyboardKey");
	UKismetInputLibrary_Key_IsKeyboardKey_Params params;

	params.Key = Key;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetInputLibrary::Key_IsGamepadKey(const struct FKey& Key) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetInputLibrary.Key_IsGamepadKey");
	UKismetInputLibrary_Key_IsGamepadKey_Params params;

	params.Key = Key;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetInputLibrary::Key_IsFloatAxis(const struct FKey& Key) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetInputLibrary.Key_IsFloatAxis");
	UKismetInputLibrary_Key_IsFloatAxis_Params params;

	params.Key = Key;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FText UKismetInputLibrary::Key_GetDisplayName(const struct FKey& Key) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetInputLibrary.Key_GetDisplayName");
	UKismetInputLibrary_Key_GetDisplayName_Params params;

	params.Key = Key;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetInputLibrary::InputEvent_IsShiftDown(const struct FInputEvent& Input) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetInputLibrary.InputEvent_IsShiftDown");
	UKismetInputLibrary_InputEvent_IsShiftDown_Params params;

	params.Input = Input;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetInputLibrary::InputEvent_IsRightShiftDown(const struct FInputEvent& Input) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetInputLibrary.InputEvent_IsRightShiftDown");
	UKismetInputLibrary_InputEvent_IsRightShiftDown_Params params;

	params.Input = Input;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetInputLibrary::InputEvent_IsRightControlDown(const struct FInputEvent& Input) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetInputLibrary.InputEvent_IsRightControlDown");
	UKismetInputLibrary_InputEvent_IsRightControlDown_Params params;

	params.Input = Input;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetInputLibrary::InputEvent_IsRightCommandDown(const struct FInputEvent& Input) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetInputLibrary.InputEvent_IsRightCommandDown");
	UKismetInputLibrary_InputEvent_IsRightCommandDown_Params params;

	params.Input = Input;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetInputLibrary::InputEvent_IsRightAltDown(const struct FInputEvent& Input) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetInputLibrary.InputEvent_IsRightAltDown");
	UKismetInputLibrary_InputEvent_IsRightAltDown_Params params;

	params.Input = Input;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetInputLibrary::InputEvent_IsRepeat(const struct FInputEvent& Input) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetInputLibrary.InputEvent_IsRepeat");
	UKismetInputLibrary_InputEvent_IsRepeat_Params params;

	params.Input = Input;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetInputLibrary::InputEvent_IsLeftShiftDown(const struct FInputEvent& Input) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetInputLibrary.InputEvent_IsLeftShiftDown");
	UKismetInputLibrary_InputEvent_IsLeftShiftDown_Params params;

	params.Input = Input;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetInputLibrary::InputEvent_IsLeftControlDown(const struct FInputEvent& Input) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetInputLibrary.InputEvent_IsLeftControlDown");
	UKismetInputLibrary_InputEvent_IsLeftControlDown_Params params;

	params.Input = Input;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetInputLibrary::InputEvent_IsLeftCommandDown(const struct FInputEvent& Input) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetInputLibrary.InputEvent_IsLeftCommandDown");
	UKismetInputLibrary_InputEvent_IsLeftCommandDown_Params params;

	params.Input = Input;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetInputLibrary::InputEvent_IsLeftAltDown(const struct FInputEvent& Input) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetInputLibrary.InputEvent_IsLeftAltDown");
	UKismetInputLibrary_InputEvent_IsLeftAltDown_Params params;

	params.Input = Input;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetInputLibrary::InputEvent_IsControlDown(const struct FInputEvent& Input) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetInputLibrary.InputEvent_IsControlDown");
	UKismetInputLibrary_InputEvent_IsControlDown_Params params;

	params.Input = Input;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetInputLibrary::InputEvent_IsCommandDown(const struct FInputEvent& Input) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetInputLibrary.InputEvent_IsCommandDown");
	UKismetInputLibrary_InputEvent_IsCommandDown_Params params;

	params.Input = Input;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetInputLibrary::InputEvent_IsAltDown(const struct FInputEvent& Input) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetInputLibrary.InputEvent_IsAltDown");
	UKismetInputLibrary_InputEvent_IsAltDown_Params params;

	params.Input = Input;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetInputLibrary::GetUserIndex(const struct FKeyEvent& Input) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetInputLibrary.GetUserIndex");
	UKismetInputLibrary_GetUserIndex_Params params;

	params.Input = Input;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FKey UKismetInputLibrary::GetKey(const struct FKeyEvent& Input) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetInputLibrary.GetKey");
	UKismetInputLibrary_GetKey_Params params;

	params.Input = Input;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetInputLibrary::GetAnalogValue(const struct FAnalogInputEvent& Input) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetInputLibrary.GetAnalogValue");
	UKismetInputLibrary_GetAnalogValue_Params params;

	params.Input = Input;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetInputLibrary::EqualEqual_KeyKey(const struct FKey& A, const struct FKey& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetInputLibrary.EqualEqual_KeyKey");
	UKismetInputLibrary_EqualEqual_KeyKey_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetInputLibrary::EqualEqual_InputChordInputChord(const struct FInputChord& A, const struct FInputChord& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetInputLibrary.EqualEqual_InputChordInputChord");
	UKismetInputLibrary_EqualEqual_InputChordInputChord_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UKismetInputLibrary::CalibrateTilt() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetInputLibrary.CalibrateTilt");
	UKismetInputLibrary_CalibrateTilt_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UKismetInternationalizationLibrary::SetCurrentLocale(const class FString& Culture, bool SaveToConfig) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetInternationalizationLibrary.SetCurrentLocale");
	UKismetInternationalizationLibrary_SetCurrentLocale_Params params;

	params.Culture = Culture;
	params.SaveToConfig = SaveToConfig;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetInternationalizationLibrary::SetCurrentLanguageAndLocale(const class FString& Culture, bool SaveToConfig) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetInternationalizationLibrary.SetCurrentLanguageAndLocale");
	UKismetInternationalizationLibrary_SetCurrentLanguageAndLocale_Params params;

	params.Culture = Culture;
	params.SaveToConfig = SaveToConfig;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetInternationalizationLibrary::SetCurrentLanguage(const class FString& Culture, bool SaveToConfig) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetInternationalizationLibrary.SetCurrentLanguage");
	UKismetInternationalizationLibrary_SetCurrentLanguage_Params params;

	params.Culture = Culture;
	params.SaveToConfig = SaveToConfig;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetInternationalizationLibrary::SetCurrentCulture(const class FString& Culture, bool SaveToConfig) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetInternationalizationLibrary.SetCurrentCulture");
	UKismetInternationalizationLibrary_SetCurrentCulture_Params params;

	params.Culture = Culture;
	params.SaveToConfig = SaveToConfig;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetInternationalizationLibrary::SetCurrentAssetGroupCulture(const struct FName& AssetGroup, const class FString& Culture, bool SaveToConfig) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetInternationalizationLibrary.SetCurrentAssetGroupCulture");
	UKismetInternationalizationLibrary_SetCurrentAssetGroupCulture_Params params;

	params.AssetGroup = AssetGroup;
	params.Culture = Culture;
	params.SaveToConfig = SaveToConfig;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetInternationalizationLibrary::GetCurrentLocale() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetInternationalizationLibrary.GetCurrentLocale");
	UKismetInternationalizationLibrary_GetCurrentLocale_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetInternationalizationLibrary::GetCurrentLanguage() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetInternationalizationLibrary.GetCurrentLanguage");
	UKismetInternationalizationLibrary_GetCurrentLanguage_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetInternationalizationLibrary::GetCurrentCulture() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetInternationalizationLibrary.GetCurrentCulture");
	UKismetInternationalizationLibrary_GetCurrentCulture_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetInternationalizationLibrary::GetCurrentAssetGroupCulture(const struct FName& AssetGroup) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetInternationalizationLibrary.GetCurrentAssetGroupCulture");
	UKismetInternationalizationLibrary_GetCurrentAssetGroupCulture_Params params;

	params.AssetGroup = AssetGroup;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UKismetInternationalizationLibrary::ClearCurrentAssetGroupCulture(const struct FName& AssetGroup, bool SaveToConfig) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetInternationalizationLibrary.ClearCurrentAssetGroupCulture");
	UKismetInternationalizationLibrary_ClearCurrentAssetGroupCulture_Params params;

	params.AssetGroup = AssetGroup;
	params.SaveToConfig = SaveToConfig;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetMaterialLibrary::SetVectorParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, const struct FName& ParameterName, const struct FLinearColor& ParameterValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMaterialLibrary.SetVectorParameterValue");
	UKismetMaterialLibrary_SetVectorParameterValue_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Collection = Collection;
	params.ParameterName = ParameterName;
	params.ParameterValue = ParameterValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetMaterialLibrary::SetScalarParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, const struct FName& ParameterName, float ParameterValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMaterialLibrary.SetScalarParameterValue");
	UKismetMaterialLibrary_SetScalarParameterValue_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Collection = Collection;
	params.ParameterName = ParameterName;
	params.ParameterValue = ParameterValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

struct FLinearColor UKismetMaterialLibrary::GetVectorParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, const struct FName& ParameterName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMaterialLibrary.GetVectorParameterValue");
	UKismetMaterialLibrary_GetVectorParameterValue_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Collection = Collection;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMaterialLibrary::GetScalarParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, const struct FName& ParameterName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMaterialLibrary.GetScalarParameterValue");
	UKismetMaterialLibrary_GetScalarParameterValue_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Collection = Collection;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UMaterialInstanceDynamic* UKismetMaterialLibrary::CreateDynamicMaterialInstance(class UObject* WorldContextObject, class UMaterialInterface* Parent, const struct FName& OptionalName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMaterialLibrary.CreateDynamicMaterialInstance");
	UKismetMaterialLibrary_CreateDynamicMaterialInstance_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Parent = Parent;
	params.OptionalName = OptionalName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetMathLibrary::Xor_IntInt(int A, int B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Xor_IntInt");
	UKismetMathLibrary_Xor_IntInt_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::VSizeXY(const struct FVector& A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.VSizeXY");
	UKismetMathLibrary_VSizeXY_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::VSizeSquared(const struct FVector& A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.VSizeSquared");
	UKismetMathLibrary_VSizeSquared_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::VSize2DSquared(const struct FVector2D& A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.VSize2DSquared");
	UKismetMathLibrary_VSize2DSquared_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::VSize2D(const struct FVector2D& A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.VSize2D");
	UKismetMathLibrary_VSize2D_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::VSize(const struct FVector& A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.VSize");
	UKismetMathLibrary_VSize_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::VLerp(const struct FVector& A, const struct FVector& B, float Alpha) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.VLerp");
	UKismetMathLibrary_VLerp_Params params;

	params.A = A;
	params.B = B;
	params.Alpha = Alpha;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::VInterpTo_Constant(const struct FVector& Current, const struct FVector& Target, float DeltaTime, float InterpSpeed) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.VInterpTo_Constant");
	UKismetMathLibrary_VInterpTo_Constant_Params params;

	params.Current = Current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::VInterpTo(const struct FVector& Current, const struct FVector& Target, float DeltaTime, float InterpSpeed) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.VInterpTo");
	UKismetMathLibrary_VInterpTo_Params params;

	params.Current = Current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::VectorSpringInterp(const struct FVector& Current, const struct FVector& Target, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass, struct FVectorSpringState* SpringState) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.VectorSpringInterp");
	UKismetMathLibrary_VectorSpringInterp_Params params;

	params.Current = Current;
	params.Target = Target;
	params.Stiffness = Stiffness;
	params.CriticalDampingFactor = CriticalDampingFactor;
	params.DeltaTime = DeltaTime;
	params.Mass = Mass;
	params.SpringState = *SpringState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector2D UKismetMathLibrary::Vector2DInterpTo_Constant(const struct FVector2D& Current, const struct FVector2D& Target, float DeltaTime, float InterpSpeed) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Vector2DInterpTo_Constant");
	UKismetMathLibrary_Vector2DInterpTo_Constant_Params params;

	params.Current = Current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector2D UKismetMathLibrary::Vector2DInterpTo(const struct FVector2D& Current, const struct FVector2D& Target, float DeltaTime, float InterpSpeed) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Vector2DInterpTo");
	UKismetMathLibrary_Vector2DInterpTo_Params params;

	params.Current = Current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::VEase(const struct FVector& A, const struct FVector& B, float Alpha, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int Steps) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.VEase");
	UKismetMathLibrary_VEase_Params params;

	params.A = A;
	params.B = B;
	params.Alpha = Alpha;
	params.EasingFunc = EasingFunc;
	params.BlendExp = BlendExp;
	params.Steps = Steps;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FDateTime UKismetMathLibrary::UtcNow() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.UtcNow");
	UKismetMathLibrary_UtcNow_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FRotator UKismetMathLibrary::TransformRotation(const struct FTransform& T, const struct FRotator& Rotation) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.TransformRotation");
	UKismetMathLibrary_TransformRotation_Params params;

	params.T = T;
	params.Rotation = Rotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::TransformLocation(const struct FTransform& T, const struct FVector& Location) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.TransformLocation");
	UKismetMathLibrary_TransformLocation_Params params;

	params.T = T;
	params.Location = Location;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::TransformDirection(const struct FTransform& T, const struct FVector& Direction) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.TransformDirection");
	UKismetMathLibrary_TransformDirection_Params params;

	params.T = T;
	params.Direction = Direction;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::Transform_Determinant(const struct FTransform& Transform) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Transform_Determinant");
	UKismetMathLibrary_Transform_Determinant_Params params;

	params.Transform = Transform;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FDateTime UKismetMathLibrary::Today() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Today");
	UKismetMathLibrary_Today_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FTransform UKismetMathLibrary::TLerp(const struct FTransform& A, const struct FTransform& B, float Alpha, TEnumAsByte<ELerpInterpolationMode> InterpMode) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.TLerp");
	UKismetMathLibrary_TLerp_Params params;

	params.A = A;
	params.B = B;
	params.Alpha = Alpha;
	params.InterpMode = InterpMode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FTransform UKismetMathLibrary::TInterpTo(const struct FTransform& Current, const struct FTransform& Target, float DeltaTime, float InterpSpeed) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.TInterpTo");
	UKismetMathLibrary_TInterpTo_Params params;

	params.Current = Current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FTimespan UKismetMathLibrary::TimespanZeroValue() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.TimespanZeroValue");
	UKismetMathLibrary_TimespanZeroValue_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::TimespanRatio(const struct FTimespan& A, const struct FTimespan& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.TimespanRatio");
	UKismetMathLibrary_TimespanRatio_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FTimespan UKismetMathLibrary::TimespanMinValue() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.TimespanMinValue");
	UKismetMathLibrary_TimespanMinValue_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FTimespan UKismetMathLibrary::TimespanMaxValue() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.TimespanMaxValue");
	UKismetMathLibrary_TimespanMaxValue_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::TimespanFromString(const class FString& TimespanString, struct FTimespan* Result) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.TimespanFromString");
	UKismetMathLibrary_TimespanFromString_Params params;

	params.TimespanString = TimespanString;
	params.Result = *Result;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FTransform UKismetMathLibrary::TEase(const struct FTransform& A, const struct FTransform& B, float Alpha, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int Steps) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.TEase");
	UKismetMathLibrary_TEase_Params params;

	params.A = A;
	params.B = B;
	params.Alpha = Alpha;
	params.EasingFunc = EasingFunc;
	params.BlendExp = BlendExp;
	params.Steps = Steps;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::Tan(float A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Tan");
	UKismetMathLibrary_Tan_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::Subtract_VectorVector(const struct FVector& A, const struct FVector& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Subtract_VectorVector");
	UKismetMathLibrary_Subtract_VectorVector_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::Subtract_VectorInt(const struct FVector& A, int B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Subtract_VectorInt");
	UKismetMathLibrary_Subtract_VectorInt_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::Subtract_VectorFloat(const struct FVector& A, float B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Subtract_VectorFloat");
	UKismetMathLibrary_Subtract_VectorFloat_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector2D UKismetMathLibrary::Subtract_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Subtract_Vector2DVector2D");
	UKismetMathLibrary_Subtract_Vector2DVector2D_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector2D UKismetMathLibrary::Subtract_Vector2DFloat(const struct FVector2D& A, float B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Subtract_Vector2DFloat");
	UKismetMathLibrary_Subtract_Vector2DFloat_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FTimespan UKismetMathLibrary::Subtract_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Subtract_TimespanTimespan");
	UKismetMathLibrary_Subtract_TimespanTimespan_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetMathLibrary::Subtract_IntInt(int A, int B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Subtract_IntInt");
	UKismetMathLibrary_Subtract_IntInt_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::Subtract_FloatFloat(float A, float B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Subtract_FloatFloat");
	UKismetMathLibrary_Subtract_FloatFloat_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FDateTime UKismetMathLibrary::Subtract_DateTimeTimespan(const struct FDateTime& A, const struct FTimespan& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Subtract_DateTimeTimespan");
	UKismetMathLibrary_Subtract_DateTimeTimespan_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FTimespan UKismetMathLibrary::Subtract_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Subtract_DateTimeDateTime");
	UKismetMathLibrary_Subtract_DateTimeDateTime_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::Square(float A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Square");
	UKismetMathLibrary_Square_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::Sqrt(float A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Sqrt");
	UKismetMathLibrary_Sqrt_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::Sin(float A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Sin");
	UKismetMathLibrary_Sin_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetMathLibrary::SignOfInteger(int A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.SignOfInteger");
	UKismetMathLibrary_SignOfInteger_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::SignOfFloat(float A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.SignOfFloat");
	UKismetMathLibrary_SignOfFloat_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UKismetMathLibrary::SetRandomStreamSeed(int NewSeed, struct FRandomStream* Stream) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.SetRandomStreamSeed");
	UKismetMathLibrary_SetRandomStreamSeed_Params params;

	params.NewSeed = NewSeed;
	params.Stream = *Stream;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

struct FVector UKismetMathLibrary::SelectVector(const struct FVector& A, const struct FVector& B, bool bPickA) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.SelectVector");
	UKismetMathLibrary_SelectVector_Params params;

	params.A = A;
	params.B = B;
	params.bPickA = bPickA;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FTransform UKismetMathLibrary::SelectTransform(const struct FTransform& A, const struct FTransform& B, bool bPickA) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.SelectTransform");
	UKismetMathLibrary_SelectTransform_Params params;

	params.A = A;
	params.B = B;
	params.bPickA = bPickA;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetMathLibrary::SelectString(const class FString& A, const class FString& B, bool bPickA) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.SelectString");
	UKismetMathLibrary_SelectString_Params params;

	params.A = A;
	params.B = B;
	params.bPickA = bPickA;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FRotator UKismetMathLibrary::SelectRotator(const struct FRotator& A, const struct FRotator& B, bool bPickA) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.SelectRotator");
	UKismetMathLibrary_SelectRotator_Params params;

	params.A = A;
	params.B = B;
	params.bPickA = bPickA;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UObject* UKismetMathLibrary::SelectObject(class UObject* A, class UObject* B, bool bSelectA) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.SelectObject");
	UKismetMathLibrary_SelectObject_Params params;

	params.A = A;
	params.B = B;
	params.bSelectA = bSelectA;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetMathLibrary::SelectInt(int A, int B, bool bPickA) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.SelectInt");
	UKismetMathLibrary_SelectInt_Params params;

	params.A = A;
	params.B = B;
	params.bPickA = bPickA;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::SelectFloat(float A, float B, bool bPickA) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.SelectFloat");
	UKismetMathLibrary_SelectFloat_Params params;

	params.A = A;
	params.B = B;
	params.bPickA = bPickA;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FLinearColor UKismetMathLibrary::SelectColor(const struct FLinearColor& A, const struct FLinearColor& B, bool bPickA) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.SelectColor");
	UKismetMathLibrary_SelectColor_Params params;

	params.A = A;
	params.B = B;
	params.bPickA = bPickA;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UClass* UKismetMathLibrary::SelectClass(class UClass* A, class UClass* B, bool bSelectA) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.SelectClass");
	UKismetMathLibrary_SelectClass_Params params;

	params.A = A;
	params.B = B;
	params.bSelectA = bSelectA;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UKismetMathLibrary::SeedRandomStream(struct FRandomStream* Stream) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.SeedRandomStream");
	UKismetMathLibrary_SeedRandomStream_Params params;

	params.Stream = *Stream;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

int UKismetMathLibrary::Round(float A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Round");
	UKismetMathLibrary_Round_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FRotator UKismetMathLibrary::RotatorFromAxisAndAngle(const struct FVector& AXIS, float Angle) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.RotatorFromAxisAndAngle");
	UKismetMathLibrary_RotatorFromAxisAndAngle_Params params;

	params.AXIS = AXIS;
	params.Angle = Angle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::RotateAngleAxis(const struct FVector& InVect, float AngleDeg, const struct FVector& AXIS) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.RotateAngleAxis");
	UKismetMathLibrary_RotateAngleAxis_Params params;

	params.InVect = InVect;
	params.AngleDeg = AngleDeg;
	params.AXIS = AXIS;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FRotator UKismetMathLibrary::RLerp(const struct FRotator& A, const struct FRotator& B, float Alpha, bool bShortestPath) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.RLerp");
	UKismetMathLibrary_RLerp_Params params;

	params.A = A;
	params.B = B;
	params.Alpha = Alpha;
	params.bShortestPath = bShortestPath;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FRotator UKismetMathLibrary::RInterpTo_Constant(const struct FRotator& Current, const struct FRotator& Target, float DeltaTime, float InterpSpeed) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.RInterpTo_Constant");
	UKismetMathLibrary_RInterpTo_Constant_Params params;

	params.Current = Current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FRotator UKismetMathLibrary::RInterpTo(const struct FRotator& Current, const struct FRotator& Target, float DeltaTime, float InterpSpeed) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.RInterpTo");
	UKismetMathLibrary_RInterpTo_Params params;

	params.Current = Current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UKismetMathLibrary::RGBToHSV_Vector(const struct FLinearColor& RGB, struct FLinearColor* HSV) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.RGBToHSV_Vector");
	UKismetMathLibrary_RGBToHSV_Vector_Params params;

	params.RGB = RGB;
	params.HSV = *HSV;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetMathLibrary::RGBToHSV(const struct FLinearColor& InColor, float* H, float* S, float* V, float* A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.RGBToHSV");
	UKismetMathLibrary_RGBToHSV_Params params;

	params.InColor = InColor;
	params.H = *H;
	params.S = *S;
	params.V = *V;
	params.A = *A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetMathLibrary::ResetVectorSpringState(struct FVectorSpringState* SpringState) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.ResetVectorSpringState");
	UKismetMathLibrary_ResetVectorSpringState_Params params;

	params.SpringState = *SpringState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetMathLibrary::ResetRandomStream(const struct FRandomStream& Stream) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.ResetRandomStream");
	UKismetMathLibrary_ResetRandomStream_Params params;

	params.Stream = Stream;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetMathLibrary::ResetFloatSpringState(struct FFloatSpringState* SpringState) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.ResetFloatSpringState");
	UKismetMathLibrary_ResetFloatSpringState_Params params;

	params.SpringState = *SpringState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

struct FRotator UKismetMathLibrary::REase(const struct FRotator& A, const struct FRotator& B, float Alpha, bool bShortestPath, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int Steps) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.REase");
	UKismetMathLibrary_REase_Params params;

	params.A = A;
	params.B = B;
	params.Alpha = Alpha;
	params.bShortestPath = bShortestPath;
	params.EasingFunc = EasingFunc;
	params.BlendExp = BlendExp;
	params.Steps = Steps;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::RandomUnitVectorInEllipticalConeInRadiansFromStream(const struct FVector& ConeDir, float MaxYawInRadians, float MaxPitchInRadians, const struct FRandomStream& Stream) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInRadiansFromStream");
	UKismetMathLibrary_RandomUnitVectorInEllipticalConeInRadiansFromStream_Params params;

	params.ConeDir = ConeDir;
	params.MaxYawInRadians = MaxYawInRadians;
	params.MaxPitchInRadians = MaxPitchInRadians;
	params.Stream = Stream;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::RandomUnitVectorInEllipticalConeInRadians(const struct FVector& ConeDir, float MaxYawInRadians, float MaxPitchInRadians) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInRadians");
	UKismetMathLibrary_RandomUnitVectorInEllipticalConeInRadians_Params params;

	params.ConeDir = ConeDir;
	params.MaxYawInRadians = MaxYawInRadians;
	params.MaxPitchInRadians = MaxPitchInRadians;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::RandomUnitVectorInEllipticalConeInDegreesFromStream(const struct FVector& ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees, const struct FRandomStream& Stream) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInDegreesFromStream");
	UKismetMathLibrary_RandomUnitVectorInEllipticalConeInDegreesFromStream_Params params;

	params.ConeDir = ConeDir;
	params.MaxYawInDegrees = MaxYawInDegrees;
	params.MaxPitchInDegrees = MaxPitchInDegrees;
	params.Stream = Stream;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::RandomUnitVectorInEllipticalConeInDegrees(const struct FVector& ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInDegrees");
	UKismetMathLibrary_RandomUnitVectorInEllipticalConeInDegrees_Params params;

	params.ConeDir = ConeDir;
	params.MaxYawInDegrees = MaxYawInDegrees;
	params.MaxPitchInDegrees = MaxPitchInDegrees;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::RandomUnitVectorInConeInRadiansFromStream(const struct FVector& ConeDir, float ConeHalfAngleInRadians, const struct FRandomStream& Stream) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.RandomUnitVectorInConeInRadiansFromStream");
	UKismetMathLibrary_RandomUnitVectorInConeInRadiansFromStream_Params params;

	params.ConeDir = ConeDir;
	params.ConeHalfAngleInRadians = ConeHalfAngleInRadians;
	params.Stream = Stream;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::RandomUnitVectorInConeInRadians(const struct FVector& ConeDir, float ConeHalfAngleInRadians) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.RandomUnitVectorInConeInRadians");
	UKismetMathLibrary_RandomUnitVectorInConeInRadians_Params params;

	params.ConeDir = ConeDir;
	params.ConeHalfAngleInRadians = ConeHalfAngleInRadians;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::RandomUnitVectorInConeInDegreesFromStream(const struct FVector& ConeDir, float ConeHalfAngleInDegrees, const struct FRandomStream& Stream) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.RandomUnitVectorInConeInDegreesFromStream");
	UKismetMathLibrary_RandomUnitVectorInConeInDegreesFromStream_Params params;

	params.ConeDir = ConeDir;
	params.ConeHalfAngleInDegrees = ConeHalfAngleInDegrees;
	params.Stream = Stream;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::RandomUnitVectorInConeInDegrees(const struct FVector& ConeDir, float ConeHalfAngleInDegrees) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.RandomUnitVectorInConeInDegrees");
	UKismetMathLibrary_RandomUnitVectorInConeInDegrees_Params params;

	params.ConeDir = ConeDir;
	params.ConeHalfAngleInDegrees = ConeHalfAngleInDegrees;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::RandomUnitVectorFromStream(const struct FRandomStream& Stream) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.RandomUnitVectorFromStream");
	UKismetMathLibrary_RandomUnitVectorFromStream_Params params;

	params.Stream = Stream;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::RandomUnitVector() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.RandomUnitVector");
	UKismetMathLibrary_RandomUnitVector_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FRotator UKismetMathLibrary::RandomRotatorFromStream(bool bRoll, const struct FRandomStream& Stream) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.RandomRotatorFromStream");
	UKismetMathLibrary_RandomRotatorFromStream_Params params;

	params.bRoll = bRoll;
	params.Stream = Stream;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FRotator UKismetMathLibrary::RandomRotator(bool bRoll) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.RandomRotator");
	UKismetMathLibrary_RandomRotator_Params params;

	params.bRoll = bRoll;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::RandomPointInBoundingBox(const struct FVector& Origin, const struct FVector& BoxExtent) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.RandomPointInBoundingBox");
	UKismetMathLibrary_RandomPointInBoundingBox_Params params;

	params.Origin = Origin;
	params.BoxExtent = BoxExtent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetMathLibrary::RandomIntegerInRangeFromStream(int Min, int Max, const struct FRandomStream& Stream) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.RandomIntegerInRangeFromStream");
	UKismetMathLibrary_RandomIntegerInRangeFromStream_Params params;

	params.Min = Min;
	params.Max = Max;
	params.Stream = Stream;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetMathLibrary::RandomIntegerInRange(int Min, int Max) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.RandomIntegerInRange");
	UKismetMathLibrary_RandomIntegerInRange_Params params;

	params.Min = Min;
	params.Max = Max;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetMathLibrary::RandomIntegerFromStream(int Max, const struct FRandomStream& Stream) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.RandomIntegerFromStream");
	UKismetMathLibrary_RandomIntegerFromStream_Params params;

	params.Max = Max;
	params.Stream = Stream;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetMathLibrary::RandomInteger(int Max) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.RandomInteger");
	UKismetMathLibrary_RandomInteger_Params params;

	params.Max = Max;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::RandomFloatInRangeFromStream(float Min, float Max, const struct FRandomStream& Stream) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.RandomFloatInRangeFromStream");
	UKismetMathLibrary_RandomFloatInRangeFromStream_Params params;

	params.Min = Min;
	params.Max = Max;
	params.Stream = Stream;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::RandomFloatInRange(float Min, float Max) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.RandomFloatInRange");
	UKismetMathLibrary_RandomFloatInRange_Params params;

	params.Min = Min;
	params.Max = Max;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::RandomFloatFromStream(const struct FRandomStream& Stream) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.RandomFloatFromStream");
	UKismetMathLibrary_RandomFloatFromStream_Params params;

	params.Stream = Stream;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::RandomFloat() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.RandomFloat");
	UKismetMathLibrary_RandomFloat_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::RandomBoolWithWeightFromStream(float Weight, const struct FRandomStream& RandomStream) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.RandomBoolWithWeightFromStream");
	UKismetMathLibrary_RandomBoolWithWeightFromStream_Params params;

	params.Weight = Weight;
	params.RandomStream = RandomStream;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::RandomBoolWithWeight(float Weight) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.RandomBoolWithWeight");
	UKismetMathLibrary_RandomBoolWithWeight_Params params;

	params.Weight = Weight;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::RandomBoolFromStream(const struct FRandomStream& Stream) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.RandomBoolFromStream");
	UKismetMathLibrary_RandomBoolFromStream_Params params;

	params.Stream = Stream;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::RandomBool() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.RandomBool");
	UKismetMathLibrary_RandomBool_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::RadiansToDegrees(float A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.RadiansToDegrees");
	UKismetMathLibrary_RadiansToDegrees_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::ProjectVectorOnToVector(const struct FVector& V, const struct FVector& Target) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.ProjectVectorOnToVector");
	UKismetMathLibrary_ProjectVectorOnToVector_Params params;

	params.V = V;
	params.Target = Target;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::ProjectVectorOnToPlane(const struct FVector& V, const struct FVector& PlaneNormal) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.ProjectVectorOnToPlane");
	UKismetMathLibrary_ProjectVectorOnToPlane_Params params;

	params.V = V;
	params.PlaneNormal = PlaneNormal;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::ProjectPointOnToPlane(const struct FVector& Point, const struct FVector& PlaneBase, const struct FVector& PlaneNormal) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.ProjectPointOnToPlane");
	UKismetMathLibrary_ProjectPointOnToPlane_Params params;

	params.Point = Point;
	params.PlaneBase = PlaneBase;
	params.PlaneNormal = PlaneNormal;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::PointsAreCoplanar(TArray<struct FVector> Points, float Tolerance) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.PointsAreCoplanar");
	UKismetMathLibrary_PointsAreCoplanar_Params params;

	params.Points = Points;
	params.Tolerance = Tolerance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetMathLibrary::Percent_IntInt(int A, int B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Percent_IntInt");
	UKismetMathLibrary_Percent_IntInt_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::Percent_FloatFloat(float A, float B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Percent_FloatFloat");
	UKismetMathLibrary_Percent_FloatFloat_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetMathLibrary::Or_IntInt(int A, int B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Or_IntInt");
	UKismetMathLibrary_Or_IntInt_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FDateTime UKismetMathLibrary::Now() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Now");
	UKismetMathLibrary_Now_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::NotEqual_VectorVector(const struct FVector& A, const struct FVector& B, float ErrorTolerance) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.NotEqual_VectorVector");
	UKismetMathLibrary_NotEqual_VectorVector_Params params;

	params.A = A;
	params.B = B;
	params.ErrorTolerance = ErrorTolerance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::NotEqual_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B, float ErrorTolerance) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.NotEqual_Vector2DVector2D");
	UKismetMathLibrary_NotEqual_Vector2DVector2D_Params params;

	params.A = A;
	params.B = B;
	params.ErrorTolerance = ErrorTolerance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::NotEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.NotEqual_TimespanTimespan");
	UKismetMathLibrary_NotEqual_TimespanTimespan_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::NotEqual_RotatorRotator(const struct FRotator& A, const struct FRotator& B, float ErrorTolerance) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.NotEqual_RotatorRotator");
	UKismetMathLibrary_NotEqual_RotatorRotator_Params params;

	params.A = A;
	params.B = B;
	params.ErrorTolerance = ErrorTolerance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::NotEqual_ObjectObject(class UObject* A, class UObject* B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.NotEqual_ObjectObject");
	UKismetMathLibrary_NotEqual_ObjectObject_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::NotEqual_NameName(const struct FName& A, const struct FName& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.NotEqual_NameName");
	UKismetMathLibrary_NotEqual_NameName_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::NotEqual_IntInt(int A, int B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.NotEqual_IntInt");
	UKismetMathLibrary_NotEqual_IntInt_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::NotEqual_FloatFloat(float A, float B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.NotEqual_FloatFloat");
	UKismetMathLibrary_NotEqual_FloatFloat_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::NotEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.NotEqual_DateTimeDateTime");
	UKismetMathLibrary_NotEqual_DateTimeDateTime_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::NotEqual_ClassClass(class UClass* A, class UClass* B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.NotEqual_ClassClass");
	UKismetMathLibrary_NotEqual_ClassClass_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::NotEqual_ByteByte(unsigned char A, unsigned char B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.NotEqual_ByteByte");
	UKismetMathLibrary_NotEqual_ByteByte_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::NotEqual_BoolBool(bool A, bool B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.NotEqual_BoolBool");
	UKismetMathLibrary_NotEqual_BoolBool_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::Not_PreBool(bool A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Not_PreBool");
	UKismetMathLibrary_Not_PreBool_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetMathLibrary::Not_Int(int A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Not_Int");
	UKismetMathLibrary_Not_Int_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::NormalizeToRange(float Value, float RangeMin, float RangeMax) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.NormalizeToRange");
	UKismetMathLibrary_NormalizeToRange_Params params;

	params.Value = Value;
	params.RangeMin = RangeMin;
	params.RangeMax = RangeMax;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FRotator UKismetMathLibrary::NormalizedDeltaRotator(const struct FRotator& A, const struct FRotator& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.NormalizedDeltaRotator");
	UKismetMathLibrary_NormalizedDeltaRotator_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::NormalizeAxis(float Angle) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.NormalizeAxis");
	UKismetMathLibrary_NormalizeAxis_Params params;

	params.Angle = Angle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector2D UKismetMathLibrary::Normal2D(const struct FVector2D& A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Normal2D");
	UKismetMathLibrary_Normal2D_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::Normal(const struct FVector& A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Normal");
	UKismetMathLibrary_Normal_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::NegateVector(const struct FVector& A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.NegateVector");
	UKismetMathLibrary_NegateVector_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FRotator UKismetMathLibrary::NegateRotator(const struct FRotator& A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.NegateRotator");
	UKismetMathLibrary_NegateRotator_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::NearlyEqual_TransformTransform(const struct FTransform& A, const struct FTransform& B, float LocationTolerance, float RotationTolerance, float Scale3DTolerance) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.NearlyEqual_TransformTransform");
	UKismetMathLibrary_NearlyEqual_TransformTransform_Params params;

	params.A = A;
	params.B = B;
	params.LocationTolerance = LocationTolerance;
	params.RotationTolerance = RotationTolerance;
	params.Scale3DTolerance = Scale3DTolerance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::NearlyEqual_FloatFloat(float A, float B, float ErrorTolerance) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.NearlyEqual_FloatFloat");
	UKismetMathLibrary_NearlyEqual_FloatFloat_Params params;

	params.A = A;
	params.B = B;
	params.ErrorTolerance = ErrorTolerance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::MultiplyMultiply_FloatFloat(float Base, float Exp) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.MultiplyMultiply_FloatFloat");
	UKismetMathLibrary_MultiplyMultiply_FloatFloat_Params params;

	params.Base = Base;
	params.Exp = Exp;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::MultiplyByPi(float Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.MultiplyByPi");
	UKismetMathLibrary_MultiplyByPi_Params params;

	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::Multiply_VectorVector(const struct FVector& A, const struct FVector& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Multiply_VectorVector");
	UKismetMathLibrary_Multiply_VectorVector_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::Multiply_VectorInt(const struct FVector& A, int B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Multiply_VectorInt");
	UKismetMathLibrary_Multiply_VectorInt_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::Multiply_VectorFloat(const struct FVector& A, float B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Multiply_VectorFloat");
	UKismetMathLibrary_Multiply_VectorFloat_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector2D UKismetMathLibrary::Multiply_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Multiply_Vector2DVector2D");
	UKismetMathLibrary_Multiply_Vector2DVector2D_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector2D UKismetMathLibrary::Multiply_Vector2DFloat(const struct FVector2D& A, float B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Multiply_Vector2DFloat");
	UKismetMathLibrary_Multiply_Vector2DFloat_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FTimespan UKismetMathLibrary::Multiply_TimespanFloat(const struct FTimespan& A, float Scalar) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Multiply_TimespanFloat");
	UKismetMathLibrary_Multiply_TimespanFloat_Params params;

	params.A = A;
	params.Scalar = Scalar;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FRotator UKismetMathLibrary::Multiply_RotatorInt(const struct FRotator& A, int B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Multiply_RotatorInt");
	UKismetMathLibrary_Multiply_RotatorInt_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FRotator UKismetMathLibrary::Multiply_RotatorFloat(const struct FRotator& A, float B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Multiply_RotatorFloat");
	UKismetMathLibrary_Multiply_RotatorFloat_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FLinearColor UKismetMathLibrary::Multiply_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Multiply_LinearColorLinearColor");
	UKismetMathLibrary_Multiply_LinearColorLinearColor_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FLinearColor UKismetMathLibrary::Multiply_LinearColorFloat(const struct FLinearColor& A, float B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Multiply_LinearColorFloat");
	UKismetMathLibrary_Multiply_LinearColorFloat_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetMathLibrary::Multiply_IntInt(int A, int B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Multiply_IntInt");
	UKismetMathLibrary_Multiply_IntInt_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::Multiply_IntFloat(int A, float B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Multiply_IntFloat");
	UKismetMathLibrary_Multiply_IntFloat_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::Multiply_FloatFloat(float A, float B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Multiply_FloatFloat");
	UKismetMathLibrary_Multiply_FloatFloat_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::MirrorVectorByNormal(const struct FVector& InVect, const struct FVector& InNormal) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.MirrorVectorByNormal");
	UKismetMathLibrary_MirrorVectorByNormal_Params params;

	params.InVect = InVect;
	params.InNormal = InNormal;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UKismetMathLibrary::MinOfIntArray(TArray<int> IntArray, int* IndexOfMinValue, int* MinValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.MinOfIntArray");
	UKismetMathLibrary_MinOfIntArray_Params params;

	params.IntArray = IntArray;
	params.IndexOfMinValue = *IndexOfMinValue;
	params.MinValue = *MinValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetMathLibrary::MinOfFloatArray(TArray<float> FloatArray, int* IndexOfMinValue, float* MinValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.MinOfFloatArray");
	UKismetMathLibrary_MinOfFloatArray_Params params;

	params.FloatArray = FloatArray;
	params.IndexOfMinValue = *IndexOfMinValue;
	params.MinValue = *MinValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetMathLibrary::MinOfByteArray(TArray<unsigned char> ByteArray, int* IndexOfMinValue, unsigned char* MinValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.MinOfByteArray");
	UKismetMathLibrary_MinOfByteArray_Params params;

	params.ByteArray = ByteArray;
	params.IndexOfMinValue = *IndexOfMinValue;
	params.MinValue = *MinValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetMathLibrary::MinimumAreaRectangle(class UObject* WorldContextObject, TArray<struct FVector> InVerts, const struct FVector& SampleSurfaceNormal, bool bDebugDraw, struct FVector* OutRectCenter, struct FRotator* OutRectRotation, float* OutSideLengthX, float* OutSideLengthY) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.MinimumAreaRectangle");
	UKismetMathLibrary_MinimumAreaRectangle_Params params;

	params.WorldContextObject = WorldContextObject;
	params.InVerts = InVerts;
	params.SampleSurfaceNormal = SampleSurfaceNormal;
	params.bDebugDraw = bDebugDraw;
	params.OutRectCenter = *OutRectCenter;
	params.OutRectRotation = *OutRectRotation;
	params.OutSideLengthX = *OutSideLengthX;
	params.OutSideLengthY = *OutSideLengthY;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

int UKismetMathLibrary::Min(int A, int B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Min");
	UKismetMathLibrary_Min_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UKismetMathLibrary::MaxOfIntArray(TArray<int> IntArray, int* IndexOfMaxValue, int* MaxValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.MaxOfIntArray");
	UKismetMathLibrary_MaxOfIntArray_Params params;

	params.IntArray = IntArray;
	params.IndexOfMaxValue = *IndexOfMaxValue;
	params.MaxValue = *MaxValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetMathLibrary::MaxOfFloatArray(TArray<float> FloatArray, int* IndexOfMaxValue, float* MaxValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.MaxOfFloatArray");
	UKismetMathLibrary_MaxOfFloatArray_Params params;

	params.FloatArray = FloatArray;
	params.IndexOfMaxValue = *IndexOfMaxValue;
	params.MaxValue = *MaxValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetMathLibrary::MaxOfByteArray(TArray<unsigned char> ByteArray, int* IndexOfMaxValue, unsigned char* MaxValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.MaxOfByteArray");
	UKismetMathLibrary_MaxOfByteArray_Params params;

	params.ByteArray = ByteArray;
	params.IndexOfMaxValue = *IndexOfMaxValue;
	params.MaxValue = *MaxValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

int UKismetMathLibrary::Max(int A, int B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Max");
	UKismetMathLibrary_Max_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::MapRangeUnclamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.MapRangeUnclamped");
	UKismetMathLibrary_MapRangeUnclamped_Params params;

	params.Value = Value;
	params.InRangeA = InRangeA;
	params.InRangeB = InRangeB;
	params.OutRangeA = OutRangeA;
	params.OutRangeB = OutRangeB;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::MapRangeClamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.MapRangeClamped");
	UKismetMathLibrary_MapRangeClamped_Params params;

	params.Value = Value;
	params.InRangeA = InRangeA;
	params.InRangeB = InRangeB;
	params.OutRangeA = OutRangeA;
	params.OutRangeB = OutRangeB;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector2D UKismetMathLibrary::MakeVector2D(float X, float Y) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.MakeVector2D");
	UKismetMathLibrary_MakeVector2D_Params params;

	params.X = X;
	params.Y = Y;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::MakeVector(float X, float Y, float Z) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.MakeVector");
	UKismetMathLibrary_MakeVector_Params params;

	params.X = X;
	params.Y = Y;
	params.Z = Z;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FTransform UKismetMathLibrary::MakeTransform(const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.MakeTransform");
	UKismetMathLibrary_MakeTransform_Params params;

	params.Location = Location;
	params.Rotation = Rotation;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FTimespan UKismetMathLibrary::MakeTimespan2(int Days, int Hours, int Minutes, int Seconds, int FractionNano) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.MakeTimespan2");
	UKismetMathLibrary_MakeTimespan2_Params params;

	params.Days = Days;
	params.Hours = Hours;
	params.Minutes = Minutes;
	params.Seconds = Seconds;
	params.FractionNano = FractionNano;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FTimespan UKismetMathLibrary::MakeTimespan(int Days, int Hours, int Minutes, int Seconds, int Milliseconds) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.MakeTimespan");
	UKismetMathLibrary_MakeTimespan_Params params;

	params.Days = Days;
	params.Hours = Hours;
	params.Minutes = Minutes;
	params.Seconds = Seconds;
	params.Milliseconds = Milliseconds;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FRotator UKismetMathLibrary::MakeRotFromZY(const struct FVector& Z, const struct FVector& Y) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.MakeRotFromZY");
	UKismetMathLibrary_MakeRotFromZY_Params params;

	params.Z = Z;
	params.Y = Y;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FRotator UKismetMathLibrary::MakeRotFromZX(const struct FVector& Z, const struct FVector& X) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.MakeRotFromZX");
	UKismetMathLibrary_MakeRotFromZX_Params params;

	params.Z = Z;
	params.X = X;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FRotator UKismetMathLibrary::MakeRotFromZ(const struct FVector& Z) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.MakeRotFromZ");
	UKismetMathLibrary_MakeRotFromZ_Params params;

	params.Z = Z;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FRotator UKismetMathLibrary::MakeRotFromYZ(const struct FVector& Y, const struct FVector& Z) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.MakeRotFromYZ");
	UKismetMathLibrary_MakeRotFromYZ_Params params;

	params.Y = Y;
	params.Z = Z;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FRotator UKismetMathLibrary::MakeRotFromYX(const struct FVector& Y, const struct FVector& X) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.MakeRotFromYX");
	UKismetMathLibrary_MakeRotFromYX_Params params;

	params.Y = Y;
	params.X = X;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FRotator UKismetMathLibrary::MakeRotFromY(const struct FVector& Y) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.MakeRotFromY");
	UKismetMathLibrary_MakeRotFromY_Params params;

	params.Y = Y;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FRotator UKismetMathLibrary::MakeRotFromXZ(const struct FVector& X, const struct FVector& Z) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.MakeRotFromXZ");
	UKismetMathLibrary_MakeRotFromXZ_Params params;

	params.X = X;
	params.Z = Z;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FRotator UKismetMathLibrary::MakeRotFromXY(const struct FVector& X, const struct FVector& Y) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.MakeRotFromXY");
	UKismetMathLibrary_MakeRotFromXY_Params params;

	params.X = X;
	params.Y = Y;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FRotator UKismetMathLibrary::MakeRotFromX(const struct FVector& X) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.MakeRotFromX");
	UKismetMathLibrary_MakeRotFromX_Params params;

	params.X = X;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FRotator UKismetMathLibrary::MakeRotator(float Roll, float Pitch, float Yaw) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.MakeRotator");
	UKismetMathLibrary_MakeRotator_Params params;

	params.Roll = Roll;
	params.Pitch = Pitch;
	params.Yaw = Yaw;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FRotator UKismetMathLibrary::MakeRotationFromAxes(const struct FVector& Forward, const struct FVector& Right, const struct FVector& Up) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.MakeRotationFromAxes");
	UKismetMathLibrary_MakeRotationFromAxes_Params params;

	params.Forward = Forward;
	params.Right = Right;
	params.Up = Up;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FRandomStream UKismetMathLibrary::MakeRandomStream(int InitialSeed) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.MakeRandomStream");
	UKismetMathLibrary_MakeRandomStream_Params params;

	params.InitialSeed = InitialSeed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::MakePulsatingValue(float InCurrentTime, float InPulsesPerSecond, float InPhase) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.MakePulsatingValue");
	UKismetMathLibrary_MakePulsatingValue_Params params;

	params.InCurrentTime = InCurrentTime;
	params.InPulsesPerSecond = InPulsesPerSecond;
	params.InPhase = InPhase;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FPlane UKismetMathLibrary::MakePlaneFromPointAndNormal(const struct FVector& Point, const struct FVector& Normal) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.MakePlaneFromPointAndNormal");
	UKismetMathLibrary_MakePlaneFromPointAndNormal_Params params;

	params.Point = Point;
	params.Normal = Normal;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FDateTime UKismetMathLibrary::MakeDateTime(int Year, int Month, int Day, int Hour, int Minute, int Second, int Millisecond) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.MakeDateTime");
	UKismetMathLibrary_MakeDateTime_Params params;

	params.Year = Year;
	params.Month = Month;
	params.Day = Day;
	params.Hour = Hour;
	params.Minute = Minute;
	params.Second = Second;
	params.Millisecond = Millisecond;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FLinearColor UKismetMathLibrary::MakeColor(float R, float G, float B, float A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.MakeColor");
	UKismetMathLibrary_MakeColor_Params params;

	params.R = R;
	params.G = G;
	params.B = B;
	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FBox2D UKismetMathLibrary::MakeBox2D(const struct FVector2D& Min, const struct FVector2D& Max) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.MakeBox2D");
	UKismetMathLibrary_MakeBox2D_Params params;

	params.Min = Min;
	params.Max = Max;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FBox UKismetMathLibrary::MakeBox(const struct FVector& Min, const struct FVector& Max) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.MakeBox");
	UKismetMathLibrary_MakeBox_Params params;

	params.Min = Min;
	params.Max = Max;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::Loge(float A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Loge");
	UKismetMathLibrary_Loge_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::Log(float A, float Base) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Log");
	UKismetMathLibrary_Log_Params params;

	params.A = A;
	params.Base = Base;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::LinePlaneIntersection_OriginNormal(const struct FVector& LineStart, const struct FVector& LineEnd, const struct FVector& PlaneOrigin, const struct FVector& PlaneNormal, float* T, struct FVector* Intersection) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.LinePlaneIntersection_OriginNormal");
	UKismetMathLibrary_LinePlaneIntersection_OriginNormal_Params params;

	params.LineStart = LineStart;
	params.LineEnd = LineEnd;
	params.PlaneOrigin = PlaneOrigin;
	params.PlaneNormal = PlaneNormal;
	params.T = *T;
	params.Intersection = *Intersection;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::LinePlaneIntersection(const struct FVector& LineStart, const struct FVector& LineEnd, const struct FPlane& APlane, float* T, struct FVector* Intersection) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.LinePlaneIntersection");
	UKismetMathLibrary_LinePlaneIntersection_Params params;

	params.LineStart = LineStart;
	params.LineEnd = LineEnd;
	params.APlane = APlane;
	params.T = *T;
	params.Intersection = *Intersection;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FLinearColor UKismetMathLibrary::LinearColorLerpUsingHSV(const struct FLinearColor& A, const struct FLinearColor& B, float Alpha) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.LinearColorLerpUsingHSV");
	UKismetMathLibrary_LinearColorLerpUsingHSV_Params params;

	params.A = A;
	params.B = B;
	params.Alpha = Alpha;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FLinearColor UKismetMathLibrary::LinearColorLerp(const struct FLinearColor& A, const struct FLinearColor& B, float Alpha) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.LinearColorLerp");
	UKismetMathLibrary_LinearColorLerp_Params params;

	params.A = A;
	params.B = B;
	params.Alpha = Alpha;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::LessLess_VectorRotator(const struct FVector& A, const struct FRotator& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.LessLess_VectorRotator");
	UKismetMathLibrary_LessLess_VectorRotator_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::LessEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.LessEqual_TimespanTimespan");
	UKismetMathLibrary_LessEqual_TimespanTimespan_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::LessEqual_IntInt(int A, int B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.LessEqual_IntInt");
	UKismetMathLibrary_LessEqual_IntInt_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::LessEqual_FloatFloat(float A, float B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.LessEqual_FloatFloat");
	UKismetMathLibrary_LessEqual_FloatFloat_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::LessEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.LessEqual_DateTimeDateTime");
	UKismetMathLibrary_LessEqual_DateTimeDateTime_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::LessEqual_ByteByte(unsigned char A, unsigned char B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.LessEqual_ByteByte");
	UKismetMathLibrary_LessEqual_ByteByte_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::Less_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Less_TimespanTimespan");
	UKismetMathLibrary_Less_TimespanTimespan_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::Less_IntInt(int A, int B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Less_IntInt");
	UKismetMathLibrary_Less_IntInt_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::Less_FloatFloat(float A, float B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Less_FloatFloat");
	UKismetMathLibrary_Less_FloatFloat_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::Less_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Less_DateTimeDateTime");
	UKismetMathLibrary_Less_DateTimeDateTime_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::Less_ByteByte(unsigned char A, unsigned char B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Less_ByteByte");
	UKismetMathLibrary_Less_ByteByte_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::Lerp(float A, float B, float Alpha) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Lerp");
	UKismetMathLibrary_Lerp_Params params;

	params.A = A;
	params.B = B;
	params.Alpha = Alpha;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::IsPointInBoxWithTransform(const struct FVector& Point, const struct FTransform& BoxWorldTransform, const struct FVector& BoxExtent) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.IsPointInBoxWithTransform");
	UKismetMathLibrary_IsPointInBoxWithTransform_Params params;

	params.Point = Point;
	params.BoxWorldTransform = BoxWorldTransform;
	params.BoxExtent = BoxExtent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::IsPointInBox(const struct FVector& Point, const struct FVector& BoxOrigin, const struct FVector& BoxExtent) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.IsPointInBox");
	UKismetMathLibrary_IsPointInBox_Params params;

	params.Point = Point;
	params.BoxOrigin = BoxOrigin;
	params.BoxExtent = BoxExtent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::IsMorning(const struct FDateTime& A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.IsMorning");
	UKismetMathLibrary_IsMorning_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::IsLeapYear(int Year) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.IsLeapYear");
	UKismetMathLibrary_IsLeapYear_Params params;

	params.Year = Year;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::IsAfternoon(const struct FDateTime& A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.IsAfternoon");
	UKismetMathLibrary_IsAfternoon_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FTransform UKismetMathLibrary::InvertTransform(const struct FTransform& T) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.InvertTransform");
	UKismetMathLibrary_InvertTransform_Params params;

	params.T = T;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FRotator UKismetMathLibrary::InverseTransformRotation(const struct FTransform& T, const struct FRotator& Rotation) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.InverseTransformRotation");
	UKismetMathLibrary_InverseTransformRotation_Params params;

	params.T = T;
	params.Rotation = Rotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::InverseTransformLocation(const struct FTransform& T, const struct FVector& Location) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.InverseTransformLocation");
	UKismetMathLibrary_InverseTransformLocation_Params params;

	params.T = T;
	params.Location = Location;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::InverseTransformDirection(const struct FTransform& T, const struct FVector& Direction) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.InverseTransformDirection");
	UKismetMathLibrary_InverseTransformDirection_Params params;

	params.T = T;
	params.Direction = Direction;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::InRange_IntInt(int Value, int Min, int Max, bool InclusiveMin, bool InclusiveMax) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.InRange_IntInt");
	UKismetMathLibrary_InRange_IntInt_Params params;

	params.Value = Value;
	params.Min = Min;
	params.Max = Max;
	params.InclusiveMin = InclusiveMin;
	params.InclusiveMax = InclusiveMax;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::InRange_FloatFloat(float Value, float Min, float Max, bool InclusiveMin, bool InclusiveMax) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.InRange_FloatFloat");
	UKismetMathLibrary_InRange_FloatFloat_Params params;

	params.Value = Value;
	params.Min = Min;
	params.Max = Max;
	params.InclusiveMin = InclusiveMin;
	params.InclusiveMax = InclusiveMax;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::Hypotenuse(float Width, float Height) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Hypotenuse");
	UKismetMathLibrary_Hypotenuse_Params params;

	params.Width = Width;
	params.Height = Height;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UKismetMathLibrary::HSVToRGB_Vector(const struct FLinearColor& HSV, struct FLinearColor* RGB) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.HSVToRGB_Vector");
	UKismetMathLibrary_HSVToRGB_Vector_Params params;

	params.HSV = HSV;
	params.RGB = *RGB;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

struct FLinearColor UKismetMathLibrary::HSVToRGB(float H, float S, float V, float A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.HSVToRGB");
	UKismetMathLibrary_HSVToRGB_Params params;

	params.H = H;
	params.S = S;
	params.V = V;
	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::GridSnap_Float(float Location, float GridSize) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.GridSnap_Float");
	UKismetMathLibrary_GridSnap_Float_Params params;

	params.Location = Location;
	params.GridSize = GridSize;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::GreaterGreater_VectorRotator(const struct FVector& A, const struct FRotator& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.GreaterGreater_VectorRotator");
	UKismetMathLibrary_GreaterGreater_VectorRotator_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::GreaterEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.GreaterEqual_TimespanTimespan");
	UKismetMathLibrary_GreaterEqual_TimespanTimespan_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::GreaterEqual_IntInt(int A, int B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.GreaterEqual_IntInt");
	UKismetMathLibrary_GreaterEqual_IntInt_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::GreaterEqual_FloatFloat(float A, float B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.GreaterEqual_FloatFloat");
	UKismetMathLibrary_GreaterEqual_FloatFloat_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::GreaterEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.GreaterEqual_DateTimeDateTime");
	UKismetMathLibrary_GreaterEqual_DateTimeDateTime_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::GreaterEqual_ByteByte(unsigned char A, unsigned char B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.GreaterEqual_ByteByte");
	UKismetMathLibrary_GreaterEqual_ByteByte_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::Greater_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Greater_TimespanTimespan");
	UKismetMathLibrary_Greater_TimespanTimespan_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::Greater_IntInt(int A, int B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Greater_IntInt");
	UKismetMathLibrary_Greater_IntInt_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::Greater_FloatFloat(float A, float B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Greater_FloatFloat");
	UKismetMathLibrary_Greater_FloatFloat_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::Greater_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Greater_DateTimeDateTime");
	UKismetMathLibrary_Greater_DateTimeDateTime_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::Greater_ByteByte(unsigned char A, unsigned char B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Greater_ByteByte");
	UKismetMathLibrary_Greater_ByteByte_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetMathLibrary::GetYear(const struct FDateTime& A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.GetYear");
	UKismetMathLibrary_GetYear_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UKismetMathLibrary::GetYawPitchFromVector(const struct FVector& InVec, float* Yaw, float* Pitch) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.GetYawPitchFromVector");
	UKismetMathLibrary_GetYawPitchFromVector_Params params;

	params.InVec = InVec;
	params.Yaw = *Yaw;
	params.Pitch = *Pitch;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

struct FVector UKismetMathLibrary::GetVectorArrayAverage(TArray<struct FVector> Vectors) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.GetVectorArrayAverage");
	UKismetMathLibrary_GetVectorArrayAverage_Params params;

	params.Vectors = Vectors;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::GetUpVector(const struct FRotator& InRot) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.GetUpVector");
	UKismetMathLibrary_GetUpVector_Params params;

	params.InRot = InRot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::GetTotalSeconds(const struct FTimespan& A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.GetTotalSeconds");
	UKismetMathLibrary_GetTotalSeconds_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::GetTotalMinutes(const struct FTimespan& A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.GetTotalMinutes");
	UKismetMathLibrary_GetTotalMinutes_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::GetTotalMilliseconds(const struct FTimespan& A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.GetTotalMilliseconds");
	UKismetMathLibrary_GetTotalMilliseconds_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::GetTotalHours(const struct FTimespan& A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.GetTotalHours");
	UKismetMathLibrary_GetTotalHours_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::GetTotalDays(const struct FTimespan& A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.GetTotalDays");
	UKismetMathLibrary_GetTotalDays_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FTimespan UKismetMathLibrary::GetTimeOfDay(const struct FDateTime& A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.GetTimeOfDay");
	UKismetMathLibrary_GetTimeOfDay_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::GetTAU() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.GetTAU");
	UKismetMathLibrary_GetTAU_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UKismetMathLibrary::GetSlopeDegreeAngles(const struct FVector& MyRightYAxis, const struct FVector& FloorNormal, const struct FVector& UpVector, float* OutSlopePitchDegreeAngle, float* OutSlopeRollDegreeAngle) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.GetSlopeDegreeAngles");
	UKismetMathLibrary_GetSlopeDegreeAngles_Params params;

	params.MyRightYAxis = MyRightYAxis;
	params.FloorNormal = FloorNormal;
	params.UpVector = UpVector;
	params.OutSlopePitchDegreeAngle = *OutSlopePitchDegreeAngle;
	params.OutSlopeRollDegreeAngle = *OutSlopeRollDegreeAngle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

int UKismetMathLibrary::GetSeconds(const struct FTimespan& A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.GetSeconds");
	UKismetMathLibrary_GetSeconds_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetMathLibrary::GetSecond(const struct FDateTime& A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.GetSecond");
	UKismetMathLibrary_GetSecond_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::GetRightVector(const struct FRotator& InRot) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.GetRightVector");
	UKismetMathLibrary_GetRightVector_Params params;

	params.InRot = InRot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::GetReflectionVector(const struct FVector& Direction, const struct FVector& SurfaceNormal) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.GetReflectionVector");
	UKismetMathLibrary_GetReflectionVector_Params params;

	params.Direction = Direction;
	params.SurfaceNormal = SurfaceNormal;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::GetPointDistanceToSegment(const struct FVector& Point, const struct FVector& SegmentStart, const struct FVector& SegmentEnd) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.GetPointDistanceToSegment");
	UKismetMathLibrary_GetPointDistanceToSegment_Params params;

	params.Point = Point;
	params.SegmentStart = SegmentStart;
	params.SegmentEnd = SegmentEnd;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::GetPointDistanceToLine(const struct FVector& Point, const struct FVector& LineOrigin, const struct FVector& LineDirection) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.GetPointDistanceToLine");
	UKismetMathLibrary_GetPointDistanceToLine_Params params;

	params.Point = Point;
	params.LineOrigin = LineOrigin;
	params.LineDirection = LineDirection;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::GetPI() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.GetPI");
	UKismetMathLibrary_GetPI_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetMathLibrary::GetMonth(const struct FDateTime& A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.GetMonth");
	UKismetMathLibrary_GetMonth_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetMathLibrary::GetMinutes(const struct FTimespan& A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.GetMinutes");
	UKismetMathLibrary_GetMinutes_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetMathLibrary::GetMinute(const struct FDateTime& A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.GetMinute");
	UKismetMathLibrary_GetMinute_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::GetMinElement(const struct FVector& A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.GetMinElement");
	UKismetMathLibrary_GetMinElement_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetMathLibrary::GetMilliseconds(const struct FTimespan& A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.GetMilliseconds");
	UKismetMathLibrary_GetMilliseconds_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetMathLibrary::GetMillisecond(const struct FDateTime& A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.GetMillisecond");
	UKismetMathLibrary_GetMillisecond_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::GetMaxElement(const struct FVector& A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.GetMaxElement");
	UKismetMathLibrary_GetMaxElement_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetMathLibrary::GetHours(const struct FTimespan& A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.GetHours");
	UKismetMathLibrary_GetHours_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetMathLibrary::GetHour12(const struct FDateTime& A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.GetHour12");
	UKismetMathLibrary_GetHour12_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetMathLibrary::GetHour(const struct FDateTime& A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.GetHour");
	UKismetMathLibrary_GetHour_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::GetForwardVector(const struct FRotator& InRot) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.GetForwardVector");
	UKismetMathLibrary_GetForwardVector_Params params;

	params.InRot = InRot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FTimespan UKismetMathLibrary::GetDuration(const struct FTimespan& A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.GetDuration");
	UKismetMathLibrary_GetDuration_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::GetDirectionUnitVector(const struct FVector& From, const struct FVector& To) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.GetDirectionUnitVector");
	UKismetMathLibrary_GetDirectionUnitVector_Params params;

	params.From = From;
	params.To = To;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetMathLibrary::GetDays(const struct FTimespan& A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.GetDays");
	UKismetMathLibrary_GetDays_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetMathLibrary::GetDayOfYear(const struct FDateTime& A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.GetDayOfYear");
	UKismetMathLibrary_GetDayOfYear_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetMathLibrary::GetDay(const struct FDateTime& A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.GetDay");
	UKismetMathLibrary_GetDay_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FDateTime UKismetMathLibrary::GetDate(const struct FDateTime& A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.GetDate");
	UKismetMathLibrary_GetDate_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UKismetMathLibrary::GetAzimuthAndElevation(const struct FVector& InDirection, const struct FTransform& ReferenceFrame, float* Azimuth, float* Elevation) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.GetAzimuthAndElevation");
	UKismetMathLibrary_GetAzimuthAndElevation_Params params;

	params.InDirection = InDirection;
	params.ReferenceFrame = ReferenceFrame;
	params.Azimuth = *Azimuth;
	params.Elevation = *Elevation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetMathLibrary::GetAxes(const struct FRotator& A, struct FVector* X, struct FVector* Y, struct FVector* Z) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.GetAxes");
	UKismetMathLibrary_GetAxes_Params params;

	params.A = A;
	params.X = *X;
	params.Y = *Y;
	params.Z = *Z;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

struct FIntVector UKismetMathLibrary::FTruncVector(const struct FVector& InVector) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.FTruncVector");
	UKismetMathLibrary_FTruncVector_Params params;

	params.InVector = InVector;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetMathLibrary::FTrunc(float A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.FTrunc");
	UKismetMathLibrary_FTrunc_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FTimespan UKismetMathLibrary::FromSeconds(float Seconds) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.FromSeconds");
	UKismetMathLibrary_FromSeconds_Params params;

	params.Seconds = Seconds;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FTimespan UKismetMathLibrary::FromMinutes(float Minutes) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.FromMinutes");
	UKismetMathLibrary_FromMinutes_Params params;

	params.Minutes = Minutes;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FTimespan UKismetMathLibrary::FromMilliseconds(float Milliseconds) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.FromMilliseconds");
	UKismetMathLibrary_FromMilliseconds_Params params;

	params.Milliseconds = Milliseconds;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FTimespan UKismetMathLibrary::FromHours(float Hours) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.FromHours");
	UKismetMathLibrary_FromHours_Params params;

	params.Hours = Hours;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FTimespan UKismetMathLibrary::FromDays(float Days) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.FromDays");
	UKismetMathLibrary_FromDays_Params params;

	params.Days = Days;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::Fraction(float A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Fraction");
	UKismetMathLibrary_Fraction_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetMathLibrary::FMod(float Dividend, float Divisor, float* Remainder) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.FMod");
	UKismetMathLibrary_FMod_Params params;

	params.Dividend = Dividend;
	params.Divisor = Divisor;
	params.Remainder = *Remainder;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::FMin(float A, float B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.FMin");
	UKismetMathLibrary_FMin_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::FMax(float A, float B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.FMax");
	UKismetMathLibrary_FMax_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::FloatSpringInterp(float Current, float Target, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass, struct FFloatSpringState* SpringState) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.FloatSpringInterp");
	UKismetMathLibrary_FloatSpringInterp_Params params;

	params.Current = Current;
	params.Target = Target;
	params.Stiffness = Stiffness;
	params.CriticalDampingFactor = CriticalDampingFactor;
	params.DeltaTime = DeltaTime;
	params.Mass = Mass;
	params.SpringState = *SpringState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::FixedTurn(float InCurrent, float InDesired, float InDeltaRate) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.FixedTurn");
	UKismetMathLibrary_FixedTurn_Params params;

	params.InCurrent = InCurrent;
	params.InDesired = InDesired;
	params.InDeltaRate = InDeltaRate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::FInterpTo_Constant(float Current, float Target, float DeltaTime, float InterpSpeed) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.FInterpTo_Constant");
	UKismetMathLibrary_FInterpTo_Constant_Params params;

	params.Current = Current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::FInterpTo(float Current, float Target, float DeltaTime, float InterpSpeed) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.FInterpTo");
	UKismetMathLibrary_FInterpTo_Params params;

	params.Current = Current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::FInterpEaseInOut(float A, float B, float Alpha, float Exponent) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.FInterpEaseInOut");
	UKismetMathLibrary_FInterpEaseInOut_Params params;

	params.A = A;
	params.B = B;
	params.Alpha = Alpha;
	params.Exponent = Exponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UKismetMathLibrary::FindNearestPointsOnLineSegments(const struct FVector& Segment1Start, const struct FVector& Segment1End, const struct FVector& Segment2Start, const struct FVector& Segment2End, struct FVector* Segment1Point, struct FVector* Segment2Point) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.FindNearestPointsOnLineSegments");
	UKismetMathLibrary_FindNearestPointsOnLineSegments_Params params;

	params.Segment1Start = Segment1Start;
	params.Segment1End = Segment1End;
	params.Segment2Start = Segment2Start;
	params.Segment2End = Segment2End;
	params.Segment1Point = *Segment1Point;
	params.Segment2Point = *Segment2Point;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

struct FRotator UKismetMathLibrary::FindLookAtRotation(const struct FVector& Start, const struct FVector& Target) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.FindLookAtRotation");
	UKismetMathLibrary_FindLookAtRotation_Params params;

	params.Start = Start;
	params.Target = Target;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::FindClosestPointOnSegment(const struct FVector& Point, const struct FVector& SegmentStart, const struct FVector& SegmentEnd) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.FindClosestPointOnSegment");
	UKismetMathLibrary_FindClosestPointOnSegment_Params params;

	params.Point = Point;
	params.SegmentStart = SegmentStart;
	params.SegmentEnd = SegmentEnd;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::FindClosestPointOnLine(const struct FVector& Point, const struct FVector& LineOrigin, const struct FVector& LineDirection) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.FindClosestPointOnLine");
	UKismetMathLibrary_FindClosestPointOnLine_Params params;

	params.Point = Point;
	params.LineOrigin = LineOrigin;
	params.LineDirection = LineDirection;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetMathLibrary::FFloor(float A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.FFloor");
	UKismetMathLibrary_FFloor_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::FClamp(float Value, float Min, float Max) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.FClamp");
	UKismetMathLibrary_FClamp_Params params;

	params.Value = Value;
	params.Min = Min;
	params.Max = Max;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetMathLibrary::FCeil(float A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.FCeil");
	UKismetMathLibrary_FCeil_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::Exp(float A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Exp");
	UKismetMathLibrary_Exp_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::EqualEqual_VectorVector(const struct FVector& A, const struct FVector& B, float ErrorTolerance) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.EqualEqual_VectorVector");
	UKismetMathLibrary_EqualEqual_VectorVector_Params params;

	params.A = A;
	params.B = B;
	params.ErrorTolerance = ErrorTolerance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::EqualEqual_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B, float ErrorTolerance) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.EqualEqual_Vector2DVector2D");
	UKismetMathLibrary_EqualEqual_Vector2DVector2D_Params params;

	params.A = A;
	params.B = B;
	params.ErrorTolerance = ErrorTolerance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::EqualEqual_TransformTransform(const struct FTransform& A, const struct FTransform& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.EqualEqual_TransformTransform");
	UKismetMathLibrary_EqualEqual_TransformTransform_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::EqualEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.EqualEqual_TimespanTimespan");
	UKismetMathLibrary_EqualEqual_TimespanTimespan_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::EqualEqual_RotatorRotator(const struct FRotator& A, const struct FRotator& B, float ErrorTolerance) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.EqualEqual_RotatorRotator");
	UKismetMathLibrary_EqualEqual_RotatorRotator_Params params;

	params.A = A;
	params.B = B;
	params.ErrorTolerance = ErrorTolerance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::EqualEqual_ObjectObject(class UObject* A, class UObject* B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.EqualEqual_ObjectObject");
	UKismetMathLibrary_EqualEqual_ObjectObject_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::EqualEqual_NameName(const struct FName& A, const struct FName& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.EqualEqual_NameName");
	UKismetMathLibrary_EqualEqual_NameName_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::EqualEqual_IntInt(int A, int B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.EqualEqual_IntInt");
	UKismetMathLibrary_EqualEqual_IntInt_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::EqualEqual_FloatFloat(float A, float B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.EqualEqual_FloatFloat");
	UKismetMathLibrary_EqualEqual_FloatFloat_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::EqualEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.EqualEqual_DateTimeDateTime");
	UKismetMathLibrary_EqualEqual_DateTimeDateTime_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::EqualEqual_ClassClass(class UClass* A, class UClass* B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.EqualEqual_ClassClass");
	UKismetMathLibrary_EqualEqual_ClassClass_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::EqualEqual_ByteByte(unsigned char A, unsigned char B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.EqualEqual_ByteByte");
	UKismetMathLibrary_EqualEqual_ByteByte_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::EqualEqual_BoolBool(bool A, bool B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.EqualEqual_BoolBool");
	UKismetMathLibrary_EqualEqual_BoolBool_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::Ease(float A, float B, float Alpha, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int Steps) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Ease");
	UKismetMathLibrary_Ease_Params params;

	params.A = A;
	params.B = B;
	params.Alpha = Alpha;
	params.EasingFunc = EasingFunc;
	params.BlendExp = BlendExp;
	params.Steps = Steps;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::DotProduct2D(const struct FVector2D& A, const struct FVector2D& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.DotProduct2D");
	UKismetMathLibrary_DotProduct2D_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::Dot_VectorVector(const struct FVector& A, const struct FVector& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Dot_VectorVector");
	UKismetMathLibrary_Dot_VectorVector_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::Divide_VectorVector(const struct FVector& A, const struct FVector& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Divide_VectorVector");
	UKismetMathLibrary_Divide_VectorVector_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::Divide_VectorInt(const struct FVector& A, int B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Divide_VectorInt");
	UKismetMathLibrary_Divide_VectorInt_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::Divide_VectorFloat(const struct FVector& A, float B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Divide_VectorFloat");
	UKismetMathLibrary_Divide_VectorFloat_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector2D UKismetMathLibrary::Divide_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Divide_Vector2DVector2D");
	UKismetMathLibrary_Divide_Vector2DVector2D_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector2D UKismetMathLibrary::Divide_Vector2DFloat(const struct FVector2D& A, float B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Divide_Vector2DFloat");
	UKismetMathLibrary_Divide_Vector2DFloat_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FTimespan UKismetMathLibrary::Divide_TimespanFloat(const struct FTimespan& A, float Scalar) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Divide_TimespanFloat");
	UKismetMathLibrary_Divide_TimespanFloat_Params params;

	params.A = A;
	params.Scalar = Scalar;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetMathLibrary::Divide_IntInt(int A, int B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Divide_IntInt");
	UKismetMathLibrary_Divide_IntInt_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::Divide_FloatFloat(float A, float B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Divide_FloatFloat");
	UKismetMathLibrary_Divide_FloatFloat_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::DegTan(float A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.DegTan");
	UKismetMathLibrary_DegTan_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::DegSin(float A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.DegSin");
	UKismetMathLibrary_DegSin_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::DegreesToRadians(float A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.DegreesToRadians");
	UKismetMathLibrary_DegreesToRadians_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::DegCos(float A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.DegCos");
	UKismetMathLibrary_DegCos_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::DegAtan2(float A, float B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.DegAtan2");
	UKismetMathLibrary_DegAtan2_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::DegAtan(float A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.DegAtan");
	UKismetMathLibrary_DegAtan_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::DegAsin(float A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.DegAsin");
	UKismetMathLibrary_DegAsin_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::DegAcos(float A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.DegAcos");
	UKismetMathLibrary_DegAcos_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetMathLibrary::DaysInYear(int Year) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.DaysInYear");
	UKismetMathLibrary_DaysInYear_Params params;

	params.Year = Year;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetMathLibrary::DaysInMonth(int Year, int Month) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.DaysInMonth");
	UKismetMathLibrary_DaysInMonth_Params params;

	params.Year = Year;
	params.Month = Month;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FDateTime UKismetMathLibrary::DateTimeMinValue() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.DateTimeMinValue");
	UKismetMathLibrary_DateTimeMinValue_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FDateTime UKismetMathLibrary::DateTimeMaxValue() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.DateTimeMaxValue");
	UKismetMathLibrary_DateTimeMaxValue_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::DateTimeFromString(const class FString& DateTimeString, struct FDateTime* Result) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.DateTimeFromString");
	UKismetMathLibrary_DateTimeFromString_Params params;

	params.DateTimeString = DateTimeString;
	params.Result = *Result;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::DateTimeFromIsoString(const class FString& IsoString, struct FDateTime* Result) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.DateTimeFromIsoString");
	UKismetMathLibrary_DateTimeFromIsoString_Params params;

	params.IsoString = IsoString;
	params.Result = *Result;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::CrossProduct2D(const struct FVector2D& A, const struct FVector2D& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.CrossProduct2D");
	UKismetMathLibrary_CrossProduct2D_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::Cross_VectorVector(const struct FVector& A, const struct FVector& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Cross_VectorVector");
	UKismetMathLibrary_Cross_VectorVector_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::CreateVectorFromYawPitch(float Yaw, float Pitch, float Length) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.CreateVectorFromYawPitch");
	UKismetMathLibrary_CreateVectorFromYawPitch_Params params;

	params.Yaw = Yaw;
	params.Pitch = Pitch;
	params.Length = Length;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::Cos(float A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Cos");
	UKismetMathLibrary_Cos_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FTransform UKismetMathLibrary::ConvertTransformToRelative(const struct FTransform& Transform, const struct FTransform& ParentTransform) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.ConvertTransformToRelative");
	UKismetMathLibrary_ConvertTransformToRelative_Params params;

	params.Transform = Transform;
	params.ParentTransform = ParentTransform;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector2D UKismetMathLibrary::Conv_VectorToVector2D(const struct FVector& InVector) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Conv_VectorToVector2D");
	UKismetMathLibrary_Conv_VectorToVector2D_Params params;

	params.InVector = InVector;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FTransform UKismetMathLibrary::Conv_VectorToTransform(const struct FVector& InLocation) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Conv_VectorToTransform");
	UKismetMathLibrary_Conv_VectorToTransform_Params params;

	params.InLocation = InLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FRotator UKismetMathLibrary::Conv_VectorToRotator(const struct FVector& InVec) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Conv_VectorToRotator");
	UKismetMathLibrary_Conv_VectorToRotator_Params params;

	params.InVec = InVec;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FLinearColor UKismetMathLibrary::Conv_VectorToLinearColor(const struct FVector& InVec) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Conv_VectorToLinearColor");
	UKismetMathLibrary_Conv_VectorToLinearColor_Params params;

	params.InVec = InVec;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::Conv_Vector2DToVector(const struct FVector2D& InVector2D, float Z) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Conv_Vector2DToVector");
	UKismetMathLibrary_Conv_Vector2DToVector_Params params;

	params.InVector2D = InVector2D;
	params.Z = Z;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::Conv_RotatorToVector(const struct FRotator& InRot) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Conv_RotatorToVector");
	UKismetMathLibrary_Conv_RotatorToVector_Params params;

	params.InRot = InRot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::Conv_LinearColorToVector(const struct FLinearColor& InLinearColor) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Conv_LinearColorToVector");
	UKismetMathLibrary_Conv_LinearColorToVector_Params params;

	params.InLinearColor = InLinearColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FColor UKismetMathLibrary::Conv_LinearColorToColor(const struct FLinearColor& InLinearColor) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Conv_LinearColorToColor");
	UKismetMathLibrary_Conv_LinearColorToColor_Params params;

	params.InLinearColor = InLinearColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::Conv_IntVectorToVector(const struct FIntVector& InIntVector) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Conv_IntVectorToVector");
	UKismetMathLibrary_Conv_IntVectorToVector_Params params;

	params.InIntVector = InIntVector;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FIntVector UKismetMathLibrary::Conv_IntToIntVector(int inInt) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Conv_IntToIntVector");
	UKismetMathLibrary_Conv_IntToIntVector_Params params;

	params.inInt = inInt;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::Conv_IntToFloat(int inInt) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Conv_IntToFloat");
	UKismetMathLibrary_Conv_IntToFloat_Params params;

	params.inInt = inInt;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::Conv_IntToBool(int inInt) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Conv_IntToBool");
	UKismetMathLibrary_Conv_IntToBool_Params params;

	params.inInt = inInt;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::Conv_FloatToVector(float InFloat) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Conv_FloatToVector");
	UKismetMathLibrary_Conv_FloatToVector_Params params;

	params.InFloat = InFloat;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FLinearColor UKismetMathLibrary::Conv_FloatToLinearColor(float InFloat) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Conv_FloatToLinearColor");
	UKismetMathLibrary_Conv_FloatToLinearColor_Params params;

	params.InFloat = InFloat;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FLinearColor UKismetMathLibrary::Conv_ColorToLinearColor(const struct FColor& InColor) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Conv_ColorToLinearColor");
	UKismetMathLibrary_Conv_ColorToLinearColor_Params params;

	params.InColor = InColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetMathLibrary::Conv_ByteToInt(unsigned char InByte) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Conv_ByteToInt");
	UKismetMathLibrary_Conv_ByteToInt_Params params;

	params.InByte = InByte;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::Conv_ByteToFloat(unsigned char InByte) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Conv_ByteToFloat");
	UKismetMathLibrary_Conv_ByteToFloat_Params params;

	params.InByte = InByte;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetMathLibrary::Conv_BoolToInt(bool InBool) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Conv_BoolToInt");
	UKismetMathLibrary_Conv_BoolToInt_Params params;

	params.InBool = InBool;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::Conv_BoolToFloat(bool InBool) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Conv_BoolToFloat");
	UKismetMathLibrary_Conv_BoolToFloat_Params params;

	params.InBool = InBool;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FTransform UKismetMathLibrary::ComposeTransforms(const struct FTransform& A, const struct FTransform& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.ComposeTransforms");
	UKismetMathLibrary_ComposeTransforms_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FRotator UKismetMathLibrary::ComposeRotators(const struct FRotator& A, const struct FRotator& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.ComposeRotators");
	UKismetMathLibrary_ComposeRotators_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::ClassIsChildOf(class UClass* TestClass, class UClass* ParentClass) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.ClassIsChildOf");
	UKismetMathLibrary_ClassIsChildOf_Params params;

	params.TestClass = TestClass;
	params.ParentClass = ParentClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::ClampVectorSize(const struct FVector& A, float Min, float Max) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.ClampVectorSize");
	UKismetMathLibrary_ClampVectorSize_Params params;

	params.A = A;
	params.Min = Min;
	params.Max = Max;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::ClampAxis(float Angle) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.ClampAxis");
	UKismetMathLibrary_ClampAxis_Params params;

	params.Angle = Angle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::ClampAngle(float AngleDegrees, float MinAngleDegrees, float MaxAngleDegrees) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.ClampAngle");
	UKismetMathLibrary_ClampAngle_Params params;

	params.AngleDegrees = AngleDegrees;
	params.MinAngleDegrees = MinAngleDegrees;
	params.MaxAngleDegrees = MaxAngleDegrees;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetMathLibrary::Clamp(int Value, int Min, int Max) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Clamp");
	UKismetMathLibrary_Clamp_Params params;

	params.Value = Value;
	params.Min = Min;
	params.Max = Max;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FLinearColor UKismetMathLibrary::CInterpTo(const struct FLinearColor& Current, const struct FLinearColor& Target, float DeltaTime, float InterpSpeed) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.CInterpTo");
	UKismetMathLibrary_CInterpTo_Params params;

	params.Current = Current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UKismetMathLibrary::BreakVector2D(const struct FVector2D& InVec, float* X, float* Y) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.BreakVector2D");
	UKismetMathLibrary_BreakVector2D_Params params;

	params.InVec = InVec;
	params.X = *X;
	params.Y = *Y;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetMathLibrary::BreakVector(const struct FVector& InVec, float* X, float* Y, float* Z) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.BreakVector");
	UKismetMathLibrary_BreakVector_Params params;

	params.InVec = InVec;
	params.X = *X;
	params.Y = *Y;
	params.Z = *Z;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetMathLibrary::BreakTransform(const struct FTransform& InTransform, struct FVector* Location, struct FRotator* Rotation, struct FVector* Scale) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.BreakTransform");
	UKismetMathLibrary_BreakTransform_Params params;

	params.InTransform = InTransform;
	params.Location = *Location;
	params.Rotation = *Rotation;
	params.Scale = *Scale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetMathLibrary::BreakTimespan2(const struct FTimespan& InTimespan, int* Days, int* Hours, int* Minutes, int* Seconds, int* FractionNano) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.BreakTimespan2");
	UKismetMathLibrary_BreakTimespan2_Params params;

	params.InTimespan = InTimespan;
	params.Days = *Days;
	params.Hours = *Hours;
	params.Minutes = *Minutes;
	params.Seconds = *Seconds;
	params.FractionNano = *FractionNano;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetMathLibrary::BreakTimespan(const struct FTimespan& InTimespan, int* Days, int* Hours, int* Minutes, int* Seconds, int* Milliseconds) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.BreakTimespan");
	UKismetMathLibrary_BreakTimespan_Params params;

	params.InTimespan = InTimespan;
	params.Days = *Days;
	params.Hours = *Hours;
	params.Minutes = *Minutes;
	params.Seconds = *Seconds;
	params.Milliseconds = *Milliseconds;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetMathLibrary::BreakRotIntoAxes(const struct FRotator& InRot, struct FVector* X, struct FVector* Y, struct FVector* Z) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.BreakRotIntoAxes");
	UKismetMathLibrary_BreakRotIntoAxes_Params params;

	params.InRot = InRot;
	params.X = *X;
	params.Y = *Y;
	params.Z = *Z;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetMathLibrary::BreakRotator(const struct FRotator& InRot, float* Roll, float* Pitch, float* Yaw) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.BreakRotator");
	UKismetMathLibrary_BreakRotator_Params params;

	params.InRot = InRot;
	params.Roll = *Roll;
	params.Pitch = *Pitch;
	params.Yaw = *Yaw;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetMathLibrary::BreakRandomStream(const struct FRandomStream& InRandomStream, int* InitialSeed) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.BreakRandomStream");
	UKismetMathLibrary_BreakRandomStream_Params params;

	params.InRandomStream = InRandomStream;
	params.InitialSeed = *InitialSeed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetMathLibrary::BreakDateTime(const struct FDateTime& InDateTime, int* Year, int* Month, int* Day, int* Hour, int* Minute, int* Second, int* Millisecond) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.BreakDateTime");
	UKismetMathLibrary_BreakDateTime_Params params;

	params.InDateTime = InDateTime;
	params.Year = *Year;
	params.Month = *Month;
	params.Day = *Day;
	params.Hour = *Hour;
	params.Minute = *Minute;
	params.Second = *Second;
	params.Millisecond = *Millisecond;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetMathLibrary::BreakColor(const struct FLinearColor& InColor, float* R, float* G, float* B, float* A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.BreakColor");
	UKismetMathLibrary_BreakColor_Params params;

	params.InColor = InColor;
	params.R = *R;
	params.G = *G;
	params.B = *B;
	params.A = *A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UKismetMathLibrary::BooleanXOR(bool A, bool B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.BooleanXOR");
	UKismetMathLibrary_BooleanXOR_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::BooleanOR(bool A, bool B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.BooleanOR");
	UKismetMathLibrary_BooleanOR_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::BooleanNOR(bool A, bool B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.BooleanNOR");
	UKismetMathLibrary_BooleanNOR_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::BooleanNAND(bool A, bool B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.BooleanNAND");
	UKismetMathLibrary_BooleanNAND_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetMathLibrary::BooleanAND(bool A, bool B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.BooleanAND");
	UKismetMathLibrary_BooleanAND_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::Atan2(float A, float B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Atan2");
	UKismetMathLibrary_Atan2_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::Atan(float A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Atan");
	UKismetMathLibrary_Atan_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::Asin(float A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Asin");
	UKismetMathLibrary_Asin_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetMathLibrary::And_IntInt(int A, int B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.And_IntInt");
	UKismetMathLibrary_And_IntInt_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::Add_VectorVector(const struct FVector& A, const struct FVector& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Add_VectorVector");
	UKismetMathLibrary_Add_VectorVector_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::Add_VectorInt(const struct FVector& A, int B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Add_VectorInt");
	UKismetMathLibrary_Add_VectorInt_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UKismetMathLibrary::Add_VectorFloat(const struct FVector& A, float B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Add_VectorFloat");
	UKismetMathLibrary_Add_VectorFloat_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector2D UKismetMathLibrary::Add_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Add_Vector2DVector2D");
	UKismetMathLibrary_Add_Vector2DVector2D_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector2D UKismetMathLibrary::Add_Vector2DFloat(const struct FVector2D& A, float B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Add_Vector2DFloat");
	UKismetMathLibrary_Add_Vector2DFloat_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FTimespan UKismetMathLibrary::Add_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Add_TimespanTimespan");
	UKismetMathLibrary_Add_TimespanTimespan_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetMathLibrary::Add_IntInt(int A, int B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Add_IntInt");
	UKismetMathLibrary_Add_IntInt_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::Add_FloatFloat(float A, float B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Add_FloatFloat");
	UKismetMathLibrary_Add_FloatFloat_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FDateTime UKismetMathLibrary::Add_DateTimeTimespan(const struct FDateTime& A, const struct FTimespan& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Add_DateTimeTimespan");
	UKismetMathLibrary_Add_DateTimeTimespan_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::Acos(float A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Acos");
	UKismetMathLibrary_Acos_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetMathLibrary::Abs_Int(int A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Abs_Int");
	UKismetMathLibrary_Abs_Int_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetMathLibrary::Abs(float A) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetMathLibrary.Abs");
	UKismetMathLibrary_Abs_Params params;

	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UKismetNodeHelperLibrary::MarkBit(int Index, int* Data) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetNodeHelperLibrary.MarkBit");
	UKismetNodeHelperLibrary_MarkBit_Params params;

	params.Index = Index;
	params.Data = *Data;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UKismetNodeHelperLibrary::HasUnmarkedBit(int Data, int NumBits) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetNodeHelperLibrary.HasUnmarkedBit");
	UKismetNodeHelperLibrary_HasUnmarkedBit_Params params;

	params.Data = Data;
	params.NumBits = NumBits;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetNodeHelperLibrary::HasMarkedBit(int Data, int NumBits) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetNodeHelperLibrary.HasMarkedBit");
	UKismetNodeHelperLibrary_HasMarkedBit_Params params;

	params.Data = Data;
	params.NumBits = NumBits;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetNodeHelperLibrary::GetUnmarkedBit(int Data, int StartIdx, int NumBits, bool bRandom) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetNodeHelperLibrary.GetUnmarkedBit");
	UKismetNodeHelperLibrary_GetUnmarkedBit_Params params;

	params.Data = Data;
	params.StartIdx = StartIdx;
	params.NumBits = NumBits;
	params.bRandom = bRandom;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetNodeHelperLibrary::GetRandomUnmarkedBit(int Data, int StartIdx, int NumBits) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetNodeHelperLibrary.GetRandomUnmarkedBit");
	UKismetNodeHelperLibrary_GetRandomUnmarkedBit_Params params;

	params.Data = Data;
	params.StartIdx = StartIdx;
	params.NumBits = NumBits;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetNodeHelperLibrary::GetFirstUnmarkedBit(int Data, int StartIdx, int NumBits) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetNodeHelperLibrary.GetFirstUnmarkedBit");
	UKismetNodeHelperLibrary_GetFirstUnmarkedBit_Params params;

	params.Data = Data;
	params.StartIdx = StartIdx;
	params.NumBits = NumBits;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetNodeHelperLibrary::GetEnumeratorUserFriendlyName(class UEnum* Enum, unsigned char EnumeratorValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetNodeHelperLibrary.GetEnumeratorUserFriendlyName");
	UKismetNodeHelperLibrary_GetEnumeratorUserFriendlyName_Params params;

	params.Enum = Enum;
	params.EnumeratorValue = EnumeratorValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FName UKismetNodeHelperLibrary::GetEnumeratorName(class UEnum* Enum, unsigned char EnumeratorValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetNodeHelperLibrary.GetEnumeratorName");
	UKismetNodeHelperLibrary_GetEnumeratorName_Params params;

	params.Enum = Enum;
	params.EnumeratorValue = EnumeratorValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UKismetNodeHelperLibrary::ClearBit(int Index, int* Data) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetNodeHelperLibrary.ClearBit");
	UKismetNodeHelperLibrary_ClearBit_Params params;

	params.Index = Index;
	params.Data = *Data;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetNodeHelperLibrary::ClearAllBits(int* Data) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetNodeHelperLibrary.ClearAllBits");
	UKismetNodeHelperLibrary_ClearAllBits_Params params;

	params.Data = *Data;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UKismetNodeHelperLibrary::BitIsMarked(int Data, int Index) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetNodeHelperLibrary.BitIsMarked");
	UKismetNodeHelperLibrary_BitIsMarked_Params params;

	params.Data = Data;
	params.Index = Index;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UTexture2D* UKismetRenderingLibrary::RenderTargetCreateStaticTexture2DEditorOnly(class UTextureRenderTarget2D* RenderTarget, const class FString& Name, TEnumAsByte<ETextureCompressionSettings> CompressionSettings, TEnumAsByte<ETextureMipGenSettings> MipSettings) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetRenderingLibrary.RenderTargetCreateStaticTexture2DEditorOnly");
	UKismetRenderingLibrary_RenderTargetCreateStaticTexture2DEditorOnly_Params params;

	params.RenderTarget = RenderTarget;
	params.Name = Name;
	params.CompressionSettings = CompressionSettings;
	params.MipSettings = MipSettings;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UKismetRenderingLibrary::ReleaseRenderTarget2D(class UTextureRenderTarget2D* TextureRenderTarget) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetRenderingLibrary.ReleaseRenderTarget2D");
	UKismetRenderingLibrary_ReleaseRenderTarget2D_Params params;

	params.TextureRenderTarget = TextureRenderTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

struct FColor UKismetRenderingLibrary::ReadRenderTargetUV(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, float U, float V) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetRenderingLibrary.ReadRenderTargetUV");
	UKismetRenderingLibrary_ReadRenderTargetUV_Params params;

	params.WorldContextObject = WorldContextObject;
	params.TextureRenderTarget = TextureRenderTarget;
	params.U = U;
	params.V = V;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FLinearColor UKismetRenderingLibrary::ReadRenderTargetRawUV(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, float U, float V) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetRenderingLibrary.ReadRenderTargetRawUV");
	UKismetRenderingLibrary_ReadRenderTargetRawUV_Params params;

	params.WorldContextObject = WorldContextObject;
	params.TextureRenderTarget = TextureRenderTarget;
	params.U = U;
	params.V = V;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FLinearColor UKismetRenderingLibrary::ReadRenderTargetRawPixel(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, int X, int Y) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetRenderingLibrary.ReadRenderTargetRawPixel");
	UKismetRenderingLibrary_ReadRenderTargetRawPixel_Params params;

	params.WorldContextObject = WorldContextObject;
	params.TextureRenderTarget = TextureRenderTarget;
	params.X = X;
	params.Y = Y;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FColor UKismetRenderingLibrary::ReadRenderTargetPixel(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, int X, int Y) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetRenderingLibrary.ReadRenderTargetPixel");
	UKismetRenderingLibrary_ReadRenderTargetPixel_Params params;

	params.WorldContextObject = WorldContextObject;
	params.TextureRenderTarget = TextureRenderTarget;
	params.X = X;
	params.Y = Y;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UTexture2D* UKismetRenderingLibrary::ImportFileAsTexture2D(class UObject* WorldContextObject, const class FString& Filename) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetRenderingLibrary.ImportFileAsTexture2D");
	UKismetRenderingLibrary_ImportFileAsTexture2D_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UKismetRenderingLibrary::ExportTexture2D(class UObject* WorldContextObject, class UTexture2D* Texture, const class FString& FilePath, const class FString& Filename) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetRenderingLibrary.ExportTexture2D");
	UKismetRenderingLibrary_ExportTexture2D_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Texture = Texture;
	params.FilePath = FilePath;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetRenderingLibrary::ExportRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, const class FString& FilePath, const class FString& Filename) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetRenderingLibrary.ExportRenderTarget");
	UKismetRenderingLibrary_ExportRenderTarget_Params params;

	params.WorldContextObject = WorldContextObject;
	params.TextureRenderTarget = TextureRenderTarget;
	params.FilePath = FilePath;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetRenderingLibrary::EndDrawCanvasToRenderTarget(class UObject* WorldContextObject, const struct FDrawToRenderTargetContext& Context) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetRenderingLibrary.EndDrawCanvasToRenderTarget");
	UKismetRenderingLibrary_EndDrawCanvasToRenderTarget_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Context = Context;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetRenderingLibrary::DrawMaterialToRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, class UMaterialInterface* Material, bool bForceSetSceneRenderTargets) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetRenderingLibrary.DrawMaterialToRenderTarget");
	UKismetRenderingLibrary_DrawMaterialToRenderTarget_Params params;

	params.WorldContextObject = WorldContextObject;
	params.TextureRenderTarget = TextureRenderTarget;
	params.Material = Material;
	params.bForceSetSceneRenderTargets = bForceSetSceneRenderTargets;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

class UTextureRenderTarget2D* UKismetRenderingLibrary::CreateRenderTarget2D(class UObject* WorldContextObject, int Width, int Height, TEnumAsByte<ETextureRenderTargetFormat> Format) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetRenderingLibrary.CreateRenderTarget2D");
	UKismetRenderingLibrary_CreateRenderTarget2D_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Width = Width;
	params.Height = Height;
	params.Format = Format;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UKismetRenderingLibrary::ConvertRenderTargetToTexture2DEditorOnly(class UObject* WorldContextObject, class UTextureRenderTarget2D* RenderTarget, class UTexture2D* Texture) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetRenderingLibrary.ConvertRenderTargetToTexture2DEditorOnly");
	UKismetRenderingLibrary_ConvertRenderTargetToTexture2DEditorOnly_Params params;

	params.WorldContextObject = WorldContextObject;
	params.RenderTarget = RenderTarget;
	params.Texture = Texture;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetRenderingLibrary::ClearRenderTarget2D(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, const struct FLinearColor& ClearColor) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetRenderingLibrary.ClearRenderTarget2D");
	UKismetRenderingLibrary_ClearRenderTarget2D_Params params;

	params.WorldContextObject = WorldContextObject;
	params.TextureRenderTarget = TextureRenderTarget;
	params.ClearColor = ClearColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetRenderingLibrary::BeginDrawCanvasToRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, class UCanvas** Canvas, struct FVector2D* Size, struct FDrawToRenderTargetContext* Context) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetRenderingLibrary.BeginDrawCanvasToRenderTarget");
	UKismetRenderingLibrary_BeginDrawCanvasToRenderTarget_Params params;

	params.WorldContextObject = WorldContextObject;
	params.TextureRenderTarget = TextureRenderTarget;
	params.Canvas = *Canvas;
	params.Size = *Size;
	params.Context = *Context;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

class FString UKismetStringLibrary::TrimTrailing(const class FString& SourceString) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.TrimTrailing");
	UKismetStringLibrary_TrimTrailing_Params params;

	params.SourceString = SourceString;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetStringLibrary::Trim(const class FString& SourceString) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.Trim");
	UKismetStringLibrary_Trim_Params params;

	params.SourceString = SourceString;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetStringLibrary::ToUpper(const class FString& SourceString) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.ToUpper");
	UKismetStringLibrary_ToUpper_Params params;

	params.SourceString = SourceString;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetStringLibrary::ToLower(const class FString& SourceString) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.ToLower");
	UKismetStringLibrary_ToLower_Params params;

	params.SourceString = SourceString;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetStringLibrary::TimeSecondsToString(float InSeconds) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.TimeSecondsToString");
	UKismetStringLibrary_TimeSecondsToString_Params params;

	params.InSeconds = InSeconds;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetStringLibrary::StartsWith(const class FString& SourceString, const class FString& InPrefix, TEnumAsByte<ESearchCase> SearchCase) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.StartsWith");
	UKismetStringLibrary_StartsWith_Params params;

	params.SourceString = SourceString;
	params.InPrefix = InPrefix;
	params.SearchCase = SearchCase;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetStringLibrary::Split(const class FString& SourceString, const class FString& InStr, TEnumAsByte<ESearchCase> SearchCase, TEnumAsByte<ESearchDir> SearchDir, class FString* LeftS, class FString* RightS) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.Split");
	UKismetStringLibrary_Split_Params params;

	params.SourceString = SourceString;
	params.InStr = InStr;
	params.SearchCase = SearchCase;
	params.SearchDir = SearchDir;
	params.LeftS = *LeftS;
	params.RightS = *RightS;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetStringLibrary::RightPad(const class FString& SourceString, int ChCount) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.RightPad");
	UKismetStringLibrary_RightPad_Params params;

	params.SourceString = SourceString;
	params.ChCount = ChCount;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetStringLibrary::RightChop(const class FString& SourceString, int Count) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.RightChop");
	UKismetStringLibrary_RightChop_Params params;

	params.SourceString = SourceString;
	params.Count = Count;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetStringLibrary::Right(const class FString& SourceString, int Count) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.Right");
	UKismetStringLibrary_Right_Params params;

	params.SourceString = SourceString;
	params.Count = Count;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetStringLibrary::Reverse(const class FString& SourceString) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.Reverse");
	UKismetStringLibrary_Reverse_Params params;

	params.SourceString = SourceString;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetStringLibrary::ReplaceInline(const class FString& SearchText, const class FString& ReplacementText, TEnumAsByte<ESearchCase> SearchCase, class FString* SourceString) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.ReplaceInline");
	UKismetStringLibrary_ReplaceInline_Params params;

	params.SearchText = SearchText;
	params.ReplacementText = ReplacementText;
	params.SearchCase = SearchCase;
	params.SourceString = *SourceString;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetStringLibrary::Replace(const class FString& SourceString, const class FString& From, const class FString& To, TEnumAsByte<ESearchCase> SearchCase) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.Replace");
	UKismetStringLibrary_Replace_Params params;

	params.SourceString = SourceString;
	params.From = From;
	params.To = To;
	params.SearchCase = SearchCase;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetStringLibrary::NotEqual_StrStr(const class FString& A, const class FString& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.NotEqual_StrStr");
	UKismetStringLibrary_NotEqual_StrStr_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetStringLibrary::NotEqual_StriStri(const class FString& A, const class FString& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.NotEqual_StriStri");
	UKismetStringLibrary_NotEqual_StriStri_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetStringLibrary::Mid(const class FString& SourceString, int Start, int Count) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.Mid");
	UKismetStringLibrary_Mid_Params params;

	params.SourceString = SourceString;
	params.Start = Start;
	params.Count = Count;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetStringLibrary::MatchesWildcard(const class FString& SourceString, const class FString& Wildcard, TEnumAsByte<ESearchCase> SearchCase) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.MatchesWildcard");
	UKismetStringLibrary_MatchesWildcard_Params params;

	params.SourceString = SourceString;
	params.Wildcard = Wildcard;
	params.SearchCase = SearchCase;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetStringLibrary::Len(const class FString& S) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.Len");
	UKismetStringLibrary_Len_Params params;

	params.S = S;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetStringLibrary::LeftPad(const class FString& SourceString, int ChCount) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.LeftPad");
	UKismetStringLibrary_LeftPad_Params params;

	params.SourceString = SourceString;
	params.ChCount = ChCount;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetStringLibrary::LeftChop(const class FString& SourceString, int Count) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.LeftChop");
	UKismetStringLibrary_LeftChop_Params params;

	params.SourceString = SourceString;
	params.Count = Count;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetStringLibrary::Left(const class FString& SourceString, int Count) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.Left");
	UKismetStringLibrary_Left_Params params;

	params.SourceString = SourceString;
	params.Count = Count;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetStringLibrary::JoinStringArray(TArray<class FString> SourceArray, const class FString& Separator) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.JoinStringArray");
	UKismetStringLibrary_JoinStringArray_Params params;

	params.SourceArray = SourceArray;
	params.Separator = Separator;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetStringLibrary::IsNumeric(const class FString& SourceString) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.IsNumeric");
	UKismetStringLibrary_IsNumeric_Params params;

	params.SourceString = SourceString;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetStringLibrary::GetSubstring(const class FString& SourceString, int StartIndex, int Length) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.GetSubstring");
	UKismetStringLibrary_GetSubstring_Params params;

	params.SourceString = SourceString;
	params.StartIndex = StartIndex;
	params.Length = Length;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetStringLibrary::GetCharacterAsNumber(const class FString& SourceString, int Index) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.GetCharacterAsNumber");
	UKismetStringLibrary_GetCharacterAsNumber_Params params;

	params.SourceString = SourceString;
	params.Index = Index;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetStringLibrary::FindSubstring(const class FString& SearchIn, const class FString& Substring, bool bUseCase, bool bSearchFromEnd, int StartPosition) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.FindSubstring");
	UKismetStringLibrary_FindSubstring_Params params;

	params.SearchIn = SearchIn;
	params.Substring = Substring;
	params.bUseCase = bUseCase;
	params.bSearchFromEnd = bSearchFromEnd;
	params.StartPosition = StartPosition;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetStringLibrary::EqualEqual_StrStr(const class FString& A, const class FString& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.EqualEqual_StrStr");
	UKismetStringLibrary_EqualEqual_StrStr_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetStringLibrary::EqualEqual_StriStri(const class FString& A, const class FString& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.EqualEqual_StriStri");
	UKismetStringLibrary_EqualEqual_StriStri_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetStringLibrary::EndsWith(const class FString& SourceString, const class FString& InSuffix, TEnumAsByte<ESearchCase> SearchCase) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.EndsWith");
	UKismetStringLibrary_EndsWith_Params params;

	params.SourceString = SourceString;
	params.InSuffix = InSuffix;
	params.SearchCase = SearchCase;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetStringLibrary::CullArray(const class FString& SourceString, TArray<class FString>* inArray) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.CullArray");
	UKismetStringLibrary_CullArray_Params params;

	params.SourceString = SourceString;
	params.inArray = *inArray;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetStringLibrary::Conv_VectorToString(const struct FVector& InVec) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.Conv_VectorToString");
	UKismetStringLibrary_Conv_VectorToString_Params params;

	params.InVec = InVec;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetStringLibrary::Conv_Vector2dToString(const struct FVector2D& InVec) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.Conv_Vector2dToString");
	UKismetStringLibrary_Conv_Vector2dToString_Params params;

	params.InVec = InVec;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetStringLibrary::Conv_TransformToString(const struct FTransform& InTrans) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.Conv_TransformToString");
	UKismetStringLibrary_Conv_TransformToString_Params params;

	params.InTrans = InTrans;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UKismetStringLibrary::Conv_StringToVector2D(const class FString& inString, struct FVector2D* OutConvertedVector2D, bool* OutIsValid) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.Conv_StringToVector2D");
	UKismetStringLibrary_Conv_StringToVector2D_Params params;

	params.inString = inString;
	params.OutConvertedVector2D = *OutConvertedVector2D;
	params.OutIsValid = *OutIsValid;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetStringLibrary::Conv_StringToVector(const class FString& inString, struct FVector* OutConvertedVector, bool* OutIsValid) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.Conv_StringToVector");
	UKismetStringLibrary_Conv_StringToVector_Params params;

	params.inString = inString;
	params.OutConvertedVector = *OutConvertedVector;
	params.OutIsValid = *OutIsValid;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetStringLibrary::Conv_StringToRotator(const class FString& inString, struct FRotator* OutConvertedRotator, bool* OutIsValid) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.Conv_StringToRotator");
	UKismetStringLibrary_Conv_StringToRotator_Params params;

	params.inString = inString;
	params.OutConvertedRotator = *OutConvertedRotator;
	params.OutIsValid = OutIsValid;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

struct FName UKismetStringLibrary::Conv_StringToName(const class FString& inString) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.Conv_StringToName");
	UKismetStringLibrary_Conv_StringToName_Params params;

	params.inString = inString;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetStringLibrary::Conv_StringToInt(const class FString& inString) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.Conv_StringToInt");
	UKismetStringLibrary_Conv_StringToInt_Params params;

	params.inString = inString;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetStringLibrary::Conv_StringToFloat(const class FString& inString) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.Conv_StringToFloat");
	UKismetStringLibrary_Conv_StringToFloat_Params params;

	params.inString = inString;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UKismetStringLibrary::Conv_StringToColor(const class FString& inString, struct FLinearColor* OutConvertedColor, bool* OutIsValid) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.Conv_StringToColor");
	UKismetStringLibrary_Conv_StringToColor_Params params;

	params.inString = inString;
	params.OutConvertedColor = *OutConvertedColor;
	params.OutIsValid = *OutIsValid;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

class FString UKismetStringLibrary::Conv_RotatorToString(const struct FRotator& InRot) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.Conv_RotatorToString");
	UKismetStringLibrary_Conv_RotatorToString_Params params;

	params.InRot = InRot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetStringLibrary::Conv_ObjectToString(class UObject* InObj) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.Conv_ObjectToString");
	UKismetStringLibrary_Conv_ObjectToString_Params params;

	params.InObj = InObj;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetStringLibrary::Conv_NameToString(const struct FName& InName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.Conv_NameToString");
	UKismetStringLibrary_Conv_NameToString_Params params;

	params.InName = InName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetStringLibrary::Conv_IntVectorToString(const struct FIntVector& InIntVec) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.Conv_IntVectorToString");
	UKismetStringLibrary_Conv_IntVectorToString_Params params;

	params.InIntVec = InIntVec;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetStringLibrary::Conv_IntToString(int inInt) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.Conv_IntToString");
	UKismetStringLibrary_Conv_IntToString_Params params;

	params.inInt = inInt;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetStringLibrary::Conv_FloatToString(float InFloat) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.Conv_FloatToString");
	UKismetStringLibrary_Conv_FloatToString_Params params;

	params.InFloat = InFloat;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetStringLibrary::Conv_ColorToString(const struct FLinearColor& InColor) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.Conv_ColorToString");
	UKismetStringLibrary_Conv_ColorToString_Params params;

	params.InColor = InColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetStringLibrary::Conv_ByteToString(unsigned char InByte) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.Conv_ByteToString");
	UKismetStringLibrary_Conv_ByteToString_Params params;

	params.InByte = InByte;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetStringLibrary::Conv_BoolToString(bool InBool) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.Conv_BoolToString");
	UKismetStringLibrary_Conv_BoolToString_Params params;

	params.InBool = InBool;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetStringLibrary::Contains(const class FString& SearchIn, const class FString& Substring, bool bUseCase, bool bSearchFromEnd) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.Contains");
	UKismetStringLibrary_Contains_Params params;

	params.SearchIn = SearchIn;
	params.Substring = Substring;
	params.bUseCase = bUseCase;
	params.bSearchFromEnd = bSearchFromEnd;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetStringLibrary::Concat_StrStr(const class FString& A, const class FString& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.Concat_StrStr");
	UKismetStringLibrary_Concat_StrStr_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetStringLibrary::BuildString_Vector2d(const class FString& AppendTo, const class FString& Prefix, const struct FVector2D& InVector2D, const class FString& Suffix) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.BuildString_Vector2d");
	UKismetStringLibrary_BuildString_Vector2d_Params params;

	params.AppendTo = AppendTo;
	params.Prefix = Prefix;
	params.InVector2D = InVector2D;
	params.Suffix = Suffix;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetStringLibrary::BuildString_Vector(const class FString& AppendTo, const class FString& Prefix, const struct FVector& InVector, const class FString& Suffix) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.BuildString_Vector");
	UKismetStringLibrary_BuildString_Vector_Params params;

	params.AppendTo = AppendTo;
	params.Prefix = Prefix;
	params.InVector = InVector;
	params.Suffix = Suffix;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetStringLibrary::BuildString_Rotator(const class FString& AppendTo, const class FString& Prefix, const struct FRotator& InRot, const class FString& Suffix) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.BuildString_Rotator");
	UKismetStringLibrary_BuildString_Rotator_Params params;

	params.AppendTo = AppendTo;
	params.Prefix = Prefix;
	params.InRot = InRot;
	params.Suffix = Suffix;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetStringLibrary::BuildString_Object(const class FString& AppendTo, const class FString& Prefix, class UObject* InObj, const class FString& Suffix) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.BuildString_Object");
	UKismetStringLibrary_BuildString_Object_Params params;

	params.AppendTo = AppendTo;
	params.Prefix = Prefix;
	params.InObj = InObj;
	params.Suffix = Suffix;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetStringLibrary::BuildString_Name(const class FString& AppendTo, const class FString& Prefix, const struct FName& InName, const class FString& Suffix) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.BuildString_Name");
	UKismetStringLibrary_BuildString_Name_Params params;

	params.AppendTo = AppendTo;
	params.Prefix = Prefix;
	params.InName = InName;
	params.Suffix = Suffix;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetStringLibrary::BuildString_IntVector(const class FString& AppendTo, const class FString& Prefix, const struct FIntVector& InIntVector, const class FString& Suffix) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.BuildString_IntVector");
	UKismetStringLibrary_BuildString_IntVector_Params params;

	params.AppendTo = AppendTo;
	params.Prefix = Prefix;
	params.InIntVector = InIntVector;
	params.Suffix = Suffix;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetStringLibrary::BuildString_Int(const class FString& AppendTo, const class FString& Prefix, int inInt, const class FString& Suffix) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.BuildString_Int");
	UKismetStringLibrary_BuildString_Int_Params params;

	params.AppendTo = AppendTo;
	params.Prefix = Prefix;
	params.inInt = inInt;
	params.Suffix = Suffix;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetStringLibrary::BuildString_Float(const class FString& AppendTo, const class FString& Prefix, float InFloat, const class FString& Suffix) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.BuildString_Float");
	UKismetStringLibrary_BuildString_Float_Params params;

	params.AppendTo = AppendTo;
	params.Prefix = Prefix;
	params.InFloat = InFloat;
	params.Suffix = Suffix;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetStringLibrary::BuildString_Color(const class FString& AppendTo, const class FString& Prefix, const struct FLinearColor& InColor, const class FString& Suffix) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.BuildString_Color");
	UKismetStringLibrary_BuildString_Color_Params params;

	params.AppendTo = AppendTo;
	params.Prefix = Prefix;
	params.InColor = InColor;
	params.Suffix = Suffix;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetStringLibrary::BuildString_Bool(const class FString& AppendTo, const class FString& Prefix, bool InBool, const class FString& Suffix) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringLibrary.BuildString_Bool");
	UKismetStringLibrary_BuildString_Bool_Params params;

	params.AppendTo = AppendTo;
	params.Prefix = Prefix;
	params.InBool = InBool;
	params.Suffix = Suffix;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetStringTableLibrary::IsRegisteredTableId(const struct FName& TableId) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringTableLibrary.IsRegisteredTableId");
	UKismetStringTableLibrary_IsRegisteredTableId_Params params;

	params.TableId = TableId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetStringTableLibrary::IsRegisteredTableEntry(const struct FName& TableId, const class FString& Key) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringTableLibrary.IsRegisteredTableEntry");
	UKismetStringTableLibrary_IsRegisteredTableEntry_Params params;

	params.TableId = TableId;
	params.Key = Key;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetStringTableLibrary::GetTableNamespace(const struct FName& TableId) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringTableLibrary.GetTableNamespace");
	UKismetStringTableLibrary_GetTableNamespace_Params params;

	params.TableId = TableId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetStringTableLibrary::GetTableEntrySourceString(const struct FName& TableId, const class FString& Key) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringTableLibrary.GetTableEntrySourceString");
	UKismetStringTableLibrary_GetTableEntrySourceString_Params params;

	params.TableId = TableId;
	params.Key = Key;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetStringTableLibrary::GetTableEntryMetaData(const struct FName& TableId, const class FString& Key, const struct FName& MetaDataId) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetStringTableLibrary.GetTableEntryMetaData");
	UKismetStringTableLibrary_GetTableEntryMetaData_Params params;

	params.TableId = TableId;
	params.Key = Key;
	params.MetaDataId = MetaDataId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UKismetSystemLibrary::UnregisterForRemoteNotifications() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.UnregisterForRemoteNotifications");
	UKismetSystemLibrary_UnregisterForRemoteNotifications_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::UnloadPrimaryAssetList(TArray<struct FPrimaryAssetId> PrimaryAssetIdList) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.UnloadPrimaryAssetList");
	UKismetSystemLibrary_UnloadPrimaryAssetList_Params params;

	params.PrimaryAssetIdList = PrimaryAssetIdList;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::UnloadPrimaryAsset(const struct FPrimaryAssetId& PrimaryAssetId) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.UnloadPrimaryAsset");
	UKismetSystemLibrary_UnloadPrimaryAsset_Params params;

	params.PrimaryAssetId = PrimaryAssetId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::StackTrace() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.StackTrace");
	UKismetSystemLibrary_StackTrace_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UKismetSystemLibrary::SphereTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FHitResult* OutHit) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.SphereTraceSingleForObjects");
	UKismetSystemLibrary_SphereTraceSingleForObjects_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.ObjectTypes = ObjectTypes;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;
	params.TraceColor = TraceColor;
	params.TraceHitColor = TraceHitColor;
	params.DrawTime = DrawTime;
	params.OutHit = *OutHit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::SphereTraceSingleByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, const struct FName& ProfileName, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FHitResult* OutHit) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.SphereTraceSingleByProfile");
	UKismetSystemLibrary_SphereTraceSingleByProfile_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.ProfileName = ProfileName;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;
	params.TraceColor = TraceColor;
	params.TraceHitColor = TraceHitColor;
	params.DrawTime = DrawTime;
	params.OutHit = *OutHit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::SphereTraceSingle(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FHitResult* OutHit) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.SphereTraceSingle");
	UKismetSystemLibrary_SphereTraceSingle_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;
	params.TraceColor = TraceColor;
	params.TraceHitColor = TraceHitColor;
	params.DrawTime = DrawTime;
	params.OutHit = *OutHit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::SphereTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, TArray<struct FHitResult>* OutHits) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.SphereTraceMultiForObjects");
	UKismetSystemLibrary_SphereTraceMultiForObjects_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.ObjectTypes = ObjectTypes;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;
	params.TraceColor = TraceColor;
	params.TraceHitColor = TraceHitColor;
	params.DrawTime = DrawTime;
	params.OutHits = *OutHits;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::SphereTraceMultiByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, const struct FName& ProfileName, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, TArray<struct FHitResult>* OutHits) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.SphereTraceMultiByProfile");
	UKismetSystemLibrary_SphereTraceMultiByProfile_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.ProfileName = ProfileName;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;
	params.TraceColor = TraceColor;
	params.TraceHitColor = TraceHitColor;
	params.DrawTime = DrawTime;
	params.OutHits = *OutHits;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::SphereTraceMulti(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, TArray<struct FHitResult>* OutHits) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.SphereTraceMulti");
	UKismetSystemLibrary_SphereTraceMulti_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;
	params.TraceColor = TraceColor;
	params.TraceHitColor = TraceHitColor;
	params.DrawTime = DrawTime;
	params.OutHits = *OutHits;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::SphereOverlapComponents(class UObject* WorldContextObject, const struct FVector& SpherePos, float SphereRadius, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.SphereOverlapComponents");
	UKismetSystemLibrary_SphereOverlapComponents_Params params;

	params.WorldContextObject = WorldContextObject;
	params.SpherePos = SpherePos;
	params.SphereRadius = SphereRadius;
	params.ObjectTypes = ObjectTypes;
	params.ComponentClassFilter = ComponentClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;
	params.OutComponents = *OutComponents;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::SphereOverlapActors(class UObject* WorldContextObject, const struct FVector& SpherePos, float SphereRadius, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.SphereOverlapActors");
	UKismetSystemLibrary_SphereOverlapActors_Params params;

	params.WorldContextObject = WorldContextObject;
	params.SpherePos = SpherePos;
	params.SphereRadius = SphereRadius;
	params.ObjectTypes = ObjectTypes;
	params.ActorClassFilter = ActorClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;
	params.OutActors = *OutActors;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UKismetSystemLibrary::ShowPlatformSpecificLeaderboardScreen(const class FString& CategoryName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.ShowPlatformSpecificLeaderboardScreen");
	UKismetSystemLibrary_ShowPlatformSpecificLeaderboardScreen_Params params;

	params.CategoryName = CategoryName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::ShowPlatformSpecificAchievementsScreen(class APlayerController* SpecificPlayer) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.ShowPlatformSpecificAchievementsScreen");
	UKismetSystemLibrary_ShowPlatformSpecificAchievementsScreen_Params params;

	params.SpecificPlayer = SpecificPlayer;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::ShowInterstitialAd() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.ShowInterstitialAd");
	UKismetSystemLibrary_ShowInterstitialAd_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::ShowAdBanner(int AdIdIndex, bool bShowOnBottomOfScreen) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.ShowAdBanner");
	UKismetSystemLibrary_ShowAdBanner_Params params;

	params.AdIdIndex = AdIdIndex;
	params.bShowOnBottomOfScreen = bShowOnBottomOfScreen;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::SetWindowTitle(const struct FText& Title) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.SetWindowTitle");
	UKismetSystemLibrary_SetWindowTitle_Params params;

	params.Title = Title;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::SetVolumeButtonsHandledBySystem(bool bEnabled) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.SetVolumeButtonsHandledBySystem");
	UKismetSystemLibrary_SetVolumeButtonsHandledBySystem_Params params;

	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::SetVectorPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FVector& Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.SetVectorPropertyByName");
	UKismetSystemLibrary_SetVectorPropertyByName_Params params;

	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::SetUserActivity(const struct FUserActivity& UserActivity) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.SetUserActivity");
	UKismetSystemLibrary_SetUserActivity_Params params;

	params.UserActivity = UserActivity;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::SetTransformPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FTransform& Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.SetTransformPropertyByName");
	UKismetSystemLibrary_SetTransformPropertyByName_Params params;

	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::SetTextPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FText& Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.SetTextPropertyByName");
	UKismetSystemLibrary_SetTextPropertyByName_Params params;

	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::SetSuppressViewportTransitionMessage(class UObject* WorldContextObject, bool bState) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.SetSuppressViewportTransitionMessage");
	UKismetSystemLibrary_SetSuppressViewportTransitionMessage_Params params;

	params.WorldContextObject = WorldContextObject;
	params.bState = bState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::SetStructurePropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FGenericStruct& Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.SetStructurePropertyByName");
	UKismetSystemLibrary_SetStructurePropertyByName_Params params;

	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::SetStringPropertyByName(class UObject* Object, const struct FName& PropertyName, const class FString& Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.SetStringPropertyByName");
	UKismetSystemLibrary_SetStringPropertyByName_Params params;

	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::SetSoftObjectPropertyByName(class UObject* Object, const struct FName& PropertyName, TSoftObjectPtr<class UObject> Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.SetSoftObjectPropertyByName");
	UKismetSystemLibrary_SetSoftObjectPropertyByName_Params params;

	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::SetSoftClassPropertyByName(class UObject* Object, const struct FName& PropertyName, TSoftObjectPtr<class UClass> Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.SetSoftClassPropertyByName");
	UKismetSystemLibrary_SetSoftClassPropertyByName_Params params;

	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::SetRotatorPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FRotator& Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.SetRotatorPropertyByName");
	UKismetSystemLibrary_SetRotatorPropertyByName_Params params;

	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::SetObjectPropertyByName(class UObject* Object, const struct FName& PropertyName, class UObject* Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.SetObjectPropertyByName");
	UKismetSystemLibrary_SetObjectPropertyByName_Params params;

	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::SetNamePropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FName& Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.SetNamePropertyByName");
	UKismetSystemLibrary_SetNamePropertyByName_Params params;

	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::SetLinearColorPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FLinearColor& Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.SetLinearColorPropertyByName");
	UKismetSystemLibrary_SetLinearColorPropertyByName_Params params;

	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::SetIntPropertyByName(class UObject* Object, const struct FName& PropertyName, int Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.SetIntPropertyByName");
	UKismetSystemLibrary_SetIntPropertyByName_Params params;

	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::SetInterfacePropertyByName(class UObject* Object, const struct FName& PropertyName, const TScriptInterface<class UInterface>& Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.SetInterfacePropertyByName");
	UKismetSystemLibrary_SetInterfacePropertyByName_Params params;

	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::SetFloatPropertyByName(class UObject* Object, const struct FName& PropertyName, float Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.SetFloatPropertyByName");
	UKismetSystemLibrary_SetFloatPropertyByName_Params params;

	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::SetCollisionProfileNameProperty(class UObject* Object, const struct FName& PropertyName, const struct FCollisionProfileName& Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.SetCollisionProfileNameProperty");
	UKismetSystemLibrary_SetCollisionProfileNameProperty_Params params;

	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::SetClassPropertyByName(class UObject* Object, const struct FName& PropertyName, class UClass* Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.SetClassPropertyByName");
	UKismetSystemLibrary_SetClassPropertyByName_Params params;

	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::SetBytePropertyByName(class UObject* Object, const struct FName& PropertyName, unsigned char Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.SetBytePropertyByName");
	UKismetSystemLibrary_SetBytePropertyByName_Params params;

	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::SetBoolPropertyByName(class UObject* Object, const struct FName& PropertyName, bool Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.SetBoolPropertyByName");
	UKismetSystemLibrary_SetBoolPropertyByName_Params params;

	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::RetriggerableDelay(class UObject* WorldContextObject, float Duration, const struct FLatentActionInfo& LatentInfo) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.RetriggerableDelay");
	UKismetSystemLibrary_RetriggerableDelay_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Duration = Duration;
	params.LatentInfo = LatentInfo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::ResetGamepadAssignmentToController(int ControllerId) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.ResetGamepadAssignmentToController");
	UKismetSystemLibrary_ResetGamepadAssignmentToController_Params params;

	params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::ResetGamepadAssignments() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.ResetGamepadAssignments");
	UKismetSystemLibrary_ResetGamepadAssignments_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::RegisterForRemoteNotifications() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.RegisterForRemoteNotifications");
	UKismetSystemLibrary_RegisterForRemoteNotifications_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::QuitGame(class UObject* WorldContextObject, class APlayerController* SpecificPlayer, TEnumAsByte<EQuitPreference> QuitPreference) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.QuitGame");
	UKismetSystemLibrary_QuitGame_Params params;

	params.WorldContextObject = WorldContextObject;
	params.SpecificPlayer = SpecificPlayer;
	params.QuitPreference = QuitPreference;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::PrintWarning(const class FString& inString) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.PrintWarning");
	UKismetSystemLibrary_PrintWarning_Params params;

	params.inString = inString;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::PrintText(class UObject* WorldContextObject, const struct FText& InText, bool bPrintToScreen, bool bPrintToLog, const struct FLinearColor& TextColor, float Duration) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.PrintText");
	UKismetSystemLibrary_PrintText_Params params;

	params.WorldContextObject = WorldContextObject;
	params.InText = InText;
	params.bPrintToScreen = bPrintToScreen;
	params.bPrintToLog = bPrintToLog;
	params.TextColor = TextColor;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::PrintString(class UObject* WorldContextObject, const class FString& inString, bool bPrintToScreen, bool bPrintToLog, const struct FLinearColor& TextColor, float Duration) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.PrintString");
	UKismetSystemLibrary_PrintString_Params params;

	params.WorldContextObject = WorldContextObject;
	params.inString = inString;
	params.bPrintToScreen = bPrintToScreen;
	params.bPrintToLog = bPrintToLog;
	params.TextColor = TextColor;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::OnAssetLoaded__DelegateSignature(class UObject* Loaded) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.OnAssetLoaded__DelegateSignature");
	UKismetSystemLibrary_OnAssetLoaded__DelegateSignature_Params params;

	params.Loaded = Loaded;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::OnAssetClassLoaded__DelegateSignature(class UClass* Loaded) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.OnAssetClassLoaded__DelegateSignature");
	UKismetSystemLibrary_OnAssetClassLoaded__DelegateSignature_Params params;

	params.Loaded = Loaded;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UKismetSystemLibrary::NotEqual_SoftObjectReference(TSoftObjectPtr<class UObject> A, TSoftObjectPtr<class UObject> B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.NotEqual_SoftObjectReference");
	UKismetSystemLibrary_NotEqual_SoftObjectReference_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::NotEqual_SoftClassReference(TSoftObjectPtr<class UClass> A, TSoftObjectPtr<class UClass> B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.NotEqual_SoftClassReference");
	UKismetSystemLibrary_NotEqual_SoftClassReference_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::NotEqual_PrimaryAssetType(const struct FPrimaryAssetType& A, const struct FPrimaryAssetType& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.NotEqual_PrimaryAssetType");
	UKismetSystemLibrary_NotEqual_PrimaryAssetType_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::NotEqual_PrimaryAssetId(const struct FPrimaryAssetId& A, const struct FPrimaryAssetId& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.NotEqual_PrimaryAssetId");
	UKismetSystemLibrary_NotEqual_PrimaryAssetId_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UKismetSystemLibrary::MoveComponentTo(class USceneComponent* Component, const struct FVector& TargetRelativeLocation, const struct FRotator& TargetRelativeRotation, bool bEaseOut, bool bEaseIn, float OverTime, bool bForceShortestRotationPath, TEnumAsByte<EMoveComponentAction> MoveAction, const struct FLatentActionInfo& LatentInfo) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.MoveComponentTo");
	UKismetSystemLibrary_MoveComponentTo_Params params;

	params.Component = Component;
	params.TargetRelativeLocation = TargetRelativeLocation;
	params.TargetRelativeRotation = TargetRelativeRotation;
	params.bEaseOut = bEaseOut;
	params.bEaseIn = bEaseIn;
	params.OverTime = OverTime;
	params.bForceShortestRotationPath = bForceShortestRotationPath;
	params.MoveAction = MoveAction;
	params.LatentInfo = LatentInfo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

struct FSoftObjectPath UKismetSystemLibrary::MakeSoftObjectPath(const class FString& PathString) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.MakeSoftObjectPath");
	UKismetSystemLibrary_MakeSoftObjectPath_Params params;

	params.PathString = PathString;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FSoftClassPath UKismetSystemLibrary::MakeSoftClassPath(const class FString& PathString) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.MakeSoftClassPath");
	UKismetSystemLibrary_MakeSoftClassPath_Params params;

	params.PathString = PathString;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FText UKismetSystemLibrary::MakeLiteralText(const struct FText& Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.MakeLiteralText");
	UKismetSystemLibrary_MakeLiteralText_Params params;

	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetSystemLibrary::MakeLiteralString(const class FString& Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.MakeLiteralString");
	UKismetSystemLibrary_MakeLiteralString_Params params;

	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FName UKismetSystemLibrary::MakeLiteralName(const struct FName& Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.MakeLiteralName");
	UKismetSystemLibrary_MakeLiteralName_Params params;

	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetSystemLibrary::MakeLiteralInt(int Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.MakeLiteralInt");
	UKismetSystemLibrary_MakeLiteralInt_Params params;

	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetSystemLibrary::MakeLiteralFloat(float Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.MakeLiteralFloat");
	UKismetSystemLibrary_MakeLiteralFloat_Params params;

	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::MakeLiteralBool(bool Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.MakeLiteralBool");
	UKismetSystemLibrary_MakeLiteralBool_Params params;

	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UKismetSystemLibrary::LoadInterstitialAd(int AdIdIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.LoadInterstitialAd");
	UKismetSystemLibrary_LoadInterstitialAd_Params params;

	params.AdIdIndex = AdIdIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::LoadAssetClass(class UObject* WorldContextObject, TSoftObjectPtr<class UClass> AssetClass, const struct FScriptDelegate& OnLoaded, const struct FLatentActionInfo& LatentInfo) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.LoadAssetClass");
	UKismetSystemLibrary_LoadAssetClass_Params params;

	params.WorldContextObject = WorldContextObject;
	params.AssetClass = AssetClass;
	params.OnLoaded = OnLoaded;
	params.LatentInfo = LatentInfo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::LoadAsset(class UObject* WorldContextObject, TSoftObjectPtr<class UObject> Asset, const struct FScriptDelegate& OnLoaded, const struct FLatentActionInfo& LatentInfo) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.LoadAsset");
	UKismetSystemLibrary_LoadAsset_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Asset = Asset;
	params.OnLoaded = OnLoaded;
	params.LatentInfo = LatentInfo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UKismetSystemLibrary::LineTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FHitResult* OutHit) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.LineTraceSingleForObjects");
	UKismetSystemLibrary_LineTraceSingleForObjects_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.ObjectTypes = ObjectTypes;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;
	params.TraceColor = TraceColor;
	params.TraceHitColor = TraceHitColor;
	params.DrawTime = DrawTime;
	params.OutHit = *OutHit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::LineTraceSingleByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FName& ProfileName, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FHitResult* OutHit) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.LineTraceSingleByProfile");
	UKismetSystemLibrary_LineTraceSingleByProfile_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.ProfileName = ProfileName;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;
	params.TraceColor = TraceColor;
	params.TraceHitColor = TraceHitColor;
	params.DrawTime = DrawTime;
	params.OutHit = *OutHit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::LineTraceSingle(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FHitResult* OutHit) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.LineTraceSingle");
	UKismetSystemLibrary_LineTraceSingle_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;
	params.TraceColor = TraceColor;
	params.TraceHitColor = TraceHitColor;
	params.DrawTime = DrawTime;
	params.OutHit = *OutHit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::LineTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, TArray<struct FHitResult>* OutHits) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.LineTraceMultiForObjects");
	UKismetSystemLibrary_LineTraceMultiForObjects_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.ObjectTypes = ObjectTypes;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;
	params.TraceColor = TraceColor;
	params.TraceHitColor = TraceHitColor;
	params.DrawTime = DrawTime;
	params.OutHits = *OutHits;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::LineTraceMultiByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FName& ProfileName, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, TArray<struct FHitResult>* OutHits) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.LineTraceMultiByProfile");
	UKismetSystemLibrary_LineTraceMultiByProfile_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.ProfileName = ProfileName;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;
	params.TraceColor = TraceColor;
	params.TraceHitColor = TraceHitColor;
	params.DrawTime = DrawTime;
	params.OutHits = *OutHits;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::LineTraceMulti(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, TArray<struct FHitResult>* OutHits) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.LineTraceMulti");
	UKismetSystemLibrary_LineTraceMulti_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;
	params.TraceColor = TraceColor;
	params.TraceHitColor = TraceHitColor;
	params.DrawTime = DrawTime;
	params.OutHits = *OutHits;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UKismetSystemLibrary::LaunchURL(const class FString& URL) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.LaunchURL");
	UKismetSystemLibrary_LaunchURL_Params params;

	params.URL = URL;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::K2_UnPauseTimerHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.K2_UnPauseTimerHandle");
	UKismetSystemLibrary_K2_UnPauseTimerHandle_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Handle = Handle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::K2_UnPauseTimerDelegate(const struct FScriptDelegate& Delegate) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.K2_UnPauseTimerDelegate");
	UKismetSystemLibrary_K2_UnPauseTimerDelegate_Params params;

	params.Delegate = Delegate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::K2_UnPauseTimer(class UObject* Object, const class FString& FunctionName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.K2_UnPauseTimer");
	UKismetSystemLibrary_K2_UnPauseTimer_Params params;

	params.Object = Object;
	params.FunctionName = FunctionName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UKismetSystemLibrary::K2_TimerExistsHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.K2_TimerExistsHandle");
	UKismetSystemLibrary_K2_TimerExistsHandle_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Handle = Handle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::K2_TimerExistsDelegate(const struct FScriptDelegate& Delegate) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.K2_TimerExistsDelegate");
	UKismetSystemLibrary_K2_TimerExistsDelegate_Params params;

	params.Delegate = Delegate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::K2_TimerExists(class UObject* Object, const class FString& FunctionName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.K2_TimerExists");
	UKismetSystemLibrary_K2_TimerExists_Params params;

	params.Object = Object;
	params.FunctionName = FunctionName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FTimerHandle UKismetSystemLibrary::K2_SetTimerDelegate(const struct FScriptDelegate& Delegate, float Time, bool bLooping) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.K2_SetTimerDelegate");
	UKismetSystemLibrary_K2_SetTimerDelegate_Params params;

	params.Delegate = Delegate;
	params.Time = Time;
	params.bLooping = bLooping;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FTimerHandle UKismetSystemLibrary::K2_SetTimer(class UObject* Object, const class FString& FunctionName, float Time, bool bLooping) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.K2_SetTimer");
	UKismetSystemLibrary_K2_SetTimer_Params params;

	params.Object = Object;
	params.FunctionName = FunctionName;
	params.Time = Time;
	params.bLooping = bLooping;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UKismetSystemLibrary::K2_PauseTimerHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.K2_PauseTimerHandle");
	UKismetSystemLibrary_K2_PauseTimerHandle_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Handle = Handle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::K2_PauseTimerDelegate(const struct FScriptDelegate& Delegate) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.K2_PauseTimerDelegate");
	UKismetSystemLibrary_K2_PauseTimerDelegate_Params params;

	params.Delegate = Delegate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::K2_PauseTimer(class UObject* Object, const class FString& FunctionName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.K2_PauseTimer");
	UKismetSystemLibrary_K2_PauseTimer_Params params;

	params.Object = Object;
	params.FunctionName = FunctionName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UKismetSystemLibrary::K2_IsValidTimerHandle(const struct FTimerHandle& Handle) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.K2_IsValidTimerHandle");
	UKismetSystemLibrary_K2_IsValidTimerHandle_Params params;

	params.Handle = Handle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::K2_IsTimerPausedHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.K2_IsTimerPausedHandle");
	UKismetSystemLibrary_K2_IsTimerPausedHandle_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Handle = Handle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::K2_IsTimerPausedDelegate(const struct FScriptDelegate& Delegate) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.K2_IsTimerPausedDelegate");
	UKismetSystemLibrary_K2_IsTimerPausedDelegate_Params params;

	params.Delegate = Delegate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::K2_IsTimerPaused(class UObject* Object, const class FString& FunctionName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.K2_IsTimerPaused");
	UKismetSystemLibrary_K2_IsTimerPaused_Params params;

	params.Object = Object;
	params.FunctionName = FunctionName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::K2_IsTimerActiveHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.K2_IsTimerActiveHandle");
	UKismetSystemLibrary_K2_IsTimerActiveHandle_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Handle = Handle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::K2_IsTimerActiveDelegate(const struct FScriptDelegate& Delegate) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.K2_IsTimerActiveDelegate");
	UKismetSystemLibrary_K2_IsTimerActiveDelegate_Params params;

	params.Delegate = Delegate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::K2_IsTimerActive(class UObject* Object, const class FString& FunctionName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.K2_IsTimerActive");
	UKismetSystemLibrary_K2_IsTimerActive_Params params;

	params.Object = Object;
	params.FunctionName = FunctionName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FTimerHandle UKismetSystemLibrary::K2_InvalidateTimerHandle(struct FTimerHandle* Handle) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.K2_InvalidateTimerHandle");
	UKismetSystemLibrary_K2_InvalidateTimerHandle_Params params;

	params.Handle = *Handle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetSystemLibrary::K2_GetTimerRemainingTimeHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.K2_GetTimerRemainingTimeHandle");
	UKismetSystemLibrary_K2_GetTimerRemainingTimeHandle_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Handle = Handle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetSystemLibrary::K2_GetTimerRemainingTimeDelegate(const struct FScriptDelegate& Delegate) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.K2_GetTimerRemainingTimeDelegate");
	UKismetSystemLibrary_K2_GetTimerRemainingTimeDelegate_Params params;

	params.Delegate = Delegate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetSystemLibrary::K2_GetTimerRemainingTime(class UObject* Object, const class FString& FunctionName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.K2_GetTimerRemainingTime");
	UKismetSystemLibrary_K2_GetTimerRemainingTime_Params params;

	params.Object = Object;
	params.FunctionName = FunctionName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetSystemLibrary::K2_GetTimerElapsedTimeHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.K2_GetTimerElapsedTimeHandle");
	UKismetSystemLibrary_K2_GetTimerElapsedTimeHandle_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Handle = Handle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetSystemLibrary::K2_GetTimerElapsedTimeDelegate(const struct FScriptDelegate& Delegate) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.K2_GetTimerElapsedTimeDelegate");
	UKismetSystemLibrary_K2_GetTimerElapsedTimeDelegate_Params params;

	params.Delegate = Delegate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetSystemLibrary::K2_GetTimerElapsedTime(class UObject* Object, const class FString& FunctionName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.K2_GetTimerElapsedTime");
	UKismetSystemLibrary_K2_GetTimerElapsedTime_Params params;

	params.Object = Object;
	params.FunctionName = FunctionName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UKismetSystemLibrary::K2_ClearTimerHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.K2_ClearTimerHandle");
	UKismetSystemLibrary_K2_ClearTimerHandle_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Handle = Handle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::K2_ClearTimerDelegate(const struct FScriptDelegate& Delegate) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.K2_ClearTimerDelegate");
	UKismetSystemLibrary_K2_ClearTimerDelegate_Params params;

	params.Delegate = Delegate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::K2_ClearTimer(class UObject* Object, const class FString& FunctionName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.K2_ClearTimer");
	UKismetSystemLibrary_K2_ClearTimer_Params params;

	params.Object = Object;
	params.FunctionName = FunctionName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::K2_ClearAndInvalidateTimerHandle(class UObject* WorldContextObject, struct FTimerHandle* Handle) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.K2_ClearAndInvalidateTimerHandle");
	UKismetSystemLibrary_K2_ClearAndInvalidateTimerHandle_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Handle = *Handle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UKismetSystemLibrary::IsValidSoftObjectReference(TSoftObjectPtr<class UObject> SoftObjectReference) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.IsValidSoftObjectReference");
	UKismetSystemLibrary_IsValidSoftObjectReference_Params params;

	params.SoftObjectReference = SoftObjectReference;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::IsValidSoftClassReference(TSoftObjectPtr<class UClass> SoftClassReference) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.IsValidSoftClassReference");
	UKismetSystemLibrary_IsValidSoftClassReference_Params params;

	params.SoftClassReference = SoftClassReference;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::IsValidPrimaryAssetType(const struct FPrimaryAssetType& PrimaryAssetType) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.IsValidPrimaryAssetType");
	UKismetSystemLibrary_IsValidPrimaryAssetType_Params params;

	params.PrimaryAssetType = PrimaryAssetType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::IsValidPrimaryAssetId(const struct FPrimaryAssetId& PrimaryAssetId) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.IsValidPrimaryAssetId");
	UKismetSystemLibrary_IsValidPrimaryAssetId_Params params;

	params.PrimaryAssetId = PrimaryAssetId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::IsValidClass(class UClass* Class) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.IsValidClass");
	UKismetSystemLibrary_IsValidClass_Params params;

	params.Class = Class;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::IsValid(class UObject* Object) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.IsValid");
	UKismetSystemLibrary_IsValid_Params params;

	params.Object = Object;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::IsStandalone(class UObject* WorldContextObject) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.IsStandalone");
	UKismetSystemLibrary_IsStandalone_Params params;

	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::IsServer(class UObject* WorldContextObject) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.IsServer");
	UKismetSystemLibrary_IsServer_Params params;

	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::IsPackagedForDistribution() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.IsPackagedForDistribution");
	UKismetSystemLibrary_IsPackagedForDistribution_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::IsLoggedIn(class APlayerController* SpecificPlayer) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.IsLoggedIn");
	UKismetSystemLibrary_IsLoggedIn_Params params;

	params.SpecificPlayer = SpecificPlayer;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::IsInterstitialAdRequested() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.IsInterstitialAdRequested");
	UKismetSystemLibrary_IsInterstitialAdRequested_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::IsInterstitialAdAvailable() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.IsInterstitialAdAvailable");
	UKismetSystemLibrary_IsInterstitialAdAvailable_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::IsDedicatedServer(class UObject* WorldContextObject) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.IsDedicatedServer");
	UKismetSystemLibrary_IsDedicatedServer_Params params;

	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::IsControllerAssignedToGamepad(int ControllerId) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.IsControllerAssignedToGamepad");
	UKismetSystemLibrary_IsControllerAssignedToGamepad_Params params;

	params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UKismetSystemLibrary::HideAdBanner() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.HideAdBanner");
	UKismetSystemLibrary_HideAdBanner_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UKismetSystemLibrary::GetVolumeButtonsHandledBySystem() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.GetVolumeButtonsHandledBySystem");
	UKismetSystemLibrary_GetVolumeButtonsHandledBySystem_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetSystemLibrary::GetUniqueDeviceId() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.GetUniqueDeviceId");
	UKismetSystemLibrary_GetUniqueDeviceId_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::GetSupportedFullscreenResolutions(TArray<struct FIntPoint>* Resolutions) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.GetSupportedFullscreenResolutions");
	UKismetSystemLibrary_GetSupportedFullscreenResolutions_Params params;

	params.Resolutions = *Resolutions;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetSystemLibrary::GetRenderingMaterialQualityLevel() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.GetRenderingMaterialQualityLevel");
	UKismetSystemLibrary_GetRenderingMaterialQualityLevel_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetSystemLibrary::GetRenderingDetailMode() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.GetRenderingDetailMode");
	UKismetSystemLibrary_GetRenderingDetailMode_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetSystemLibrary::GetProjectSavedDirectory() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.GetProjectSavedDirectory");
	UKismetSystemLibrary_GetProjectSavedDirectory_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetSystemLibrary::GetProjectDirectory() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.GetProjectDirectory");
	UKismetSystemLibrary_GetProjectDirectory_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetSystemLibrary::GetProjectContentDirectory() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.GetProjectContentDirectory");
	UKismetSystemLibrary_GetProjectContentDirectory_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UKismetSystemLibrary::GetPrimaryAssetsWithBundleState(TArray<struct FName> RequiredBundles, TArray<struct FName> ExcludedBundles, TArray<struct FPrimaryAssetType> ValidTypes, bool bForceCurrentState, TArray<struct FPrimaryAssetId>* OutPrimaryAssetIdList) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.GetPrimaryAssetsWithBundleState");
	UKismetSystemLibrary_GetPrimaryAssetsWithBundleState_Params params;

	params.RequiredBundles = RequiredBundles;
	params.ExcludedBundles = ExcludedBundles;
	params.ValidTypes = ValidTypes;
	params.bForceCurrentState = bForceCurrentState;
	params.OutPrimaryAssetIdList = *OutPrimaryAssetIdList;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::GetPrimaryAssetIdList(const struct FPrimaryAssetType& PrimaryAssetType, TArray<struct FPrimaryAssetId>* OutPrimaryAssetIdList) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.GetPrimaryAssetIdList");
	UKismetSystemLibrary_GetPrimaryAssetIdList_Params params;

	params.PrimaryAssetType = PrimaryAssetType;
	params.OutPrimaryAssetIdList = *OutPrimaryAssetIdList;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

struct FPrimaryAssetId UKismetSystemLibrary::GetPrimaryAssetIdFromSoftObjectReference(TSoftObjectPtr<class UObject> SoftObjectReference) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.GetPrimaryAssetIdFromSoftObjectReference");
	UKismetSystemLibrary_GetPrimaryAssetIdFromSoftObjectReference_Params params;

	params.SoftObjectReference = SoftObjectReference;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FPrimaryAssetId UKismetSystemLibrary::GetPrimaryAssetIdFromSoftClassReference(TSoftObjectPtr<class UClass> SoftClassReference) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.GetPrimaryAssetIdFromSoftClassReference");
	UKismetSystemLibrary_GetPrimaryAssetIdFromSoftClassReference_Params params;

	params.SoftClassReference = SoftClassReference;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FPrimaryAssetId UKismetSystemLibrary::GetPrimaryAssetIdFromObject(class UObject* Object) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.GetPrimaryAssetIdFromObject");
	UKismetSystemLibrary_GetPrimaryAssetIdFromObject_Params params;

	params.Object = Object;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FPrimaryAssetId UKismetSystemLibrary::GetPrimaryAssetIdFromClass(class UClass* Class) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.GetPrimaryAssetIdFromClass");
	UKismetSystemLibrary_GetPrimaryAssetIdFromClass_Params params;

	params.Class = Class;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetSystemLibrary::GetPlatformUserName() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.GetPlatformUserName");
	UKismetSystemLibrary_GetPlatformUserName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetSystemLibrary::GetPathName(class UObject* Object) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.GetPathName");
	UKismetSystemLibrary_GetPathName_Params params;

	params.Object = Object;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetSystemLibrary::GetObjectName(class UObject* Object) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.GetObjectName");
	UKismetSystemLibrary_GetObjectName_Params params;

	params.Object = Object;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UObject* UKismetSystemLibrary::GetObjectFromPrimaryAssetId(const struct FPrimaryAssetId& PrimaryAssetId) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.GetObjectFromPrimaryAssetId");
	UKismetSystemLibrary_GetObjectFromPrimaryAssetId_Params params;

	params.PrimaryAssetId = PrimaryAssetId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetSystemLibrary::GetMinYResolutionForUI() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.GetMinYResolutionForUI");
	UKismetSystemLibrary_GetMinYResolutionForUI_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetSystemLibrary::GetMinYResolutionFor3DView() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.GetMinYResolutionFor3DView");
	UKismetSystemLibrary_GetMinYResolutionFor3DView_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetSystemLibrary::GetLocalCurrencySymbol() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.GetLocalCurrencySymbol");
	UKismetSystemLibrary_GetLocalCurrencySymbol_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetSystemLibrary::GetLocalCurrencyCode() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.GetLocalCurrencyCode");
	UKismetSystemLibrary_GetLocalCurrencyCode_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetSystemLibrary::GetGameTimeInSeconds(class UObject* WorldContextObject) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.GetGameTimeInSeconds");
	UKismetSystemLibrary_GetGameTimeInSeconds_Params params;

	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetSystemLibrary::GetGameName() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.GetGameName");
	UKismetSystemLibrary_GetGameName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetSystemLibrary::GetGameBundleId() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.GetGameBundleId");
	UKismetSystemLibrary_GetGameBundleId_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetSystemLibrary::GetEngineVersion() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.GetEngineVersion");
	UKismetSystemLibrary_GetEngineVersion_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetSystemLibrary::GetDisplayName(class UObject* Object) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.GetDisplayName");
	UKismetSystemLibrary_GetDisplayName_Params params;

	params.Object = Object;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetSystemLibrary::GetDeviceId() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.GetDeviceId");
	UKismetSystemLibrary_GetDeviceId_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetSystemLibrary::GetDefaultLocale() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.GetDefaultLocale");
	UKismetSystemLibrary_GetDefaultLocale_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetSystemLibrary::GetDefaultLanguage() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.GetDefaultLanguage");
	UKismetSystemLibrary_GetDefaultLanguage_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::GetCurrentBundleState(const struct FPrimaryAssetId& PrimaryAssetId, bool bForceCurrentState, TArray<struct FName>* OutBundles) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.GetCurrentBundleState");
	UKismetSystemLibrary_GetCurrentBundleState_Params params;

	params.PrimaryAssetId = PrimaryAssetId;
	params.bForceCurrentState = bForceCurrentState;
	params.OutBundles = *OutBundles;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::GetConvenientWindowedResolutions(TArray<struct FIntPoint>* Resolutions) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.GetConvenientWindowedResolutions");
	UKismetSystemLibrary_GetConvenientWindowedResolutions_Params params;

	params.Resolutions = *Resolutions;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetSystemLibrary::GetConsoleVariableIntValue(class UObject* WorldContextObject, const class FString& VariableName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.GetConsoleVariableIntValue");
	UKismetSystemLibrary_GetConsoleVariableIntValue_Params params;

	params.WorldContextObject = WorldContextObject;
	params.VariableName = VariableName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UKismetSystemLibrary::GetConsoleVariableFloatValue(class UObject* WorldContextObject, const class FString& VariableName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.GetConsoleVariableFloatValue");
	UKismetSystemLibrary_GetConsoleVariableFloatValue_Params params;

	params.WorldContextObject = WorldContextObject;
	params.VariableName = VariableName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UKismetSystemLibrary::GetComponentBounds(class USceneComponent* Component, struct FVector* Origin, struct FVector* BoxExtent, float* SphereRadius) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.GetComponentBounds");
	UKismetSystemLibrary_GetComponentBounds_Params params;

	params.Component = Component;
	params.Origin = *Origin;
	params.BoxExtent = *BoxExtent;
	params.SphereRadius = *SphereRadius;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

class FString UKismetSystemLibrary::GetCommandLine() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.GetCommandLine");
	UKismetSystemLibrary_GetCommandLine_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UClass* UKismetSystemLibrary::GetClassFromPrimaryAssetId(const struct FPrimaryAssetId& PrimaryAssetId) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.GetClassFromPrimaryAssetId");
	UKismetSystemLibrary_GetClassFromPrimaryAssetId_Params params;

	params.PrimaryAssetId = PrimaryAssetId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetSystemLibrary::GetClassDisplayName(class UClass* Class) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.GetClassDisplayName");
	UKismetSystemLibrary_GetClassDisplayName_Params params;

	params.Class = Class;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UKismetSystemLibrary::GetAdIDCount() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.GetAdIDCount");
	UKismetSystemLibrary_GetAdIDCount_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UKismetSystemLibrary::GetActorListFromComponentList(TArray<class UPrimitiveComponent*> ComponentList, class UClass* ActorClassFilter, TArray<class AActor*>* OutActorList) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.GetActorListFromComponentList");
	UKismetSystemLibrary_GetActorListFromComponentList_Params params;

	params.ComponentList = ComponentList;
	params.ActorClassFilter = ActorClassFilter;
	params.OutActorList = *OutActorList;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::GetActorBounds(class AActor* Actor, struct FVector* Origin, struct FVector* BoxExtent) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.GetActorBounds");
	UKismetSystemLibrary_GetActorBounds_Params params;

	params.Actor = Actor;
	params.Origin = *Origin;
	params.BoxExtent = *BoxExtent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::ForceCloseAdBanner() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.ForceCloseAdBanner");
	UKismetSystemLibrary_ForceCloseAdBanner_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::FlushPersistentDebugLines(class UObject* WorldContextObject) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.FlushPersistentDebugLines");
	UKismetSystemLibrary_FlushPersistentDebugLines_Params params;

	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::FlushDebugStrings(class UObject* WorldContextObject) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.FlushDebugStrings");
	UKismetSystemLibrary_FlushDebugStrings_Params params;

	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::ExecuteConsoleCommand(class UObject* WorldContextObject, const class FString& Command, class APlayerController* SpecificPlayer) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.ExecuteConsoleCommand");
	UKismetSystemLibrary_ExecuteConsoleCommand_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Command = Command;
	params.SpecificPlayer = SpecificPlayer;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UKismetSystemLibrary::EqualEqual_SoftObjectReference(TSoftObjectPtr<class UObject> A, TSoftObjectPtr<class UObject> B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.EqualEqual_SoftObjectReference");
	UKismetSystemLibrary_EqualEqual_SoftObjectReference_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::EqualEqual_SoftClassReference(TSoftObjectPtr<class UClass> A, TSoftObjectPtr<class UClass> B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.EqualEqual_SoftClassReference");
	UKismetSystemLibrary_EqualEqual_SoftClassReference_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::EqualEqual_PrimaryAssetType(const struct FPrimaryAssetType& A, const struct FPrimaryAssetType& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.EqualEqual_PrimaryAssetType");
	UKismetSystemLibrary_EqualEqual_PrimaryAssetType_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::EqualEqual_PrimaryAssetId(const struct FPrimaryAssetId& A, const struct FPrimaryAssetId& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.EqualEqual_PrimaryAssetId");
	UKismetSystemLibrary_EqualEqual_PrimaryAssetId_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UKismetSystemLibrary::DrawDebugString(class UObject* WorldContextObject, const struct FVector& TextLocation, const class FString& Text, class AActor* TestBaseActor, const struct FLinearColor& TextColor, float Duration) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.DrawDebugString");
	UKismetSystemLibrary_DrawDebugString_Params params;

	params.WorldContextObject = WorldContextObject;
	params.TextLocation = TextLocation;
	params.Text = Text;
	params.TestBaseActor = TestBaseActor;
	params.TextColor = TextColor;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::DrawDebugSphere(class UObject* WorldContextObject, const struct FVector& Center, float Radius, int Segments, const struct FLinearColor& LineColor, float Duration, float Thickness) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.DrawDebugSphere");
	UKismetSystemLibrary_DrawDebugSphere_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Center = Center;
	params.Radius = Radius;
	params.Segments = Segments;
	params.LineColor = LineColor;
	params.Duration = Duration;
	params.Thickness = Thickness;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::DrawDebugPoint(class UObject* WorldContextObject, const struct FVector& Position, float Size, const struct FLinearColor& PointColor, float Duration) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.DrawDebugPoint");
	UKismetSystemLibrary_DrawDebugPoint_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Position = Position;
	params.Size = Size;
	params.PointColor = PointColor;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::DrawDebugPlane(class UObject* WorldContextObject, const struct FPlane& PlaneCoordinates, const struct FVector& Location, float Size, const struct FLinearColor& PlaneColor, float Duration) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.DrawDebugPlane");
	UKismetSystemLibrary_DrawDebugPlane_Params params;

	params.WorldContextObject = WorldContextObject;
	params.PlaneCoordinates = PlaneCoordinates;
	params.Location = Location;
	params.Size = Size;
	params.PlaneColor = PlaneColor;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::DrawDebugLine(class UObject* WorldContextObject, const struct FVector& LineStart, const struct FVector& LineEnd, const struct FLinearColor& LineColor, float Duration, float Thickness) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.DrawDebugLine");
	UKismetSystemLibrary_DrawDebugLine_Params params;

	params.WorldContextObject = WorldContextObject;
	params.LineStart = LineStart;
	params.LineEnd = LineEnd;
	params.LineColor = LineColor;
	params.Duration = Duration;
	params.Thickness = Thickness;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::DrawDebugFrustum(class UObject* WorldContextObject, const struct FTransform& FrustumTransform, const struct FLinearColor& FrustumColor, float Duration, float Thickness) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.DrawDebugFrustum");
	UKismetSystemLibrary_DrawDebugFrustum_Params params;

	params.WorldContextObject = WorldContextObject;
	params.FrustumTransform = FrustumTransform;
	params.FrustumColor = FrustumColor;
	params.Duration = Duration;
	params.Thickness = Thickness;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::DrawDebugFloatHistoryTransform(class UObject* WorldContextObject, const struct FDebugFloatHistory& FloatHistory, const struct FTransform& DrawTransform, const struct FVector2D& DrawSize, const struct FLinearColor& DrawColor, float Duration) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.DrawDebugFloatHistoryTransform");
	UKismetSystemLibrary_DrawDebugFloatHistoryTransform_Params params;

	params.WorldContextObject = WorldContextObject;
	params.FloatHistory = FloatHistory;
	params.DrawTransform = DrawTransform;
	params.DrawSize = DrawSize;
	params.DrawColor = DrawColor;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::DrawDebugFloatHistoryLocation(class UObject* WorldContextObject, const struct FDebugFloatHistory& FloatHistory, const struct FVector& DrawLocation, const struct FVector2D& DrawSize, const struct FLinearColor& DrawColor, float Duration) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.DrawDebugFloatHistoryLocation");
	UKismetSystemLibrary_DrawDebugFloatHistoryLocation_Params params;

	params.WorldContextObject = WorldContextObject;
	params.FloatHistory = FloatHistory;
	params.DrawLocation = DrawLocation;
	params.DrawSize = DrawSize;
	params.DrawColor = DrawColor;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::DrawDebugCylinder(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, int Segments, const struct FLinearColor& LineColor, float Duration, float Thickness) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.DrawDebugCylinder");
	UKismetSystemLibrary_DrawDebugCylinder_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.Segments = Segments;
	params.LineColor = LineColor;
	params.Duration = Duration;
	params.Thickness = Thickness;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::DrawDebugCoordinateSystem(class UObject* WorldContextObject, const struct FVector& AxisLoc, const struct FRotator& AxisRot, float Scale, float Duration, float Thickness) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.DrawDebugCoordinateSystem");
	UKismetSystemLibrary_DrawDebugCoordinateSystem_Params params;

	params.WorldContextObject = WorldContextObject;
	params.AxisLoc = AxisLoc;
	params.AxisRot = AxisRot;
	params.Scale = Scale;
	params.Duration = Duration;
	params.Thickness = Thickness;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::DrawDebugConeInDegrees(class UObject* WorldContextObject, const struct FVector& Origin, const struct FVector& Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, const struct FLinearColor& LineColor, float Duration, float Thickness) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.DrawDebugConeInDegrees");
	UKismetSystemLibrary_DrawDebugConeInDegrees_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Origin = Origin;
	params.Direction = Direction;
	params.Length = Length;
	params.AngleWidth = AngleWidth;
	params.AngleHeight = AngleHeight;
	params.NumSides = NumSides;
	params.LineColor = LineColor;
	params.Duration = Duration;
	params.Thickness = Thickness;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::DrawDebugCone(class UObject* WorldContextObject, const struct FVector& Origin, const struct FVector& Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, const struct FLinearColor& LineColor, float Duration, float Thickness) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.DrawDebugCone");
	UKismetSystemLibrary_DrawDebugCone_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Origin = Origin;
	params.Direction = Direction;
	params.Length = Length;
	params.AngleWidth = AngleWidth;
	params.AngleHeight = AngleHeight;
	params.NumSides = NumSides;
	params.LineColor = LineColor;
	params.Duration = Duration;
	params.Thickness = Thickness;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::DrawDebugCircle(class UObject* WorldContextObject, const struct FVector& Center, float Radius, int NumSegments, const struct FLinearColor& LineColor, float Duration, float Thickness, const struct FVector& YAxis, const struct FVector& ZAxis, bool bDrawAxis) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.DrawDebugCircle");
	UKismetSystemLibrary_DrawDebugCircle_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Center = Center;
	params.Radius = Radius;
	params.NumSegments = NumSegments;
	params.LineColor = LineColor;
	params.Duration = Duration;
	params.Thickness = Thickness;
	params.YAxis = YAxis;
	params.ZAxis = ZAxis;
	params.bDrawAxis = bDrawAxis;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::DrawDebugCapsule(class UObject* WorldContextObject, const struct FVector& Center, float HalfHeight, float Radius, const struct FRotator& Rotation, const struct FLinearColor& LineColor, float Duration, float Thickness) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.DrawDebugCapsule");
	UKismetSystemLibrary_DrawDebugCapsule_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Center = Center;
	params.HalfHeight = HalfHeight;
	params.Radius = Radius;
	params.Rotation = Rotation;
	params.LineColor = LineColor;
	params.Duration = Duration;
	params.Thickness = Thickness;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::DrawDebugCamera(class ACameraActor* CameraActor, const struct FLinearColor& CameraColor, float Duration) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.DrawDebugCamera");
	UKismetSystemLibrary_DrawDebugCamera_Params params;

	params.CameraActor = CameraActor;
	params.CameraColor = CameraColor;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::DrawDebugBox(class UObject* WorldContextObject, const struct FVector& Center, const struct FVector& Extent, const struct FLinearColor& LineColor, const struct FRotator& Rotation, float Duration, float Thickness) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.DrawDebugBox");
	UKismetSystemLibrary_DrawDebugBox_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Center = Center;
	params.Extent = Extent;
	params.LineColor = LineColor;
	params.Rotation = Rotation;
	params.Duration = Duration;
	params.Thickness = Thickness;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::DrawDebugArrow(class UObject* WorldContextObject, const struct FVector& LineStart, const struct FVector& LineEnd, float ArrowSize, const struct FLinearColor& LineColor, float Duration, float Thickness) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.DrawDebugArrow");
	UKismetSystemLibrary_DrawDebugArrow_Params params;

	params.WorldContextObject = WorldContextObject;
	params.LineStart = LineStart;
	params.LineEnd = LineEnd;
	params.ArrowSize = ArrowSize;
	params.LineColor = LineColor;
	params.Duration = Duration;
	params.Thickness = Thickness;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UKismetSystemLibrary::DoesImplementInterface(class UObject* TestObject, class UClass* Interface) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.DoesImplementInterface");
	UKismetSystemLibrary_DoesImplementInterface_Params params;

	params.TestObject = TestObject;
	params.Interface = Interface;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UKismetSystemLibrary::Delay(class UObject* WorldContextObject, float Duration, const struct FLatentActionInfo& LatentInfo) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.Delay");
	UKismetSystemLibrary_Delay_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Duration = Duration;
	params.LatentInfo = LatentInfo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::CreateCopyForUndoBuffer(class UObject* ObjectToModify) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.CreateCopyForUndoBuffer");
	UKismetSystemLibrary_CreateCopyForUndoBuffer_Params params;

	params.ObjectToModify = ObjectToModify;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

class FString UKismetSystemLibrary::Conv_SoftObjectReferenceToString(TSoftObjectPtr<class UObject> SoftObjectReference) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.Conv_SoftObjectReferenceToString");
	UKismetSystemLibrary_Conv_SoftObjectReferenceToString_Params params;

	params.SoftObjectReference = SoftObjectReference;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UObject* UKismetSystemLibrary::Conv_SoftObjectReferenceToObject(TSoftObjectPtr<class UObject> SoftObject) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.Conv_SoftObjectReferenceToObject");
	UKismetSystemLibrary_Conv_SoftObjectReferenceToObject_Params params;

	params.SoftObject = SoftObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetSystemLibrary::Conv_SoftClassReferenceToString(TSoftObjectPtr<class UClass> SoftClassReference) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.Conv_SoftClassReferenceToString");
	UKismetSystemLibrary_Conv_SoftClassReferenceToString_Params params;

	params.SoftClassReference = SoftClassReference;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UClass* UKismetSystemLibrary::Conv_SoftClassReferenceToClass(TSoftObjectPtr<class UClass> SoftClass) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.Conv_SoftClassReferenceToClass");
	UKismetSystemLibrary_Conv_SoftClassReferenceToClass_Params params;

	params.SoftClass = SoftClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetSystemLibrary::Conv_PrimaryAssetTypeToString(const struct FPrimaryAssetType& PrimaryAssetType) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.Conv_PrimaryAssetTypeToString");
	UKismetSystemLibrary_Conv_PrimaryAssetTypeToString_Params params;

	params.PrimaryAssetType = PrimaryAssetType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetSystemLibrary::Conv_PrimaryAssetIdToString(const struct FPrimaryAssetId& PrimaryAssetId) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.Conv_PrimaryAssetIdToString");
	UKismetSystemLibrary_Conv_PrimaryAssetIdToString_Params params;

	params.PrimaryAssetId = PrimaryAssetId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UObject* UKismetSystemLibrary::Conv_InterfaceToObject(const TScriptInterface<class UInterface>& Interface) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.Conv_InterfaceToObject");
	UKismetSystemLibrary_Conv_InterfaceToObject_Params params;

	params.Interface = Interface;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UKismetSystemLibrary::ControlScreensaver(bool bAllowScreenSaver) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.ControlScreensaver");
	UKismetSystemLibrary_ControlScreensaver_Params params;

	params.bAllowScreenSaver = bAllowScreenSaver;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UKismetSystemLibrary::ComponentOverlapComponents(class UPrimitiveComponent* Component, const struct FTransform& ComponentTransform, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.ComponentOverlapComponents");
	UKismetSystemLibrary_ComponentOverlapComponents_Params params;

	params.Component = Component;
	params.ComponentTransform = ComponentTransform;
	params.ObjectTypes = ObjectTypes;
	params.ComponentClassFilter = ComponentClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;
	params.OutComponents = *OutComponents;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::ComponentOverlapActors(class UPrimitiveComponent* Component, const struct FTransform& ComponentTransform, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.ComponentOverlapActors");
	UKismetSystemLibrary_ComponentOverlapActors_Params params;

	params.Component = Component;
	params.ComponentTransform = ComponentTransform;
	params.ObjectTypes = ObjectTypes;
	params.ActorClassFilter = ActorClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;
	params.OutActors = *OutActors;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UKismetSystemLibrary::CollectGarbage() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.CollectGarbage");
	UKismetSystemLibrary_CollectGarbage_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UKismetSystemLibrary::CapsuleTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FHitResult* OutHit) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.CapsuleTraceSingleForObjects");
	UKismetSystemLibrary_CapsuleTraceSingleForObjects_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.ObjectTypes = ObjectTypes;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;
	params.TraceColor = TraceColor;
	params.TraceHitColor = TraceHitColor;
	params.DrawTime = DrawTime;
	params.OutHit = *OutHit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::CapsuleTraceSingleByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, const struct FName& ProfileName, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FHitResult* OutHit) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.CapsuleTraceSingleByProfile");
	UKismetSystemLibrary_CapsuleTraceSingleByProfile_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.ProfileName = ProfileName;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;
	params.TraceColor = TraceColor;
	params.TraceHitColor = TraceHitColor;
	params.DrawTime = DrawTime;
	params.OutHit = *OutHit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::CapsuleTraceSingle(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FHitResult* OutHit) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.CapsuleTraceSingle");
	UKismetSystemLibrary_CapsuleTraceSingle_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;
	params.TraceColor = TraceColor;
	params.TraceHitColor = TraceHitColor;
	params.DrawTime = DrawTime;
	params.OutHit = *OutHit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::CapsuleTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, TArray<struct FHitResult>* OutHits) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.CapsuleTraceMultiForObjects");
	UKismetSystemLibrary_CapsuleTraceMultiForObjects_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.ObjectTypes = ObjectTypes;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;
	params.TraceColor = TraceColor;
	params.TraceHitColor = TraceHitColor;
	params.DrawTime = DrawTime;
	params.OutHits = *OutHits;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::CapsuleTraceMultiByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, const struct FName& ProfileName, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, TArray<struct FHitResult>* OutHits) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.CapsuleTraceMultiByProfile");
	UKismetSystemLibrary_CapsuleTraceMultiByProfile_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.ProfileName = ProfileName;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;
	params.TraceColor = TraceColor;
	params.TraceHitColor = TraceHitColor;
	params.DrawTime = DrawTime;
	params.OutHits = *OutHits;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::CapsuleTraceMulti(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, TArray<struct FHitResult>* OutHits) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.CapsuleTraceMulti");
	UKismetSystemLibrary_CapsuleTraceMulti_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;
	params.TraceColor = TraceColor;
	params.TraceHitColor = TraceHitColor;
	params.DrawTime = DrawTime;
	params.OutHits = *OutHits;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::CapsuleOverlapComponents(class UObject* WorldContextObject, const struct FVector& CapsulePos, float Radius, float HalfHeight, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.CapsuleOverlapComponents");
	UKismetSystemLibrary_CapsuleOverlapComponents_Params params;

	params.WorldContextObject = WorldContextObject;
	params.CapsulePos = CapsulePos;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.ObjectTypes = ObjectTypes;
	params.ComponentClassFilter = ComponentClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;
	params.OutComponents = *OutComponents;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::CapsuleOverlapActors(class UObject* WorldContextObject, const struct FVector& CapsulePos, float Radius, float HalfHeight, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.CapsuleOverlapActors");
	UKismetSystemLibrary_CapsuleOverlapActors_Params params;

	params.WorldContextObject = WorldContextObject;
	params.CapsulePos = CapsulePos;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.ObjectTypes = ObjectTypes;
	params.ActorClassFilter = ActorClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;
	params.OutActors = *OutActors;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::CanLaunchURL(const class FString& URL) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.CanLaunchURL");
	UKismetSystemLibrary_CanLaunchURL_Params params;

	params.URL = URL;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UKismetSystemLibrary::BreakSoftObjectPath(const struct FSoftObjectPath& InSoftObjectPath, class FString* PathString) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.BreakSoftObjectPath");
	UKismetSystemLibrary_BreakSoftObjectPath_Params params;

	params.InSoftObjectPath = InSoftObjectPath;
	params.PathString = *PathString;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UKismetSystemLibrary::BreakSoftClassPath(const struct FSoftClassPath& InSoftClassPath, class FString* PathString) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.BreakSoftClassPath");
	UKismetSystemLibrary_BreakSoftClassPath_Params params;

	params.InSoftClassPath = InSoftClassPath;
	params.PathString = *PathString;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UKismetSystemLibrary::BoxTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FHitResult* OutHit) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.BoxTraceSingleForObjects");
	UKismetSystemLibrary_BoxTraceSingleForObjects_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.HalfSize = HalfSize;
	params.Orientation = Orientation;
	params.ObjectTypes = ObjectTypes;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;
	params.TraceColor = TraceColor;
	params.TraceHitColor = TraceHitColor;
	params.DrawTime = DrawTime;
	params.OutHit = *OutHit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::BoxTraceSingleByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, const struct FName& ProfileName, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FHitResult* OutHit) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.BoxTraceSingleByProfile");
	UKismetSystemLibrary_BoxTraceSingleByProfile_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.HalfSize = HalfSize;
	params.Orientation = Orientation;
	params.ProfileName = ProfileName;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;
	params.TraceColor = TraceColor;
	params.TraceHitColor = TraceHitColor;
	params.DrawTime = DrawTime;
	params.OutHit = *OutHit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::BoxTraceSingle(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FHitResult* OutHit) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.BoxTraceSingle");
	UKismetSystemLibrary_BoxTraceSingle_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.HalfSize = HalfSize;
	params.Orientation = Orientation;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;
	params.TraceColor = TraceColor;
	params.TraceHitColor = TraceHitColor;
	params.DrawTime = DrawTime;
	params.OutHit = *OutHit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::BoxTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, TArray<struct FHitResult>* OutHits) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.BoxTraceMultiForObjects");
	UKismetSystemLibrary_BoxTraceMultiForObjects_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.HalfSize = HalfSize;
	params.Orientation = Orientation;
	params.ObjectTypes = ObjectTypes;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;
	params.TraceColor = TraceColor;
	params.TraceHitColor = TraceHitColor;
	params.DrawTime = DrawTime;
	params.OutHits = *OutHits;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::BoxTraceMultiByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, const struct FName& ProfileName, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, TArray<struct FHitResult>* OutHits) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.BoxTraceMultiByProfile");
	UKismetSystemLibrary_BoxTraceMultiByProfile_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.HalfSize = HalfSize;
	params.Orientation = Orientation;
	params.ProfileName = ProfileName;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;
	params.TraceColor = TraceColor;
	params.TraceHitColor = TraceHitColor;
	params.DrawTime = DrawTime;
	params.OutHits = *OutHits;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::BoxTraceMulti(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, TArray<struct FHitResult>* OutHits) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.BoxTraceMulti");
	UKismetSystemLibrary_BoxTraceMulti_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.HalfSize = HalfSize;
	params.Orientation = Orientation;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;
	params.TraceColor = TraceColor;
	params.TraceHitColor = TraceHitColor;
	params.DrawTime = DrawTime;
	params.OutHits = *OutHits;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::BoxOverlapComponents(class UObject* WorldContextObject, const struct FVector& BoxPos, const struct FVector& Extent, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.BoxOverlapComponents");
	UKismetSystemLibrary_BoxOverlapComponents_Params params;

	params.WorldContextObject = WorldContextObject;
	params.BoxPos = BoxPos;
	params.Extent = Extent;
	params.ObjectTypes = ObjectTypes;
	params.ComponentClassFilter = ComponentClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;
	params.OutComponents = *OutComponents;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetSystemLibrary::BoxOverlapActors(class UObject* WorldContextObject, const struct FVector& BoxPos, const struct FVector& BoxExtent, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.BoxOverlapActors");
	UKismetSystemLibrary_BoxOverlapActors_Params params;

	params.WorldContextObject = WorldContextObject;
	params.BoxPos = BoxPos;
	params.BoxExtent = BoxExtent;
	params.ObjectTypes = ObjectTypes;
	params.ActorClassFilter = ActorClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;
	params.OutActors = *OutActors;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FDebugFloatHistory UKismetSystemLibrary::AddFloatHistorySample(float Value, const struct FDebugFloatHistory& FloatHistory) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetSystemLibrary.AddFloatHistorySample");
	UKismetSystemLibrary_AddFloatHistorySample_Params params;

	params.Value = Value;
	params.FloatHistory = FloatHistory;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FText UKismetTextLibrary::TextTrimTrailing(const struct FText& InText) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetTextLibrary.TextTrimTrailing");
	UKismetTextLibrary_TextTrimTrailing_Params params;

	params.InText = InText;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FText UKismetTextLibrary::TextTrimPrecedingAndTrailing(const struct FText& InText) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetTextLibrary.TextTrimPrecedingAndTrailing");
	UKismetTextLibrary_TextTrimPrecedingAndTrailing_Params params;

	params.InText = InText;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FText UKismetTextLibrary::TextTrimPreceding(const struct FText& InText) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetTextLibrary.TextTrimPreceding");
	UKismetTextLibrary_TextTrimPreceding_Params params;

	params.InText = InText;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FText UKismetTextLibrary::TextToUpper(const struct FText& InText) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetTextLibrary.TextToUpper");
	UKismetTextLibrary_TextToUpper_Params params;

	params.InText = InText;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FText UKismetTextLibrary::TextToLower(const struct FText& InText) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetTextLibrary.TextToLower");
	UKismetTextLibrary_TextToLower_Params params;

	params.InText = InText;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetTextLibrary::TextIsTransient(const struct FText& InText) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetTextLibrary.TextIsTransient");
	UKismetTextLibrary_TextIsTransient_Params params;

	params.InText = InText;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetTextLibrary::TextIsFromStringTable(const struct FText& Text) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetTextLibrary.TextIsFromStringTable");
	UKismetTextLibrary_TextIsFromStringTable_Params params;

	params.Text = Text;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetTextLibrary::TextIsEmpty(const struct FText& InText) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetTextLibrary.TextIsEmpty");
	UKismetTextLibrary_TextIsEmpty_Params params;

	params.InText = InText;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetTextLibrary::TextIsCultureInvariant(const struct FText& InText) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetTextLibrary.TextIsCultureInvariant");
	UKismetTextLibrary_TextIsCultureInvariant_Params params;

	params.InText = InText;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FText UKismetTextLibrary::TextFromStringTable(const struct FName& TableId, const class FString& Key) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetTextLibrary.TextFromStringTable");
	UKismetTextLibrary_TextFromStringTable_Params params;

	params.TableId = TableId;
	params.Key = Key;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetTextLibrary::StringTableIdAndKeyFromText(const struct FText& Text, struct FName* OutTableId, class FString* OutKey) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetTextLibrary.StringTableIdAndKeyFromText");
	UKismetTextLibrary_StringTableIdAndKeyFromText_Params params;

	params.Text = Text;
	params.OutTableId = *OutTableId;
	params.OutKey = *OutKey;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FText UKismetTextLibrary::PolyglotDataToText(const struct FPolyglotTextData& PolyglotData) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetTextLibrary.PolyglotDataToText");
	UKismetTextLibrary_PolyglotDataToText_Params params;

	params.PolyglotData = PolyglotData;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetTextLibrary::NotEqual_TextText(const struct FText& A, const struct FText& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetTextLibrary.NotEqual_TextText");
	UKismetTextLibrary_NotEqual_TextText_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetTextLibrary::NotEqual_IgnoreCase_TextText(const struct FText& A, const struct FText& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetTextLibrary.NotEqual_IgnoreCase_TextText");
	UKismetTextLibrary_NotEqual_IgnoreCase_TextText_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UKismetTextLibrary::IsPolyglotDataValid(const struct FPolyglotTextData& PolyglotData, bool* IsValid, struct FText* ErrorMessage) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetTextLibrary.IsPolyglotDataValid");
	UKismetTextLibrary_IsPolyglotDataValid_Params params;

	params.PolyglotData = PolyglotData;
	params.IsValid = IsValid;
	params.ErrorMessage = *ErrorMessage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

struct FText UKismetTextLibrary::GetEmptyText() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetTextLibrary.GetEmptyText");
	UKismetTextLibrary_GetEmptyText_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FText UKismetTextLibrary::Format(const struct FText& InPattern, TArray<struct FFormatArgumentData> InArgs) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetTextLibrary.Format");
	UKismetTextLibrary_Format_Params params;

	params.InPattern = InPattern;
	params.InArgs = InArgs;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetTextLibrary::FindTextInLocalizationTable(const class FString& Namespace, const class FString& Key, struct FText* OutText) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetTextLibrary.FindTextInLocalizationTable");
	UKismetTextLibrary_FindTextInLocalizationTable_Params params;

	params.Namespace = Namespace;
	params.Key = Key;
	params.OutText = *OutText;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetTextLibrary::EqualEqual_TextText(const struct FText& A, const struct FText& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetTextLibrary.EqualEqual_TextText");
	UKismetTextLibrary_EqualEqual_TextText_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UKismetTextLibrary::EqualEqual_IgnoreCase_TextText(const struct FText& A, const struct FText& B) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetTextLibrary.EqualEqual_IgnoreCase_TextText");
	UKismetTextLibrary_EqualEqual_IgnoreCase_TextText_Params params;

	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FText UKismetTextLibrary::Conv_VectorToText(const struct FVector& InVec) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetTextLibrary.Conv_VectorToText");
	UKismetTextLibrary_Conv_VectorToText_Params params;

	params.InVec = InVec;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FText UKismetTextLibrary::Conv_Vector2dToText(const struct FVector2D& InVec) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetTextLibrary.Conv_Vector2dToText");
	UKismetTextLibrary_Conv_Vector2dToText_Params params;

	params.InVec = InVec;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FText UKismetTextLibrary::Conv_TransformToText(const struct FTransform& InTrans) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetTextLibrary.Conv_TransformToText");
	UKismetTextLibrary_Conv_TransformToText_Params params;

	params.InTrans = InTrans;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UKismetTextLibrary::Conv_TextToString(const struct FText& InText) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetTextLibrary.Conv_TextToString");
	UKismetTextLibrary_Conv_TextToString_Params params;

	params.InText = InText;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FText UKismetTextLibrary::Conv_StringToText(const class FString& inString) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetTextLibrary.Conv_StringToText");
	UKismetTextLibrary_Conv_StringToText_Params params;

	params.inString = inString;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FText UKismetTextLibrary::Conv_RotatorToText(const struct FRotator& InRot) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetTextLibrary.Conv_RotatorToText");
	UKismetTextLibrary_Conv_RotatorToText_Params params;

	params.InRot = InRot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FText UKismetTextLibrary::Conv_ObjectToText(class UObject* InObj) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetTextLibrary.Conv_ObjectToText");
	UKismetTextLibrary_Conv_ObjectToText_Params params;

	params.InObj = InObj;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FText UKismetTextLibrary::Conv_NameToText(const struct FName& InName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetTextLibrary.Conv_NameToText");
	UKismetTextLibrary_Conv_NameToText_Params params;

	params.InName = InName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FText UKismetTextLibrary::Conv_IntToText(int Value, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetTextLibrary.Conv_IntToText");
	UKismetTextLibrary_Conv_IntToText_Params params;

	params.Value = Value;
	params.bAlwaysSign = bAlwaysSign;
	params.bUseGrouping = bUseGrouping;
	params.MinimumIntegralDigits = MinimumIntegralDigits;
	params.MaximumIntegralDigits = MaximumIntegralDigits;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FText UKismetTextLibrary::Conv_FloatToText(float Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetTextLibrary.Conv_FloatToText");
	UKismetTextLibrary_Conv_FloatToText_Params params;

	params.Value = Value;
	params.RoundingMode = RoundingMode;
	params.bAlwaysSign = bAlwaysSign;
	params.bUseGrouping = bUseGrouping;
	params.MinimumIntegralDigits = MinimumIntegralDigits;
	params.MaximumIntegralDigits = MaximumIntegralDigits;
	params.MinimumFractionalDigits = MinimumFractionalDigits;
	params.MaximumFractionalDigits = MaximumFractionalDigits;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FText UKismetTextLibrary::Conv_ColorToText(const struct FLinearColor& InColor) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetTextLibrary.Conv_ColorToText");
	UKismetTextLibrary_Conv_ColorToText_Params params;

	params.InColor = InColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FText UKismetTextLibrary::Conv_ByteToText(unsigned char Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetTextLibrary.Conv_ByteToText");
	UKismetTextLibrary_Conv_ByteToText_Params params;

	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FText UKismetTextLibrary::Conv_BoolToText(bool InBool) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetTextLibrary.Conv_BoolToText");
	UKismetTextLibrary_Conv_BoolToText_Params params;

	params.InBool = InBool;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FText UKismetTextLibrary::AsTimeZoneTime_DateTime(const struct FDateTime& InDateTime, const class FString& InTimeZone) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetTextLibrary.AsTimeZoneTime_DateTime");
	UKismetTextLibrary_AsTimeZoneTime_DateTime_Params params;

	params.InDateTime = InDateTime;
	params.InTimeZone = InTimeZone;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FText UKismetTextLibrary::AsTimeZoneDateTime_DateTime(const struct FDateTime& InDateTime, const class FString& InTimeZone) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetTextLibrary.AsTimeZoneDateTime_DateTime");
	UKismetTextLibrary_AsTimeZoneDateTime_DateTime_Params params;

	params.InDateTime = InDateTime;
	params.InTimeZone = InTimeZone;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FText UKismetTextLibrary::AsTimeZoneDate_DateTime(const struct FDateTime& InDateTime, const class FString& InTimeZone) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetTextLibrary.AsTimeZoneDate_DateTime");
	UKismetTextLibrary_AsTimeZoneDate_DateTime_Params params;

	params.InDateTime = InDateTime;
	params.InTimeZone = InTimeZone;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FText UKismetTextLibrary::AsTimespan_Timespan(const struct FTimespan& InTimespan) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetTextLibrary.AsTimespan_Timespan");
	UKismetTextLibrary_AsTimespan_Timespan_Params params;

	params.InTimespan = InTimespan;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FText UKismetTextLibrary::AsTime_DateTime(const struct FDateTime& In) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetTextLibrary.AsTime_DateTime");
	UKismetTextLibrary_AsTime_DateTime_Params params;

	params.In = In;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FText UKismetTextLibrary::AsPercent_Float(float Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetTextLibrary.AsPercent_Float");
	UKismetTextLibrary_AsPercent_Float_Params params;

	params.Value = Value;
	params.RoundingMode = RoundingMode;
	params.bAlwaysSign = bAlwaysSign;
	params.bUseGrouping = bUseGrouping;
	params.MinimumIntegralDigits = MinimumIntegralDigits;
	params.MaximumIntegralDigits = MaximumIntegralDigits;
	params.MinimumFractionalDigits = MinimumFractionalDigits;
	params.MaximumFractionalDigits = MaximumFractionalDigits;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FText UKismetTextLibrary::AsDateTime_DateTime(const struct FDateTime& In) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetTextLibrary.AsDateTime_DateTime");
	UKismetTextLibrary_AsDateTime_DateTime_Params params;

	params.In = In;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FText UKismetTextLibrary::AsDate_DateTime(const struct FDateTime& InDateTime) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetTextLibrary.AsDate_DateTime");
	UKismetTextLibrary_AsDate_DateTime_Params params;

	params.InDateTime = InDateTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FText UKismetTextLibrary::AsCurrencyBase(int BaseValue, const class FString& CurrencyCode) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetTextLibrary.AsCurrencyBase");
	UKismetTextLibrary_AsCurrencyBase_Params params;

	params.BaseValue = BaseValue;
	params.CurrencyCode = CurrencyCode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FText UKismetTextLibrary::AsCurrency_Integer(int Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, const class FString& CurrencyCode) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetTextLibrary.AsCurrency_Integer");
	UKismetTextLibrary_AsCurrency_Integer_Params params;

	params.Value = Value;
	params.RoundingMode = RoundingMode;
	params.bAlwaysSign = bAlwaysSign;
	params.bUseGrouping = bUseGrouping;
	params.MinimumIntegralDigits = MinimumIntegralDigits;
	params.MaximumIntegralDigits = MaximumIntegralDigits;
	params.MinimumFractionalDigits = MinimumFractionalDigits;
	params.MaximumFractionalDigits = MaximumFractionalDigits;
	params.CurrencyCode = CurrencyCode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FText UKismetTextLibrary::AsCurrency_Float(float Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, const class FString& CurrencyCode) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.KismetTextLibrary.AsCurrency_Float");
	UKismetTextLibrary_AsCurrency_Float_Params params;

	params.Value = Value;
	params.RoundingMode = RoundingMode;
	params.bAlwaysSign = bAlwaysSign;
	params.bUseGrouping = bUseGrouping;
	params.MinimumIntegralDigits = MinimumIntegralDigits;
	params.MaximumIntegralDigits = MaximumIntegralDigits;
	params.MinimumFractionalDigits = MinimumFractionalDigits;
	params.MaximumFractionalDigits = MaximumFractionalDigits;
	params.CurrencyCode = CurrencyCode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class ULevelStreamingKismet* ULevelStreamingKismet::LoadLevelInstanceBySoftObjectPtr(class UObject* WorldContextObject, TSoftObjectPtr<class UWorld> Level, const struct FVector& Location, const struct FRotator& Rotation, bool* bOutSuccess) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.LevelStreamingKismet.LoadLevelInstanceBySoftObjectPtr");
	ULevelStreamingKismet_LoadLevelInstanceBySoftObjectPtr_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Level = Level;
	params.Location = Location;
	params.Rotation = Rotation;
	params.bOutSuccess = bOutSuccess;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class ULevelStreamingKismet* ULevelStreamingKismet::LoadLevelInstance(class UObject* WorldContextObject, const class FString& LevelName, const struct FVector& Location, const struct FRotator& Rotation, bool* bOutSuccess) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.LevelStreamingKismet.LoadLevelInstance");
	ULevelStreamingKismet_LoadLevelInstance_Params params;

	params.WorldContextObject = WorldContextObject;
	params.LevelName = LevelName;
	params.Location = Location;
	params.Rotation = Rotation;
	params.bOutSuccess = bOutSuccess;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void ULocalLightComponent::SetAttenuationRadius(float NewRadius) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.LocalLightComponent.SetAttenuationRadius");
	ULocalLightComponent_SetAttenuationRadius_Params params;

	params.NewRadius = NewRadius;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

float ULocalLightComponent::GetUnitsConversionFactor(ELightUnits SrcUnits, ELightUnits TargetUnits, float CosHalfConeAngle) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.LocalLightComponent.GetUnitsConversionFactor");
	ULocalLightComponent_GetUnitsConversionFactor_Params params;

	params.SrcUnits = SrcUnits;
	params.TargetUnits = TargetUnits;
	params.CosHalfConeAngle = CosHalfConeAngle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UMaterialInstanceDynamic::SetVectorParameterValue(const struct FName& ParameterName, const struct FLinearColor& Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MaterialInstanceDynamic.SetVectorParameterValue");
	UMaterialInstanceDynamic_SetVectorParameterValue_Params params;

	params.ParameterName = ParameterName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UMaterialInstanceDynamic::SetTextureParameterValue(const struct FName& ParameterName, class UTexture* Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MaterialInstanceDynamic.SetTextureParameterValue");
	UMaterialInstanceDynamic_SetTextureParameterValue_Params params;

	params.ParameterName = ParameterName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UMaterialInstanceDynamic::SetScalarParameterValue(const struct FName& ParameterName, float Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MaterialInstanceDynamic.SetScalarParameterValue");
	UMaterialInstanceDynamic_SetScalarParameterValue_Params params;

	params.ParameterName = ParameterName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UMaterialInstanceDynamic::K2_InterpolateMaterialInstanceParams(class UMaterialInstance* SourceA, class UMaterialInstance* SourceB, float Alpha) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MaterialInstanceDynamic.K2_InterpolateMaterialInstanceParams");
	UMaterialInstanceDynamic_K2_InterpolateMaterialInstanceParams_Params params;

	params.SourceA = SourceA;
	params.SourceB = SourceB;
	params.Alpha = Alpha;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

struct FLinearColor UMaterialInstanceDynamic::K2_GetVectorParameterValue(const struct FName& ParameterName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MaterialInstanceDynamic.K2_GetVectorParameterValue");
	UMaterialInstanceDynamic_K2_GetVectorParameterValue_Params params;

	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UTexture* UMaterialInstanceDynamic::K2_GetTextureParameterValue(const struct FName& ParameterName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MaterialInstanceDynamic.K2_GetTextureParameterValue");
	UMaterialInstanceDynamic_K2_GetTextureParameterValue_Params params;

	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UMaterialInstanceDynamic::K2_GetScalarParameterValue(const struct FName& ParameterName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MaterialInstanceDynamic.K2_GetScalarParameterValue");
	UMaterialInstanceDynamic_K2_GetScalarParameterValue_Params params;

	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UMaterialInstanceDynamic::K2_CopyMaterialInstanceParameters(class UMaterialInterface* Source, bool bQuickParametersOnly) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MaterialInstanceDynamic.K2_CopyMaterialInstanceParameters");
	UMaterialInstanceDynamic_K2_CopyMaterialInstanceParameters_Params params;

	params.Source = Source;
	params.bQuickParametersOnly = bQuickParametersOnly;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UMaterialInstanceDynamic::CopyParameterOverrides(class UMaterialInstance* MaterialInstance) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MaterialInstanceDynamic.CopyParameterOverrides");
	UMaterialInstanceDynamic_CopyParameterOverrides_Params params;

	params.MaterialInstance = MaterialInstance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UMaterialInstanceDynamic::CopyInterpParameters(class UMaterialInstance* Source) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MaterialInstanceDynamic.CopyInterpParameters");
	UMaterialInstanceDynamic_CopyInterpParameters_Params params;

	params.Source = Source;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AMatineeActor::Stop() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MatineeActor.Stop");
	AMatineeActor_Stop_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AMatineeActor::SetPosition(float NewPosition, bool bJump) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MatineeActor.SetPosition");
	AMatineeActor_SetPosition_Params params;

	params.NewPosition = NewPosition;
	params.bJump = bJump;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AMatineeActor::SetLoopingState(bool bNewLooping) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MatineeActor.SetLoopingState");
	AMatineeActor_SetLoopingState_Params params;

	params.bNewLooping = bNewLooping;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AMatineeActor::Reverse() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MatineeActor.Reverse");
	AMatineeActor_Reverse_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AMatineeActor::Play() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MatineeActor.Play");
	AMatineeActor_Play_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AMatineeActor::Pause() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MatineeActor.Pause");
	AMatineeActor_Pause_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AMatineeActor::EnableGroupByName(const class FString& GroupName, bool bEnable) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MatineeActor.EnableGroupByName");
	AMatineeActor_EnableGroupByName_Params params;

	params.GroupName = GroupName;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AMatineeActor::ChangePlaybackDirection() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MatineeActor.ChangePlaybackDirection");
	AMatineeActor_ChangePlaybackDirection_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UMeshVertexPainterKismetLibrary::RemovePaintedVertices(class UStaticMeshComponent* StaticMeshComponent) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MeshVertexPainterKismetLibrary.RemovePaintedVertices");
	UMeshVertexPainterKismetLibrary_RemovePaintedVertices_Params params;

	params.StaticMeshComponent = StaticMeshComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UMeshVertexPainterKismetLibrary::PaintVerticesSingleColor(class UStaticMeshComponent* StaticMeshComponent, const struct FLinearColor& FillColor, bool bConvertToSRGB) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MeshVertexPainterKismetLibrary.PaintVerticesSingleColor");
	UMeshVertexPainterKismetLibrary_PaintVerticesSingleColor_Params params;

	params.StaticMeshComponent = StaticMeshComponent;
	params.FillColor = FillColor;
	params.bConvertToSRGB = bConvertToSRGB;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UMeshVertexPainterKismetLibrary::PaintVerticesLerpAlongAxis(class UStaticMeshComponent* StaticMeshComponent, const struct FLinearColor& StartColor, const struct FLinearColor& EndColor, EVertexPaintAxis AXIS, bool bConvertToSRGB) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.MeshVertexPainterKismetLibrary.PaintVerticesLerpAlongAxis");
	UMeshVertexPainterKismetLibrary_PaintVerticesLerpAlongAxis_Params params;

	params.StaticMeshComponent = StaticMeshComponent;
	params.StartColor = StartColor;
	params.EndColor = EndColor;
	params.AXIS = AXIS;
	params.bConvertToSRGB = bConvertToSRGB;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UOnlineBlueprintCallProxyBase::Activate() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.OnlineBlueprintCallProxyBase.Activate");
	UOnlineBlueprintCallProxyBase_Activate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UParticleSystem::ContainsEmitterType(class UClass* TypeData) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ParticleSystem.ContainsEmitterType");
	UParticleSystem_ContainsEmitterType_Params params;

	params.TypeData = TypeData;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UParticleSystemComponent::SetVectorParameter(const struct FName& ParameterName, const struct FVector& Param) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ParticleSystemComponent.SetVectorParameter");
	UParticleSystemComponent_SetVectorParameter_Params params;

	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UParticleSystemComponent::SetTrailSourceData(const struct FName& InFirstSocketName, const struct FName& InSecondSocketName, TEnumAsByte<ETrailWidthMode> InWidthMode, float InWidth) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ParticleSystemComponent.SetTrailSourceData");
	UParticleSystemComponent_SetTrailSourceData_Params params;

	params.InFirstSocketName = InFirstSocketName;
	params.InSecondSocketName = InSecondSocketName;
	params.InWidthMode = InWidthMode;
	params.InWidth = InWidth;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UParticleSystemComponent::SetTemplate(class UParticleSystem* NewTemplate) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ParticleSystemComponent.SetTemplate");
	UParticleSystemComponent_SetTemplate_Params params;

	params.NewTemplate = NewTemplate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UParticleSystemComponent::SetMaterialParameter(const struct FName& ParameterName, class UMaterialInterface* Param) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ParticleSystemComponent.SetMaterialParameter");
	UParticleSystemComponent_SetMaterialParameter_Params params;

	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UParticleSystemComponent::SetFloatParameter(const struct FName& ParameterName, float Param) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ParticleSystemComponent.SetFloatParameter");
	UParticleSystemComponent_SetFloatParameter_Params params;

	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UParticleSystemComponent::SetEmitterEnable(const struct FName& EmitterName, bool bNewEnableState) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ParticleSystemComponent.SetEmitterEnable");
	UParticleSystemComponent_SetEmitterEnable_Params params;

	params.EmitterName = EmitterName;
	params.bNewEnableState = bNewEnableState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UParticleSystemComponent::SetColorParameter(const struct FName& ParameterName, const struct FLinearColor& Param) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ParticleSystemComponent.SetColorParameter");
	UParticleSystemComponent_SetColorParameter_Params params;

	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UParticleSystemComponent::SetBeamTargetTangent(const struct FName& EmitterName, const struct FVector& NewTangentPoint, int TargetIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ParticleSystemComponent.SetBeamTargetTangent");
	UParticleSystemComponent_SetBeamTargetTangent_Params params;

	params.EmitterName = EmitterName;
	params.NewTangentPoint = NewTangentPoint;
	params.TargetIndex = TargetIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UParticleSystemComponent::SetBeamTargetStrength(const struct FName& EmitterName, float NewTargetStrength, int TargetIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ParticleSystemComponent.SetBeamTargetStrength");
	UParticleSystemComponent_SetBeamTargetStrength_Params params;

	params.EmitterName = EmitterName;
	params.NewTargetStrength = NewTargetStrength;
	params.TargetIndex = TargetIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UParticleSystemComponent::SetBeamTargetPoint(const struct FName& EmitterName, const struct FVector& NewTargetPoint, int TargetIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ParticleSystemComponent.SetBeamTargetPoint");
	UParticleSystemComponent_SetBeamTargetPoint_Params params;

	params.EmitterName = EmitterName;
	params.NewTargetPoint = NewTargetPoint;
	params.TargetIndex = TargetIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UParticleSystemComponent::SetBeamTarget(EBeamAttachmentType AttachmentType, const struct FName& EmitterName, class AActor* Actor, class USceneComponent* Component, const struct FName& Socket, const struct FVector& Location) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ParticleSystemComponent.SetBeamTarget");
	UParticleSystemComponent_SetBeamTarget_Params params;

	params.AttachmentType = AttachmentType;
	params.EmitterName = EmitterName;
	params.Actor = Actor;
	params.Component = Component;
	params.Socket = Socket;
	params.Location = Location;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UParticleSystemComponent::SetBeamSourceTangent(const struct FName& EmitterName, const struct FVector& NewTangentPoint, int SourceIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ParticleSystemComponent.SetBeamSourceTangent");
	UParticleSystemComponent_SetBeamSourceTangent_Params params;

	params.EmitterName = EmitterName;
	params.NewTangentPoint = NewTangentPoint;
	params.SourceIndex = SourceIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UParticleSystemComponent::SetBeamSourceStrength(const struct FName& EmitterName, float NewSourceStrength, int SourceIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ParticleSystemComponent.SetBeamSourceStrength");
	UParticleSystemComponent_SetBeamSourceStrength_Params params;

	params.EmitterName = EmitterName;
	params.NewSourceStrength = NewSourceStrength;
	params.SourceIndex = SourceIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UParticleSystemComponent::SetBeamSourcePoint(const struct FName& EmitterName, const struct FVector& NewSourcePoint, int SourceIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ParticleSystemComponent.SetBeamSourcePoint");
	UParticleSystemComponent_SetBeamSourcePoint_Params params;

	params.EmitterName = EmitterName;
	params.NewSourcePoint = NewSourcePoint;
	params.SourceIndex = SourceIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UParticleSystemComponent::SetBeamSource(EBeamAttachmentType AttachmentType, const struct FName& EmitterName, class AActor* Actor, class USceneComponent* Component, const struct FName& Socket, const struct FVector& Location) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ParticleSystemComponent.SetBeamSource");
	UParticleSystemComponent_SetBeamSource_Params params;

	params.AttachmentType = AttachmentType;
	params.EmitterName = EmitterName;
	params.Actor = Actor;
	params.Component = Component;
	params.Socket = Socket;
	params.Location = Location;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UParticleSystemComponent::SetBeamEndPoint(const struct FName& EmitterName, const struct FVector& NewEndPoint) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ParticleSystemComponent.SetBeamEndPoint");
	UParticleSystemComponent_SetBeamEndPoint_Params params;

	params.EmitterName = EmitterName;
	params.NewEndPoint = NewEndPoint;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UParticleSystemComponent::SetAutoAttachParams(class USceneComponent* Parent, const struct FName& SocketName, TEnumAsByte<EAttachLocation> LocationType) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ParticleSystemComponent.SetAutoAttachParams");
	UParticleSystemComponent_SetAutoAttachParams_Params params;

	params.Parent = Parent;
	params.SocketName = SocketName;
	params.LocationType = LocationType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UParticleSystemComponent::SetAutoAttachmentParameters(class USceneComponent* Parent, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ParticleSystemComponent.SetAutoAttachmentParameters");
	UParticleSystemComponent_SetAutoAttachmentParameters_Params params;

	params.Parent = Parent;
	params.SocketName = SocketName;
	params.LocationRule = LocationRule;
	params.RotationRule = RotationRule;
	params.ScaleRule = ScaleRule;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UParticleSystemComponent::SetActorParameter(const struct FName& ParameterName, class AActor* Param) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ParticleSystemComponent.SetActorParameter");
	UParticleSystemComponent_SetActorParameter_Params params;

	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UParticleSystemComponent::ReleaseToPool() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ParticleSystemComponent.ReleaseToPool");
	UParticleSystemComponent_ReleaseToPool_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UParticleSystemComponent::GetVectorParameter(const struct FName& InName, struct FVector* OutVector) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ParticleSystemComponent.GetVectorParameter");
	UParticleSystemComponent_GetVectorParameter_Params params;

	params.InName = InName;
	params.OutVector = *OutVector;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UParticleSystemComponent::GetNumActiveParticles() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ParticleSystemComponent.GetNumActiveParticles");
	UParticleSystemComponent_GetNumActiveParticles_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UMaterialInterface* UParticleSystemComponent::GetNamedMaterial(const struct FName& InName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ParticleSystemComponent.GetNamedMaterial");
	UParticleSystemComponent_GetNamedMaterial_Params params;

	params.InName = InName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UParticleSystemComponent::GetMaterialParameter(const struct FName& InName, class UMaterialInterface** OutMaterial) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ParticleSystemComponent.GetMaterialParameter");
	UParticleSystemComponent_GetMaterialParameter_Params params;

	params.InName = InName;
	params.OutMaterial = *OutMaterial;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UParticleSystemComponent::GetFloatParameter(const struct FName& InName, float* OutFloat) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ParticleSystemComponent.GetFloatParameter");
	UParticleSystemComponent_GetFloatParameter_Params params;

	params.InName = InName;
	params.OutFloat = *OutFloat;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UParticleSystemComponent::GetColorParameter(const struct FName& InName, struct FLinearColor* OutColor) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ParticleSystemComponent.GetColorParameter");
	UParticleSystemComponent_GetColorParameter_Params params;

	params.InName = InName;
	params.OutColor = *OutColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UParticleSystemComponent::GetBeamTargetTangent(int EmitterIndex, int TargetIndex, struct FVector* OutTangentPoint) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ParticleSystemComponent.GetBeamTargetTangent");
	UParticleSystemComponent_GetBeamTargetTangent_Params params;

	params.EmitterIndex = EmitterIndex;
	params.TargetIndex = TargetIndex;
	params.OutTangentPoint = *OutTangentPoint;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UParticleSystemComponent::GetBeamTargetStrength(int EmitterIndex, int TargetIndex, float* OutTargetStrength) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ParticleSystemComponent.GetBeamTargetStrength");
	UParticleSystemComponent_GetBeamTargetStrength_Params params;

	params.EmitterIndex = EmitterIndex;
	params.TargetIndex = TargetIndex;
	params.OutTargetStrength = *OutTargetStrength;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UParticleSystemComponent::GetBeamTargetPoint(int EmitterIndex, int TargetIndex, struct FVector* OutTargetPoint) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ParticleSystemComponent.GetBeamTargetPoint");
	UParticleSystemComponent_GetBeamTargetPoint_Params params;

	params.EmitterIndex = EmitterIndex;
	params.TargetIndex = TargetIndex;
	params.OutTargetPoint = *OutTargetPoint;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UParticleSystemComponent::GetBeamSourceTangent(int EmitterIndex, int SourceIndex, struct FVector* OutTangentPoint) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ParticleSystemComponent.GetBeamSourceTangent");
	UParticleSystemComponent_GetBeamSourceTangent_Params params;

	params.EmitterIndex = EmitterIndex;
	params.SourceIndex = SourceIndex;
	params.OutTangentPoint = *OutTangentPoint;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UParticleSystemComponent::GetBeamSourceStrength(int EmitterIndex, int SourceIndex, float* OutSourceStrength) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ParticleSystemComponent.GetBeamSourceStrength");
	UParticleSystemComponent_GetBeamSourceStrength_Params params;

	params.EmitterIndex = EmitterIndex;
	params.SourceIndex = SourceIndex;
	params.OutSourceStrength = *OutSourceStrength;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UParticleSystemComponent::GetBeamSourcePoint(int EmitterIndex, int SourceIndex, struct FVector* OutSourcePoint) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ParticleSystemComponent.GetBeamSourcePoint");
	UParticleSystemComponent_GetBeamSourcePoint_Params params;

	params.EmitterIndex = EmitterIndex;
	params.SourceIndex = SourceIndex;
	params.OutSourcePoint = *OutSourcePoint;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UParticleSystemComponent::GetBeamEndPoint(int EmitterIndex, struct FVector* OutEndPoint) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ParticleSystemComponent.GetBeamEndPoint");
	UParticleSystemComponent_GetBeamEndPoint_Params params;

	params.EmitterIndex = EmitterIndex;
	params.OutEndPoint = *OutEndPoint;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UParticleSystemComponent::GetActorParameter(const struct FName& InName, class AActor** OutActor) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ParticleSystemComponent.GetActorParameter");
	UParticleSystemComponent_GetActorParameter_Params params;

	params.InName = InName;
	params.OutActor = *OutActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UParticleSystemComponent::GenerateParticleEvent(const struct FName& InEventName, float InEmitterTime, const struct FVector& InLocation, const struct FVector& InDirection, const struct FVector& InVelocity, const struct FLinearColor& Color, const struct FLinearColor& DynamicParameter) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ParticleSystemComponent.GenerateParticleEvent");
	UParticleSystemComponent_GenerateParticleEvent_Params params;

	params.InEventName = InEventName;
	params.InEmitterTime = InEmitterTime;
	params.InLocation = InLocation;
	params.InDirection = InDirection;
	params.InVelocity = InVelocity;
	params.Color = Color;
	params.DynamicParameter = DynamicParameter;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UParticleSystemComponent::EndTrails() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ParticleSystemComponent.EndTrails");
	UParticleSystemComponent_EndTrails_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

class UMaterialInstanceDynamic* UParticleSystemComponent::CreateNamedDynamicMaterialInstance(const struct FName& InName, class UMaterialInterface* SourceMaterial) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ParticleSystemComponent.CreateNamedDynamicMaterialInstance");
	UParticleSystemComponent_CreateNamedDynamicMaterialInstance_Params params;

	params.InName = InName;
	params.SourceMaterial = SourceMaterial;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UParticleSystemComponent::BeginTrails(const struct FName& InFirstSocketName, const struct FName& InSecondSocketName, TEnumAsByte<ETrailWidthMode> InWidthMode, float InWidth) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ParticleSystemComponent.BeginTrails");
	UParticleSystemComponent_BeginTrails_Params params;

	params.InFirstSocketName = InFirstSocketName;
	params.InSecondSocketName = InSecondSocketName;
	params.InWidthMode = InWidthMode;
	params.InWidth = InWidth;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPawnNoiseEmitterComponent::MakeNoise(class AActor* NoiseMaker, float Loudness, const struct FVector& NoiseLocation) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PawnNoiseEmitterComponent.MakeNoise");
	UPawnNoiseEmitterComponent_MakeNoise_Params params;

	params.NoiseMaker = NoiseMaker;
	params.Loudness = Loudness;
	params.NoiseLocation = NoiseLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPhysicalAnimationComponent::SetStrengthMultiplyer(float InStrengthMultiplyer) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicalAnimationComponent.SetStrengthMultiplyer");
	UPhysicalAnimationComponent_SetStrengthMultiplyer_Params params;

	params.InStrengthMultiplyer = InStrengthMultiplyer;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPhysicalAnimationComponent::SetSkeletalMeshComponent(class USkeletalMeshComponent* InSkeletalMeshComponent) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicalAnimationComponent.SetSkeletalMeshComponent");
	UPhysicalAnimationComponent_SetSkeletalMeshComponent_Params params;

	params.InSkeletalMeshComponent = InSkeletalMeshComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

struct FTransform UPhysicalAnimationComponent::GetBodyTargetTransform(const struct FName& BodyName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicalAnimationComponent.GetBodyTargetTransform");
	UPhysicalAnimationComponent_GetBodyTargetTransform_Params params;

	params.BodyName = BodyName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UPhysicalAnimationComponent::ApplyPhysicalAnimationSettingsBelow(const struct FName& BodyName, const struct FPhysicalAnimationData& PhysicalAnimationData, bool bIncludeSelf) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationSettingsBelow");
	UPhysicalAnimationComponent_ApplyPhysicalAnimationSettingsBelow_Params params;

	params.BodyName = BodyName;
	params.PhysicalAnimationData = PhysicalAnimationData;
	params.bIncludeSelf = bIncludeSelf;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPhysicalAnimationComponent::ApplyPhysicalAnimationSettings(const struct FName& BodyName, const struct FPhysicalAnimationData& PhysicalAnimationData) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationSettings");
	UPhysicalAnimationComponent_ApplyPhysicalAnimationSettings_Params params;

	params.BodyName = BodyName;
	params.PhysicalAnimationData = PhysicalAnimationData;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPhysicalAnimationComponent::ApplyPhysicalAnimationProfileBelow(const struct FName& BodyName, const struct FName& ProfileName, bool bIncludeSelf, bool bClearNotFound) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationProfileBelow");
	UPhysicalAnimationComponent_ApplyPhysicalAnimationProfileBelow_Params params;

	params.BodyName = BodyName;
	params.ProfileName = ProfileName;
	params.bIncludeSelf = bIncludeSelf;
	params.bClearNotFound = bClearNotFound;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPhysicsConstraintComponent::SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsConstraintComponent.SetOrientationDriveTwistAndSwing");
	UPhysicsConstraintComponent_SetOrientationDriveTwistAndSwing_Params params;

	params.bEnableTwistDrive = bEnableTwistDrive;
	params.bEnableSwingDrive = bEnableSwingDrive;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPhysicsConstraintComponent::SetOrientationDriveSLERP(bool bEnableSLERP) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsConstraintComponent.SetOrientationDriveSLERP");
	UPhysicsConstraintComponent_SetOrientationDriveSLERP_Params params;

	params.bEnableSLERP = bEnableSLERP;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPhysicsConstraintComponent::SetLinearZLimit(TEnumAsByte<ELinearConstraintMotion> ConstraintType, float LimitSize) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsConstraintComponent.SetLinearZLimit");
	UPhysicsConstraintComponent_SetLinearZLimit_Params params;

	params.ConstraintType = ConstraintType;
	params.LimitSize = LimitSize;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPhysicsConstraintComponent::SetLinearYLimit(TEnumAsByte<ELinearConstraintMotion> ConstraintType, float LimitSize) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsConstraintComponent.SetLinearYLimit");
	UPhysicsConstraintComponent_SetLinearYLimit_Params params;

	params.ConstraintType = ConstraintType;
	params.LimitSize = LimitSize;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPhysicsConstraintComponent::SetLinearXLimit(TEnumAsByte<ELinearConstraintMotion> ConstraintType, float LimitSize) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsConstraintComponent.SetLinearXLimit");
	UPhysicsConstraintComponent_SetLinearXLimit_Params params;

	params.ConstraintType = ConstraintType;
	params.LimitSize = LimitSize;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPhysicsConstraintComponent::SetLinearVelocityTarget(const struct FVector& InVelTarget) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsConstraintComponent.SetLinearVelocityTarget");
	UPhysicsConstraintComponent_SetLinearVelocityTarget_Params params;

	params.InVelTarget = InVelTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPhysicsConstraintComponent::SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsConstraintComponent.SetLinearVelocityDrive");
	UPhysicsConstraintComponent_SetLinearVelocityDrive_Params params;

	params.bEnableDriveX = bEnableDriveX;
	params.bEnableDriveY = bEnableDriveY;
	params.bEnableDriveZ = bEnableDriveZ;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPhysicsConstraintComponent::SetLinearPositionTarget(const struct FVector& InPosTarget) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsConstraintComponent.SetLinearPositionTarget");
	UPhysicsConstraintComponent_SetLinearPositionTarget_Params params;

	params.InPosTarget = InPosTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPhysicsConstraintComponent::SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsConstraintComponent.SetLinearPositionDrive");
	UPhysicsConstraintComponent_SetLinearPositionDrive_Params params;

	params.bEnableDriveX = bEnableDriveX;
	params.bEnableDriveY = bEnableDriveY;
	params.bEnableDriveZ = bEnableDriveZ;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPhysicsConstraintComponent::SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsConstraintComponent.SetLinearDriveParams");
	UPhysicsConstraintComponent_SetLinearDriveParams_Params params;

	params.PositionStrength = PositionStrength;
	params.VelocityStrength = VelocityStrength;
	params.InForceLimit = InForceLimit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPhysicsConstraintComponent::SetLinearBreakable(bool bLinearBreakable, float LinearBreakThreshold) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsConstraintComponent.SetLinearBreakable");
	UPhysicsConstraintComponent_SetLinearBreakable_Params params;

	params.bLinearBreakable = bLinearBreakable;
	params.LinearBreakThreshold = LinearBreakThreshold;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPhysicsConstraintComponent::SetDisableCollision(bool bDisableCollision) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsConstraintComponent.SetDisableCollision");
	UPhysicsConstraintComponent_SetDisableCollision_Params params;

	params.bDisableCollision = bDisableCollision;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPhysicsConstraintComponent::SetConstraintReferencePosition(TEnumAsByte<EConstraintFrame> Frame, const struct FVector& RefPosition) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsConstraintComponent.SetConstraintReferencePosition");
	UPhysicsConstraintComponent_SetConstraintReferencePosition_Params params;

	params.Frame = Frame;
	params.RefPosition = RefPosition;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPhysicsConstraintComponent::SetConstraintReferenceOrientation(TEnumAsByte<EConstraintFrame> Frame, const struct FVector& PriAxis, const struct FVector& SecAxis) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsConstraintComponent.SetConstraintReferenceOrientation");
	UPhysicsConstraintComponent_SetConstraintReferenceOrientation_Params params;

	params.Frame = Frame;
	params.PriAxis = PriAxis;
	params.SecAxis = SecAxis;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPhysicsConstraintComponent::SetConstraintReferenceFrame(TEnumAsByte<EConstraintFrame> Frame, const struct FTransform& RefFrame) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsConstraintComponent.SetConstraintReferenceFrame");
	UPhysicsConstraintComponent_SetConstraintReferenceFrame_Params params;

	params.Frame = Frame;
	params.RefFrame = RefFrame;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPhysicsConstraintComponent::SetConstrainedComponents(class UPrimitiveComponent* Component1, const struct FName& BoneName1, class UPrimitiveComponent* Component2, const struct FName& BoneName2) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsConstraintComponent.SetConstrainedComponents");
	UPhysicsConstraintComponent_SetConstrainedComponents_Params params;

	params.Component1 = Component1;
	params.BoneName1 = BoneName1;
	params.Component2 = Component2;
	params.BoneName2 = BoneName2;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPhysicsConstraintComponent::SetAngularVelocityTarget(const struct FVector& InVelTarget) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsConstraintComponent.SetAngularVelocityTarget");
	UPhysicsConstraintComponent_SetAngularVelocityTarget_Params params;

	params.InVelTarget = InVelTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPhysicsConstraintComponent::SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsConstraintComponent.SetAngularVelocityDriveTwistAndSwing");
	UPhysicsConstraintComponent_SetAngularVelocityDriveTwistAndSwing_Params params;

	params.bEnableTwistDrive = bEnableTwistDrive;
	params.bEnableSwingDrive = bEnableSwingDrive;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPhysicsConstraintComponent::SetAngularVelocityDriveSLERP(bool bEnableSLERP) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsConstraintComponent.SetAngularVelocityDriveSLERP");
	UPhysicsConstraintComponent_SetAngularVelocityDriveSLERP_Params params;

	params.bEnableSLERP = bEnableSLERP;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPhysicsConstraintComponent::SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsConstraintComponent.SetAngularVelocityDrive");
	UPhysicsConstraintComponent_SetAngularVelocityDrive_Params params;

	params.bEnableSwingDrive = bEnableSwingDrive;
	params.bEnableTwistDrive = bEnableTwistDrive;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPhysicsConstraintComponent::SetAngularTwistLimit(TEnumAsByte<EAngularConstraintMotion> ConstraintType, float TwistLimitAngle) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsConstraintComponent.SetAngularTwistLimit");
	UPhysicsConstraintComponent_SetAngularTwistLimit_Params params;

	params.ConstraintType = ConstraintType;
	params.TwistLimitAngle = TwistLimitAngle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPhysicsConstraintComponent::SetAngularSwing2Limit(TEnumAsByte<EAngularConstraintMotion> MotionType, float Swing2LimitAngle) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsConstraintComponent.SetAngularSwing2Limit");
	UPhysicsConstraintComponent_SetAngularSwing2Limit_Params params;

	params.MotionType = MotionType;
	params.Swing2LimitAngle = Swing2LimitAngle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPhysicsConstraintComponent::SetAngularSwing1Limit(TEnumAsByte<EAngularConstraintMotion> MotionType, float Swing1LimitAngle) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsConstraintComponent.SetAngularSwing1Limit");
	UPhysicsConstraintComponent_SetAngularSwing1Limit_Params params;

	params.MotionType = MotionType;
	params.Swing1LimitAngle = Swing1LimitAngle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPhysicsConstraintComponent::SetAngularOrientationTarget(const struct FRotator& InPosTarget) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsConstraintComponent.SetAngularOrientationTarget");
	UPhysicsConstraintComponent_SetAngularOrientationTarget_Params params;

	params.InPosTarget = InPosTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPhysicsConstraintComponent::SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsConstraintComponent.SetAngularOrientationDrive");
	UPhysicsConstraintComponent_SetAngularOrientationDrive_Params params;

	params.bEnableSwingDrive = bEnableSwingDrive;
	params.bEnableTwistDrive = bEnableTwistDrive;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPhysicsConstraintComponent::SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsConstraintComponent.SetAngularDriveParams");
	UPhysicsConstraintComponent_SetAngularDriveParams_Params params;

	params.PositionStrength = PositionStrength;
	params.VelocityStrength = VelocityStrength;
	params.InForceLimit = InForceLimit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPhysicsConstraintComponent::SetAngularDriveMode(TEnumAsByte<EAngularDriveMode> DriveMode) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsConstraintComponent.SetAngularDriveMode");
	UPhysicsConstraintComponent_SetAngularDriveMode_Params params;

	params.DriveMode = DriveMode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPhysicsConstraintComponent::SetAngularBreakable(bool bAngularBreakable, float AngularBreakThreshold) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsConstraintComponent.SetAngularBreakable");
	UPhysicsConstraintComponent_SetAngularBreakable_Params params;

	params.bAngularBreakable = bAngularBreakable;
	params.AngularBreakThreshold = AngularBreakThreshold;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UPhysicsConstraintComponent::IsConstraintActive() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsConstraintComponent.IsConstraintActive");
	UPhysicsConstraintComponent_IsConstraintActive_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UPhysicsConstraintComponent::IsBroken() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsConstraintComponent.IsBroken");
	UPhysicsConstraintComponent_IsBroken_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UPhysicsConstraintComponent::GetCurrentTwist() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsConstraintComponent.GetCurrentTwist");
	UPhysicsConstraintComponent_GetCurrentTwist_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UPhysicsConstraintComponent::GetCurrentSwing2() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsConstraintComponent.GetCurrentSwing2");
	UPhysicsConstraintComponent_GetCurrentSwing2_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UPhysicsConstraintComponent::GetCurrentSwing1() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsConstraintComponent.GetCurrentSwing1");
	UPhysicsConstraintComponent_GetCurrentSwing1_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UPhysicsConstraintComponent::GetConstraintForce(struct FVector* OutLinearForce, struct FVector* OutAngularForce) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsConstraintComponent.GetConstraintForce");
	UPhysicsConstraintComponent_GetConstraintForce_Params params;

	params.OutLinearForce = *OutLinearForce;
	params.OutAngularForce = *OutAngularForce;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPhysicsConstraintComponent::BreakConstraint() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsConstraintComponent.BreakConstraint");
	UPhysicsConstraintComponent_BreakConstraint_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPhysicsHandleComponent::SetTargetRotation(const struct FRotator& NewRotation) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsHandleComponent.SetTargetRotation");
	UPhysicsHandleComponent_SetTargetRotation_Params params;

	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPhysicsHandleComponent::SetTargetLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsHandleComponent.SetTargetLocationAndRotation");
	UPhysicsHandleComponent_SetTargetLocationAndRotation_Params params;

	params.NewLocation = NewLocation;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPhysicsHandleComponent::SetTargetLocation(const struct FVector& NewLocation) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsHandleComponent.SetTargetLocation");
	UPhysicsHandleComponent_SetTargetLocation_Params params;

	params.NewLocation = NewLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPhysicsHandleComponent::SetLinearStiffness(float NewLinearStiffness) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsHandleComponent.SetLinearStiffness");
	UPhysicsHandleComponent_SetLinearStiffness_Params params;

	params.NewLinearStiffness = NewLinearStiffness;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPhysicsHandleComponent::SetLinearDamping(float NewLinearDamping) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsHandleComponent.SetLinearDamping");
	UPhysicsHandleComponent_SetLinearDamping_Params params;

	params.NewLinearDamping = NewLinearDamping;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPhysicsHandleComponent::SetInterpolationSpeed(float NewInterpolationSpeed) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsHandleComponent.SetInterpolationSpeed");
	UPhysicsHandleComponent_SetInterpolationSpeed_Params params;

	params.NewInterpolationSpeed = NewInterpolationSpeed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPhysicsHandleComponent::SetAngularStiffness(float NewAngularStiffness) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsHandleComponent.SetAngularStiffness");
	UPhysicsHandleComponent_SetAngularStiffness_Params params;

	params.NewAngularStiffness = NewAngularStiffness;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPhysicsHandleComponent::SetAngularDamping(float NewAngularDamping) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsHandleComponent.SetAngularDamping");
	UPhysicsHandleComponent_SetAngularDamping_Params params;

	params.NewAngularDamping = NewAngularDamping;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPhysicsHandleComponent::ReleaseComponent() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsHandleComponent.ReleaseComponent");
	UPhysicsHandleComponent_ReleaseComponent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPhysicsHandleComponent::GrabComponentAtLocationWithRotation(class UPrimitiveComponent* Component, const struct FName& InBoneName, const struct FVector& Location, const struct FRotator& Rotation) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsHandleComponent.GrabComponentAtLocationWithRotation");
	UPhysicsHandleComponent_GrabComponentAtLocationWithRotation_Params params;

	params.Component = Component;
	params.InBoneName = InBoneName;
	params.Location = Location;
	params.Rotation = Rotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPhysicsHandleComponent::GrabComponentAtLocation(class UPrimitiveComponent* Component, const struct FName& InBoneName, const struct FVector& GrabLocation) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsHandleComponent.GrabComponentAtLocation");
	UPhysicsHandleComponent_GrabComponentAtLocation_Params params;

	params.Component = Component;
	params.InBoneName = InBoneName;
	params.GrabLocation = GrabLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPhysicsHandleComponent::GrabComponent(class UPrimitiveComponent* Component, const struct FName& InBoneName, const struct FVector& GrabLocation, bool bConstrainRotation) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsHandleComponent.GrabComponent");
	UPhysicsHandleComponent_GrabComponent_Params params;

	params.Component = Component;
	params.InBoneName = InBoneName;
	params.GrabLocation = GrabLocation;
	params.bConstrainRotation = bConstrainRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPhysicsHandleComponent::GetTargetLocationAndRotation(struct FVector* TargetLocation, struct FRotator* TargetRotation) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsHandleComponent.GetTargetLocationAndRotation");
	UPhysicsHandleComponent_GetTargetLocationAndRotation_Params params;

	params.TargetLocation = *TargetLocation;
	params.TargetRotation = *TargetRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

class UPrimitiveComponent* UPhysicsHandleComponent::GetGrabbedComponent() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsHandleComponent.GetGrabbedComponent");
	UPhysicsHandleComponent_GetGrabbedComponent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UPhysicsSpringComponent::GetSpringRestingPoint() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsSpringComponent.GetSpringRestingPoint");
	UPhysicsSpringComponent_GetSpringRestingPoint_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UPhysicsSpringComponent::GetSpringDirection() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsSpringComponent.GetSpringDirection");
	UPhysicsSpringComponent_GetSpringDirection_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UPhysicsSpringComponent::GetSpringCurrentEndPoint() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsSpringComponent.GetSpringCurrentEndPoint");
	UPhysicsSpringComponent_GetSpringCurrentEndPoint_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UPhysicsSpringComponent::GetNormalizedCompressionScalar() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PhysicsSpringComponent.GetNormalizedCompressionScalar");
	UPhysicsSpringComponent_GetNormalizedCompressionScalar_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void APlanarReflection::OnInterpToggle(bool bEnable) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlanarReflection.OnInterpToggle");
	APlanarReflection_OnInterpToggle_Params params;

	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USceneCaptureComponent::ShowOnlyComponent(class UPrimitiveComponent* InComponent) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneCaptureComponent.ShowOnlyComponent");
	USceneCaptureComponent_ShowOnlyComponent_Params params;

	params.InComponent = InComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USceneCaptureComponent::ShowOnlyActorComponents(class AActor* InActor) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneCaptureComponent.ShowOnlyActorComponents");
	USceneCaptureComponent_ShowOnlyActorComponents_Params params;

	params.InActor = InActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USceneCaptureComponent::SetCaptureSortPriority(int NewCaptureSortPriority) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneCaptureComponent.SetCaptureSortPriority");
	USceneCaptureComponent_SetCaptureSortPriority_Params params;

	params.NewCaptureSortPriority = NewCaptureSortPriority;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USceneCaptureComponent::RemoveShowOnlyComponent(class UPrimitiveComponent* InComponent) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneCaptureComponent.RemoveShowOnlyComponent");
	USceneCaptureComponent_RemoveShowOnlyComponent_Params params;

	params.InComponent = InComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USceneCaptureComponent::RemoveShowOnlyActorComponents(class AActor* InActor) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneCaptureComponent.RemoveShowOnlyActorComponents");
	USceneCaptureComponent_RemoveShowOnlyActorComponents_Params params;

	params.InActor = InActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USceneCaptureComponent::HideComponent(class UPrimitiveComponent* InComponent) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneCaptureComponent.HideComponent");
	USceneCaptureComponent_HideComponent_Params params;

	params.InComponent = InComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USceneCaptureComponent::HideActorComponents(class AActor* InActor) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneCaptureComponent.HideActorComponents");
	USceneCaptureComponent_HideActorComponents_Params params;

	params.InActor = InActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USceneCaptureComponent::ClearShowOnlyComponents(class UPrimitiveComponent* InComponent) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneCaptureComponent.ClearShowOnlyComponents");
	USceneCaptureComponent_ClearShowOnlyComponents_Params params;

	params.InComponent = InComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USceneCaptureComponent::ClearHiddenComponents() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneCaptureComponent.ClearHiddenComponents");
	USceneCaptureComponent_ClearHiddenComponents_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UPlatformEventsComponent::SupportsConvertibleLaptops() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlatformEventsComponent.SupportsConvertibleLaptops");
	UPlatformEventsComponent_SupportsConvertibleLaptops_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UPlatformEventsComponent::PlatformEventDelegate__DelegateSignature() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlatformEventsComponent.PlatformEventDelegate__DelegateSignature");
	UPlatformEventsComponent_PlatformEventDelegate__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UPlatformEventsComponent::IsInTabletMode() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlatformEventsComponent.IsInTabletMode");
	UPlatformEventsComponent_IsInTabletMode_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UPlatformEventsComponent::IsInLaptopMode() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlatformEventsComponent.IsInLaptopMode");
	UPlatformEventsComponent_IsInLaptopMode_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UPlatformInterfaceWebResponse::GetNumHeaders() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlatformInterfaceWebResponse.GetNumHeaders");
	UPlatformInterfaceWebResponse_GetNumHeaders_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UPlatformInterfaceWebResponse::GetHeaderValue(const class FString& HeaderName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlatformInterfaceWebResponse.GetHeaderValue");
	UPlatformInterfaceWebResponse_GetHeaderValue_Params params;

	params.HeaderName = HeaderName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UPlatformInterfaceWebResponse::GetHeader(int HeaderIndex, class FString* Header, class FString* Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PlatformInterfaceWebResponse.GetHeader");
	UPlatformInterfaceWebResponse_GetHeader_Params params;

	params.HeaderIndex = HeaderIndex;
	params.Header = *Header;
	params.Value = *Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APointLight::SetRadius(float NewRadius) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PointLight.SetRadius");
	APointLight_SetRadius_Params params;

	params.NewRadius = NewRadius;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APointLight::SetLightFalloffExponent(float NewLightFalloffExponent) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PointLight.SetLightFalloffExponent");
	APointLight_SetLightFalloffExponent_Params params;

	params.NewLightFalloffExponent = NewLightFalloffExponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPointLightComponent::SetUseInverseSquaredFalloff(bool NewValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PointLightComponent.SetUseInverseSquaredFalloff");
	UPointLightComponent_SetUseInverseSquaredFalloff_Params params;

	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPointLightComponent::SetSourceRadius(float bNewValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PointLightComponent.SetSourceRadius");
	UPointLightComponent_SetSourceRadius_Params params;

	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPointLightComponent::SetSourceLength(float NewValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PointLightComponent.SetSourceLength");
	UPointLightComponent_SetSourceLength_Params params;

	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPointLightComponent::SetSoftSourceRadius(float bNewValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PointLightComponent.SetSoftSourceRadius");
	UPointLightComponent_SetSoftSourceRadius_Params params;

	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPointLightComponent::SetLightFalloffExponent(float NewLightFalloffExponent) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PointLightComponent.SetLightFalloffExponent");
	UPointLightComponent_SetLightFalloffExponent_Params params;

	params.NewLightFalloffExponent = NewLightFalloffExponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPoseableMeshComponent::SetBoneTransformByName(const struct FName& BoneName, const struct FTransform& InTransform, TEnumAsByte<EBoneSpaces> BoneSpace) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PoseableMeshComponent.SetBoneTransformByName");
	UPoseableMeshComponent_SetBoneTransformByName_Params params;

	params.BoneName = BoneName;
	params.InTransform = InTransform;
	params.BoneSpace = BoneSpace;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPoseableMeshComponent::SetBoneScaleByName(const struct FName& BoneName, const struct FVector& InScale3D, TEnumAsByte<EBoneSpaces> BoneSpace) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PoseableMeshComponent.SetBoneScaleByName");
	UPoseableMeshComponent_SetBoneScaleByName_Params params;

	params.BoneName = BoneName;
	params.InScale3D = InScale3D;
	params.BoneSpace = BoneSpace;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPoseableMeshComponent::SetBoneRotationByName(const struct FName& BoneName, const struct FRotator& InRotation, TEnumAsByte<EBoneSpaces> BoneSpace) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PoseableMeshComponent.SetBoneRotationByName");
	UPoseableMeshComponent_SetBoneRotationByName_Params params;

	params.BoneName = BoneName;
	params.InRotation = InRotation;
	params.BoneSpace = BoneSpace;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPoseableMeshComponent::SetBoneLocationByName(const struct FName& BoneName, const struct FVector& InLocation, TEnumAsByte<EBoneSpaces> BoneSpace) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PoseableMeshComponent.SetBoneLocationByName");
	UPoseableMeshComponent_SetBoneLocationByName_Params params;

	params.BoneName = BoneName;
	params.InLocation = InLocation;
	params.BoneSpace = BoneSpace;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPoseableMeshComponent::ResetBoneTransformByName(const struct FName& BoneName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PoseableMeshComponent.ResetBoneTransformByName");
	UPoseableMeshComponent_ResetBoneTransformByName_Params params;

	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

struct FTransform UPoseableMeshComponent::GetBoneTransformByName(const struct FName& BoneName, TEnumAsByte<EBoneSpaces> BoneSpace) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PoseableMeshComponent.GetBoneTransformByName");
	UPoseableMeshComponent_GetBoneTransformByName_Params params;

	params.BoneName = BoneName;
	params.BoneSpace = BoneSpace;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UPoseableMeshComponent::GetBoneScaleByName(const struct FName& BoneName, TEnumAsByte<EBoneSpaces> BoneSpace) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PoseableMeshComponent.GetBoneScaleByName");
	UPoseableMeshComponent_GetBoneScaleByName_Params params;

	params.BoneName = BoneName;
	params.BoneSpace = BoneSpace;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FRotator UPoseableMeshComponent::GetBoneRotationByName(const struct FName& BoneName, TEnumAsByte<EBoneSpaces> BoneSpace) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PoseableMeshComponent.GetBoneRotationByName");
	UPoseableMeshComponent_GetBoneRotationByName_Params params;

	params.BoneName = BoneName;
	params.BoneSpace = BoneSpace;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UPoseableMeshComponent::GetBoneLocationByName(const struct FName& BoneName, TEnumAsByte<EBoneSpaces> BoneSpace) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PoseableMeshComponent.GetBoneLocationByName");
	UPoseableMeshComponent_GetBoneLocationByName_Params params;

	params.BoneName = BoneName;
	params.BoneSpace = BoneSpace;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UPoseableMeshComponent::CopyPoseFromSkeletalComponent(class USkeletalMeshComponent* InComponentToCopy) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PoseableMeshComponent.CopyPoseFromSkeletalComponent");
	UPoseableMeshComponent_CopyPoseFromSkeletalComponent_Params params;

	params.InComponentToCopy = InComponentToCopy;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UPostProcessComponent::AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PostProcessComponent.AddOrUpdateBlendable");
	UPostProcessComponent_AddOrUpdateBlendable_Params params;

	params.InBlendableObject = InBlendableObject;
	params.InWeight = InWeight;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void APostProcessVolume::AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.PostProcessVolume.AddOrUpdateBlendable");
	APostProcessVolume_AddOrUpdateBlendable_Params params;

	params.InBlendableObject = InBlendableObject;
	params.InWeight = InWeight;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ARadialForceActor::ToggleForce() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.RadialForceActor.ToggleForce");
	ARadialForceActor_ToggleForce_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ARadialForceActor::FireImpulse() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.RadialForceActor.FireImpulse");
	ARadialForceActor_FireImpulse_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ARadialForceActor::EnableForce() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.RadialForceActor.EnableForce");
	ARadialForceActor_EnableForce_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ARadialForceActor::DisableForce() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.RadialForceActor.DisableForce");
	ARadialForceActor_DisableForce_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void URadialForceComponent::RemoveObjectTypeToAffect(TEnumAsByte<EObjectTypeQuery> ObjectType) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.RadialForceComponent.RemoveObjectTypeToAffect");
	URadialForceComponent_RemoveObjectTypeToAffect_Params params;

	params.ObjectType = ObjectType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void URadialForceComponent::FireImpulse() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.RadialForceComponent.FireImpulse");
	URadialForceComponent_FireImpulse_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void URadialForceComponent::AddObjectTypeToAffect(TEnumAsByte<EObjectTypeQuery> ObjectType) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.RadialForceComponent.AddObjectTypeToAffect");
	URadialForceComponent_AddObjectTypeToAffect_Params params;

	params.ObjectType = ObjectType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void URectLightComponent::SetSourceWidth(float bNewValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.RectLightComponent.SetSourceWidth");
	URectLightComponent_SetSourceWidth_Params params;

	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void URectLightComponent::SetSourceHeight(float NewValue) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.RectLightComponent.SetSourceHeight");
	URectLightComponent_SetSourceHeight_Params params;

	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void URotatingMovementComponent::StartTotalRotationFromCurrentPosition(const struct FRotator& Rotation, float RotationDuration) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.RotatingMovementComponent.StartTotalRotationFromCurrentPosition");
	URotatingMovementComponent_StartTotalRotationFromCurrentPosition_Params params;

	params.Rotation = Rotation;
	params.RotationDuration = RotationDuration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void URotatingMovementComponent::SetDuration(float RotationDuration) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.RotatingMovementComponent.SetDuration");
	URotatingMovementComponent_SetDuration_Params params;

	params.RotationDuration = RotationDuration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ASceneCapture2D::OnInterpToggle(bool bEnable) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneCapture2D.OnInterpToggle");
	ASceneCapture2D_OnInterpToggle_Params params;

	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USceneCaptureComponent2D::CaptureSceneDeferred() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneCaptureComponent2D.CaptureSceneDeferred");
	USceneCaptureComponent2D_CaptureSceneDeferred_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USceneCaptureComponent2D::CaptureScene() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneCaptureComponent2D.CaptureScene");
	USceneCaptureComponent2D_CaptureScene_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USceneCaptureComponent2D::AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneCaptureComponent2D.AddOrUpdateBlendable");
	USceneCaptureComponent2D_AddOrUpdateBlendable_Params params;

	params.InBlendableObject = InBlendableObject;
	params.InWeight = InWeight;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USceneCaptureComponentCube::CaptureScene() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneCaptureComponentCube.CaptureScene");
	USceneCaptureComponentCube_CaptureScene_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ASceneCaptureCube::OnInterpToggle(bool bEnable) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SceneCaptureCube.OnInterpToggle");
	ASceneCaptureCube_OnInterpToggle_Params params;

	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AClassActorThumbnailRenderer::TickScene(float DeltaTime) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ClassActorThumbnailRenderer.TickScene");
	AClassActorThumbnailRenderer_TickScene_Params params;

	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AClassActorThumbnailRenderer::SpawnActorCenteredFromClass(class UClass* Actor) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ClassActorThumbnailRenderer.SpawnActorCenteredFromClass");
	AClassActorThumbnailRenderer_SpawnActorCenteredFromClass_Params params;

	params.Actor = Actor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AClassActorThumbnailRenderer::SpawnActorCentered(class AActor* Object) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ClassActorThumbnailRenderer.SpawnActorCentered");
	AClassActorThumbnailRenderer_SpawnActorCentered_Params params;

	params.Object = Object;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AClassActorThumbnailRenderer::Render(class UTextureRenderTarget2D* RenderTarget, const struct FThumbnailParameters& Parameters) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ClassActorThumbnailRenderer.Render");
	AClassActorThumbnailRenderer_Render_Params params;

	params.RenderTarget = RenderTarget;
	params.Parameters = Parameters;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AClassActorThumbnailRenderer::ClearWorld() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.ClassActorThumbnailRenderer.ClearWorld");
	AClassActorThumbnailRenderer_ClearWorld_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ASkeletalMeshActor::OnRep_ReplicatedPhysAsset() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshActor.OnRep_ReplicatedPhysAsset");
	ASkeletalMeshActor_OnRep_ReplicatedPhysAsset_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ASkeletalMeshActor::OnRep_ReplicatedMesh() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshActor.OnRep_ReplicatedMesh");
	ASkeletalMeshActor_OnRep_ReplicatedMesh_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ASkeletalMeshActor::OnRep_ReplicatedMaterial1() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial1");
	ASkeletalMeshActor_OnRep_ReplicatedMaterial1_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void ASkeletalMeshActor::OnRep_ReplicatedMaterial0() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial0");
	ASkeletalMeshActor_OnRep_ReplicatedMaterial0_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkeletalMeshSocket::InitializeSocketFromLocation(class USkeletalMeshComponent* SkelComp, const struct FVector& WorldLocation, const struct FVector& WorldNormal) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshSocket.InitializeSocketFromLocation");
	USkeletalMeshSocket_InitializeSocketFromLocation_Params params;

	params.SkelComp = SkelComp;
	params.WorldLocation = WorldLocation;
	params.WorldNormal = WorldNormal;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

struct FVector USkeletalMeshSocket::GetSocketLocation(class USkeletalMeshComponent* SkelComp) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkeletalMeshSocket.GetSocketLocation");
	USkeletalMeshSocket_GetSocketLocation_Params params;

	params.SkelComp = SkelComp;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void ASkyLight::OnRep_bEnabled() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkyLight.OnRep_bEnabled");
	ASkyLight_OnRep_bEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkyLightComponent::SetVolumetricScatteringIntensity(float NewIntensity) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkyLightComponent.SetVolumetricScatteringIntensity");
	USkyLightComponent_SetVolumetricScatteringIntensity_Params params;

	params.NewIntensity = NewIntensity;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkyLightComponent::SetOcclusionTint(const struct FColor& InTint) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkyLightComponent.SetOcclusionTint");
	USkyLightComponent_SetOcclusionTint_Params params;

	params.InTint = InTint;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkyLightComponent::SetOcclusionExponent(float InOcclusionExponent) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkyLightComponent.SetOcclusionExponent");
	USkyLightComponent_SetOcclusionExponent_Params params;

	params.InOcclusionExponent = InOcclusionExponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkyLightComponent::SetOcclusionContrast(float InOcclusionContrast) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkyLightComponent.SetOcclusionContrast");
	USkyLightComponent_SetOcclusionContrast_Params params;

	params.InOcclusionContrast = InOcclusionContrast;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkyLightComponent::SetMinOcclusion(float InMinOcclusion) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkyLightComponent.SetMinOcclusion");
	USkyLightComponent_SetMinOcclusion_Params params;

	params.InMinOcclusion = InMinOcclusion;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkyLightComponent::SetLowerHemisphereColor(const struct FLinearColor& InLowerHemisphereColor) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkyLightComponent.SetLowerHemisphereColor");
	USkyLightComponent_SetLowerHemisphereColor_Params params;

	params.InLowerHemisphereColor = InLowerHemisphereColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkyLightComponent::SetLightColor(const struct FLinearColor& NewLightColor) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkyLightComponent.SetLightColor");
	USkyLightComponent_SetLightColor_Params params;

	params.NewLightColor = NewLightColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkyLightComponent::SetIntensity(float NewIntensity) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkyLightComponent.SetIntensity");
	USkyLightComponent_SetIntensity_Params params;

	params.NewIntensity = NewIntensity;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkyLightComponent::SetIndirectLightingIntensity(float NewIntensity) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkyLightComponent.SetIndirectLightingIntensity");
	USkyLightComponent_SetIndirectLightingIntensity_Params params;

	params.NewIntensity = NewIntensity;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkyLightComponent::SetCubemapBlend(class UTextureCube* SourceCubemap, class UTextureCube* DestinationCubemap, float InBlendFraction) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkyLightComponent.SetCubemapBlend");
	USkyLightComponent_SetCubemapBlend_Params params;

	params.SourceCubemap = SourceCubemap;
	params.DestinationCubemap = DestinationCubemap;
	params.InBlendFraction = InBlendFraction;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkyLightComponent::SetCubemap(class UTextureCube* NewCubemap) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkyLightComponent.SetCubemap");
	USkyLightComponent_SetCubemap_Params params;

	params.NewCubemap = NewCubemap;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USkyLightComponent::RecaptureSky() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SkyLightComponent.RecaptureSky");
	USkyLightComponent_RecaptureSky_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USoundSubmix::StopRecordingOutput(class UObject* WorldContextObject, EAudioRecordingExportType ExportType, const class FString& Name, const class FString& Path, class USoundWave* ExistingSoundWaveToOverwrite) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SoundSubmix.StopRecordingOutput");
	USoundSubmix_StopRecordingOutput_Params params;

	params.WorldContextObject = WorldContextObject;
	params.ExportType = ExportType;
	params.Name = Name;
	params.Path = Path;
	params.ExistingSoundWaveToOverwrite = ExistingSoundWaveToOverwrite;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USoundSubmix::StartRecordingOutput(class UObject* WorldContextObject, float ExpectedDuration) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SoundSubmix.StartRecordingOutput");
	USoundSubmix_StartRecordingOutput_Params params;

	params.WorldContextObject = WorldContextObject;
	params.ExpectedDuration = ExpectedDuration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USplineMeshComponent::UpdateMesh() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineMeshComponent.UpdateMesh");
	USplineMeshComponent_UpdateMesh_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USplineMeshComponent::SetStartTangent(const struct FVector& StartTangent, bool bUpdateMesh) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineMeshComponent.SetStartTangent");
	USplineMeshComponent_SetStartTangent_Params params;

	params.StartTangent = StartTangent;
	params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USplineMeshComponent::SetStartScale(const struct FVector2D& StartScale, bool bUpdateMesh) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineMeshComponent.SetStartScale");
	USplineMeshComponent_SetStartScale_Params params;

	params.StartScale = StartScale;
	params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USplineMeshComponent::SetStartRoll(float StartRoll, bool bUpdateMesh) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineMeshComponent.SetStartRoll");
	USplineMeshComponent_SetStartRoll_Params params;

	params.StartRoll = StartRoll;
	params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USplineMeshComponent::SetStartPosition(const struct FVector& StartPos, bool bUpdateMesh) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineMeshComponent.SetStartPosition");
	USplineMeshComponent_SetStartPosition_Params params;

	params.StartPos = StartPos;
	params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USplineMeshComponent::SetStartOffset(const struct FVector2D& StartOffset, bool bUpdateMesh) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineMeshComponent.SetStartOffset");
	USplineMeshComponent_SetStartOffset_Params params;

	params.StartOffset = StartOffset;
	params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USplineMeshComponent::SetStartAndEnd(const struct FVector& StartPos, const struct FVector& StartTangent, const struct FVector& EndPos, const struct FVector& EndTangent, bool bUpdateMesh) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineMeshComponent.SetStartAndEnd");
	USplineMeshComponent_SetStartAndEnd_Params params;

	params.StartPos = StartPos;
	params.StartTangent = StartTangent;
	params.EndPos = EndPos;
	params.EndTangent = EndTangent;
	params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USplineMeshComponent::SetSplineUpDir(const struct FVector& InSplineUpDir, bool bUpdateMesh) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineMeshComponent.SetSplineUpDir");
	USplineMeshComponent_SetSplineUpDir_Params params;

	params.InSplineUpDir = InSplineUpDir;
	params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USplineMeshComponent::SetForwardAxis(TEnumAsByte<ESplineMeshAxis> InForwardAxis, bool bUpdateMesh) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineMeshComponent.SetForwardAxis");
	USplineMeshComponent_SetForwardAxis_Params params;

	params.InForwardAxis = InForwardAxis;
	params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USplineMeshComponent::SetEndTangent(const struct FVector& EndTangent, bool bUpdateMesh) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineMeshComponent.SetEndTangent");
	USplineMeshComponent_SetEndTangent_Params params;

	params.EndTangent = EndTangent;
	params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USplineMeshComponent::SetEndScale(const struct FVector2D& EndScale, bool bUpdateMesh) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineMeshComponent.SetEndScale");
	USplineMeshComponent_SetEndScale_Params params;

	params.EndScale = EndScale;
	params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USplineMeshComponent::SetEndRoll(float EndRoll, bool bUpdateMesh) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineMeshComponent.SetEndRoll");
	USplineMeshComponent_SetEndRoll_Params params;

	params.EndRoll = EndRoll;
	params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USplineMeshComponent::SetEndPosition(const struct FVector& EndPos, bool bUpdateMesh) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineMeshComponent.SetEndPosition");
	USplineMeshComponent_SetEndPosition_Params params;

	params.EndPos = EndPos;
	params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USplineMeshComponent::SetEndOffset(const struct FVector2D& EndOffset, bool bUpdateMesh) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineMeshComponent.SetEndOffset");
	USplineMeshComponent_SetEndOffset_Params params;

	params.EndOffset = EndOffset;
	params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USplineMeshComponent::SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineMeshComponent.SetBoundaryMin");
	USplineMeshComponent_SetBoundaryMin_Params params;

	params.InBoundaryMin = InBoundaryMin;
	params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USplineMeshComponent::SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineMeshComponent.SetBoundaryMax");
	USplineMeshComponent_SetBoundaryMax_Params params;

	params.InBoundaryMax = InBoundaryMax;
	params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

struct FVector USplineMeshComponent::GetStartTangent() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineMeshComponent.GetStartTangent");
	USplineMeshComponent_GetStartTangent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector2D USplineMeshComponent::GetStartScale() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineMeshComponent.GetStartScale");
	USplineMeshComponent_GetStartScale_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float USplineMeshComponent::GetStartRoll() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineMeshComponent.GetStartRoll");
	USplineMeshComponent_GetStartRoll_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector USplineMeshComponent::GetStartPosition() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineMeshComponent.GetStartPosition");
	USplineMeshComponent_GetStartPosition_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector2D USplineMeshComponent::GetStartOffset() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineMeshComponent.GetStartOffset");
	USplineMeshComponent_GetStartOffset_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector USplineMeshComponent::GetSplineUpDir() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineMeshComponent.GetSplineUpDir");
	USplineMeshComponent_GetSplineUpDir_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector USplineMeshComponent::GetEndTangent() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineMeshComponent.GetEndTangent");
	USplineMeshComponent_GetEndTangent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector2D USplineMeshComponent::GetEndScale() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineMeshComponent.GetEndScale");
	USplineMeshComponent_GetEndScale_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float USplineMeshComponent::GetEndRoll() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineMeshComponent.GetEndRoll");
	USplineMeshComponent_GetEndRoll_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector USplineMeshComponent::GetEndPosition() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineMeshComponent.GetEndPosition");
	USplineMeshComponent_GetEndPosition_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector2D USplineMeshComponent::GetEndOffset() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineMeshComponent.GetEndOffset");
	USplineMeshComponent_GetEndOffset_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float USplineMeshComponent::GetBoundaryMin() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineMeshComponent.GetBoundaryMin");
	USplineMeshComponent_GetBoundaryMin_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float USplineMeshComponent::GetBoundaryMax() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SplineMeshComponent.GetBoundaryMax");
	USplineMeshComponent_GetBoundaryMax_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void USpotLightComponent::SetOuterConeAngle(float NewOuterConeAngle) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SpotLightComponent.SetOuterConeAngle");
	USpotLightComponent_SetOuterConeAngle_Params params;

	params.NewOuterConeAngle = NewOuterConeAngle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void USpotLightComponent::SetInnerConeAngle(float NewInnerConeAngle) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SpotLightComponent.SetInnerConeAngle");
	USpotLightComponent_SetInnerConeAngle_Params params;

	params.NewInnerConeAngle = NewInnerConeAngle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool USpringArmComponent::IsCollisionFixApplied() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SpringArmComponent.IsCollisionFixApplied");
	USpringArmComponent_IsCollisionFixApplied_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector USpringArmComponent::GetUnfixedCameraPosition() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SpringArmComponent.GetUnfixedCameraPosition");
	USpringArmComponent_GetUnfixedCameraPosition_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FRotator USpringArmComponent::GetTargetRotation() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.SpringArmComponent.GetTargetRotation");
	USpringArmComponent_GetTargetRotation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UStaticMesh::PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups, class UObject* WorldContext) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.StaticMesh.PrestreamTextures");
	UStaticMesh_PrestreamTextures_Params params;

	params.Seconds = Seconds;
	params.bPrioritizeCharacterTextures = bPrioritizeCharacterTextures;
	params.CinematicTextureGroups = CinematicTextureGroups;
	params.WorldContext = WorldContext;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

int UStaticMesh::GetNumSections(int InLOD) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.StaticMesh.GetNumSections");
	UStaticMesh_GetNumSections_Params params;

	params.InLOD = InLOD;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UStaticMesh::GetNumLODs() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.StaticMesh.GetNumLODs");
	UStaticMesh_GetNumLODs_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UStaticMesh::GetMaterialIndex(const struct FName& MaterialSlotName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.StaticMesh.GetMaterialIndex");
	UStaticMesh_GetMaterialIndex_Params params;

	params.MaterialSlotName = MaterialSlotName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UMaterialInterface* UStaticMesh::GetMaterial(int MaterialIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.StaticMesh.GetMaterial");
	UStaticMesh_GetMaterial_Params params;

	params.MaterialIndex = MaterialIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FBoxSphereBounds UStaticMesh::GetBounds() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.StaticMesh.GetBounds");
	UStaticMesh_GetBounds_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FBox UStaticMesh::GetBoundingBox() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.StaticMesh.GetBoundingBox");
	UStaticMesh_GetBoundingBox_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UStereoLayerComponent::SetUVRect(const struct FBox2D& InUVRect) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.StereoLayerComponent.SetUVRect");
	UStereoLayerComponent_SetUVRect_Params params;

	params.InUVRect = InUVRect;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UStereoLayerComponent::SetTexture(class UTexture* InTexture) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.StereoLayerComponent.SetTexture");
	UStereoLayerComponent_SetTexture_Params params;

	params.InTexture = InTexture;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UStereoLayerComponent::SetQuadSize(const struct FVector2D& InQuadSize) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.StereoLayerComponent.SetQuadSize");
	UStereoLayerComponent_SetQuadSize_Params params;

	params.InQuadSize = InQuadSize;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UStereoLayerComponent::SetPriority(int InPriority) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.StereoLayerComponent.SetPriority");
	UStereoLayerComponent_SetPriority_Params params;

	params.InPriority = InPriority;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UStereoLayerComponent::MarkTextureForUpdate() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.StereoLayerComponent.MarkTextureForUpdate");
	UStereoLayerComponent_MarkTextureForUpdate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

struct FBox2D UStereoLayerComponent::GetUVRect() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.StereoLayerComponent.GetUVRect");
	UStereoLayerComponent_GetUVRect_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UTexture* UStereoLayerComponent::GetTexture() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.StereoLayerComponent.GetTexture");
	UStereoLayerComponent_GetTexture_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector2D UStereoLayerComponent::GetQuadSize() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.StereoLayerComponent.GetQuadSize");
	UStereoLayerComponent_GetQuadSize_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

int UStereoLayerComponent::GetPriority() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.StereoLayerComponent.GetPriority");
	UStereoLayerComponent_GetPriority_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UStereoLayerFunctionLibrary::ShowSplashScreen() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.StereoLayerFunctionLibrary.ShowSplashScreen");
	UStereoLayerFunctionLibrary_ShowSplashScreen_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UStereoLayerFunctionLibrary::SetSplashScreen(class UTexture* Texture, const struct FVector2D& Scale, const struct FVector2D& Offset, bool bShowLoadingMovie, bool bShowOnSet) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.StereoLayerFunctionLibrary.SetSplashScreen");
	UStereoLayerFunctionLibrary_SetSplashScreen_Params params;

	params.Texture = Texture;
	params.Scale = Scale;
	params.Offset = Offset;
	params.bShowLoadingMovie = bShowLoadingMovie;
	params.bShowOnSet = bShowOnSet;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UStereoLayerFunctionLibrary::HideSplashScreen() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.StereoLayerFunctionLibrary.HideSplashScreen");
	UStereoLayerFunctionLibrary_HideSplashScreen_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UStereoLayerFunctionLibrary::EnableAutoLoadingSplashScreen(bool InAutoShowEnabled) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.StereoLayerFunctionLibrary.EnableAutoLoadingSplashScreen");
	UStereoLayerFunctionLibrary_EnableAutoLoadingSplashScreen_Params params;

	params.InAutoShowEnabled = InAutoShowEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UTextRenderComponent::SetYScale(float Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.TextRenderComponent.SetYScale");
	UTextRenderComponent_SetYScale_Params params;

	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UTextRenderComponent::SetXScale(float Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.TextRenderComponent.SetXScale");
	UTextRenderComponent_SetXScale_Params params;

	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UTextRenderComponent::SetWorldSize(float Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.TextRenderComponent.SetWorldSize");
	UTextRenderComponent_SetWorldSize_Params params;

	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UTextRenderComponent::SetVertSpacingAdjust(float Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.TextRenderComponent.SetVertSpacingAdjust");
	UTextRenderComponent_SetVertSpacingAdjust_Params params;

	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UTextRenderComponent::SetVerticalAlignment(TEnumAsByte<EVerticalTextAligment> Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.TextRenderComponent.SetVerticalAlignment");
	UTextRenderComponent_SetVerticalAlignment_Params params;

	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UTextRenderComponent::SetTextRenderColor(const struct FColor& Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.TextRenderComponent.SetTextRenderColor");
	UTextRenderComponent_SetTextRenderColor_Params params;

	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UTextRenderComponent::SetTextMaterial(class UMaterialInterface* Material) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.TextRenderComponent.SetTextMaterial");
	UTextRenderComponent_SetTextMaterial_Params params;

	params.Material = Material;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UTextRenderComponent::SetText(const class FString& Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.TextRenderComponent.SetText");
	UTextRenderComponent_SetText_Params params;

	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UTextRenderComponent::SetHorizSpacingAdjust(float Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.TextRenderComponent.SetHorizSpacingAdjust");
	UTextRenderComponent_SetHorizSpacingAdjust_Params params;

	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UTextRenderComponent::SetHorizontalAlignment(TEnumAsByte<EHorizTextAligment> Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.TextRenderComponent.SetHorizontalAlignment");
	UTextRenderComponent_SetHorizontalAlignment_Params params;

	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UTextRenderComponent::SetFont(class UFont* Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.TextRenderComponent.SetFont");
	UTextRenderComponent_SetFont_Params params;

	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UTextRenderComponent::K2_SetText(const struct FText& Value) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.TextRenderComponent.K2_SetText");
	UTextRenderComponent_K2_SetText_Params params;

	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

struct FVector UTextRenderComponent::GetTextWorldSize() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.TextRenderComponent.GetTextWorldSize");
	UTextRenderComponent_GetTextWorldSize_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FVector UTextRenderComponent::GetTextLocalSize() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.TextRenderComponent.GetTextLocalSize");
	UTextRenderComponent_GetTextLocalSize_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UTextureUtilities::UpdateTexture(class UTextureRenderTarget2D* Texture) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.TextureUtilities.UpdateTexture");
	UTextureUtilities_UpdateTexture_Params params;

	params.Texture = Texture;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UTextureUtilities::SetSizeInternalArray(int Size) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.TextureUtilities.SetSizeInternalArray");
	UTextureUtilities_SetSizeInternalArray_Params params;

	params.Size = Size;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UTextureUtilities::SetData4(int Index, const struct FVector4& Vector) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.TextureUtilities.SetData4");
	UTextureUtilities_SetData4_Params params;

	params.Index = Index;
	params.Vector = Vector;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UTextureUtilities::SetData3(int Index, const struct FVector& Vector) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.TextureUtilities.SetData3");
	UTextureUtilities_SetData3_Params params;

	params.Index = Index;
	params.Vector = Vector;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UTextureUtilities::ClearInternalArray(int Size) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.TextureUtilities.ClearInternalArray");
	UTextureUtilities_ClearInternalArray_Params params;

	params.Size = Size;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

struct FTimecode UTimecodeProvider::GetTimecode() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.TimecodeProvider.GetTimecode");
	UTimecodeProvider_GetTimecode_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

ETimecodeProviderSynchronizationState UTimecodeProvider::GetSynchronizationState() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.TimecodeProvider.GetSynchronizationState");
	UTimecodeProvider_GetSynchronizationState_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

struct FFrameRate UTimecodeProvider::GetFrameRate() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.TimecodeProvider.GetFrameRate");
	UTimecodeProvider_GetFrameRate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UTimelineComponent::Stop() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.TimelineComponent.Stop");
	UTimelineComponent_Stop_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UTimelineComponent::SetVectorCurve(class UCurveVector* NewVectorCurve, const struct FName& VectorTrackName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.TimelineComponent.SetVectorCurve");
	UTimelineComponent_SetVectorCurve_Params params;

	params.NewVectorCurve = NewVectorCurve;
	params.VectorTrackName = VectorTrackName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UTimelineComponent::SetTimelineLengthMode(TEnumAsByte<ETimelineLengthMode> NewLengthMode) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.TimelineComponent.SetTimelineLengthMode");
	UTimelineComponent_SetTimelineLengthMode_Params params;

	params.NewLengthMode = NewLengthMode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UTimelineComponent::SetTimelineLength(float NewLength) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.TimelineComponent.SetTimelineLength");
	UTimelineComponent_SetTimelineLength_Params params;

	params.NewLength = NewLength;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UTimelineComponent::SetPlayRate(float NewRate) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.TimelineComponent.SetPlayRate");
	UTimelineComponent_SetPlayRate_Params params;

	params.NewRate = NewRate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UTimelineComponent::SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.TimelineComponent.SetPlaybackPosition");
	UTimelineComponent_SetPlaybackPosition_Params params;

	params.NewPosition = NewPosition;
	params.bFireEvents = bFireEvents;
	params.bFireUpdate = bFireUpdate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UTimelineComponent::SetNewTime(float NewTime) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.TimelineComponent.SetNewTime");
	UTimelineComponent_SetNewTime_Params params;

	params.NewTime = NewTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UTimelineComponent::SetLooping(bool bNewLooping) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.TimelineComponent.SetLooping");
	UTimelineComponent_SetLooping_Params params;

	params.bNewLooping = bNewLooping;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UTimelineComponent::SetLinearColorCurve(class UCurveLinearColor* NewLinearColorCurve, const struct FName& LinearColorTrackName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.TimelineComponent.SetLinearColorCurve");
	UTimelineComponent_SetLinearColorCurve_Params params;

	params.NewLinearColorCurve = NewLinearColorCurve;
	params.LinearColorTrackName = LinearColorTrackName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UTimelineComponent::SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.TimelineComponent.SetIgnoreTimeDilation");
	UTimelineComponent_SetIgnoreTimeDilation_Params params;

	params.bNewIgnoreTimeDilation = bNewIgnoreTimeDilation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UTimelineComponent::SetFloatCurve(class UCurveFloat* NewFloatCurve, const struct FName& FloatTrackName) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.TimelineComponent.SetFloatCurve");
	UTimelineComponent_SetFloatCurve_Params params;

	params.NewFloatCurve = NewFloatCurve;
	params.FloatTrackName = FloatTrackName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UTimelineComponent::ReverseFromEnd() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.TimelineComponent.ReverseFromEnd");
	UTimelineComponent_ReverseFromEnd_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UTimelineComponent::Reverse() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.TimelineComponent.Reverse");
	UTimelineComponent_Reverse_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UTimelineComponent::PlayFromStart() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.TimelineComponent.PlayFromStart");
	UTimelineComponent_PlayFromStart_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UTimelineComponent::Play() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.TimelineComponent.Play");
	UTimelineComponent_Play_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UTimelineComponent::OnRep_Timeline() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.TimelineComponent.OnRep_Timeline");
	UTimelineComponent_OnRep_Timeline_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

bool UTimelineComponent::IsReversing() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.TimelineComponent.IsReversing");
	UTimelineComponent_IsReversing_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UTimelineComponent::IsPlaying() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.TimelineComponent.IsPlaying");
	UTimelineComponent_IsPlaying_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UTimelineComponent::IsLooping() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.TimelineComponent.IsLooping");
	UTimelineComponent_IsLooping_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UTimelineComponent::GetTimelineLength() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.TimelineComponent.GetTimelineLength");
	UTimelineComponent_GetTimelineLength_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UTimelineComponent::GetPlayRate() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.TimelineComponent.GetPlayRate");
	UTimelineComponent_GetPlayRate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

float UTimelineComponent::GetPlaybackPosition() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.TimelineComponent.GetPlaybackPosition");
	UTimelineComponent_GetPlaybackPosition_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UTimelineComponent::GetIgnoreTimeDilation() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.TimelineComponent.GetIgnoreTimeDilation");
	UTimelineComponent_GetIgnoreTimeDilation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UTwitterIntegrationBase::TwitterRequest(const class FString& URL, TArray<class FString> ParamKeysAndValues, TEnumAsByte<ETwitterRequestMethod> RequestMethod, int AccountIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.TwitterIntegrationBase.TwitterRequest");
	UTwitterIntegrationBase_TwitterRequest_Params params;

	params.URL = URL;
	params.ParamKeysAndValues = ParamKeysAndValues;
	params.RequestMethod = RequestMethod;
	params.AccountIndex = AccountIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UTwitterIntegrationBase::ShowTweetUI(const class FString& InitialMessage, const class FString& URL, const class FString& Picture) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.TwitterIntegrationBase.ShowTweetUI");
	UTwitterIntegrationBase_ShowTweetUI_Params params;

	params.InitialMessage = InitialMessage;
	params.URL = URL;
	params.Picture = Picture;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UTwitterIntegrationBase::Init() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.TwitterIntegrationBase.Init");
	UTwitterIntegrationBase_Init_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

int UTwitterIntegrationBase::GetNumAccounts() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.TwitterIntegrationBase.GetNumAccounts");
	UTwitterIntegrationBase_GetNumAccounts_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class FString UTwitterIntegrationBase::GetAccountName(int AccountIndex) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.TwitterIntegrationBase.GetAccountName");
	UTwitterIntegrationBase_GetAccountName_Params params;

	params.AccountIndex = AccountIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UTwitterIntegrationBase::CanShowTweetUI() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.TwitterIntegrationBase.CanShowTweetUI");
	UTwitterIntegrationBase_CanShowTweetUI_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

bool UTwitterIntegrationBase::AuthorizeAccounts() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.TwitterIntegrationBase.AuthorizeAccounts");
	UTwitterIntegrationBase_AuthorizeAccounts_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UVectorFieldComponent::SetIntensity(float NewIntensity) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.VectorFieldComponent.SetIntensity");
	UVectorFieldComponent_SetIntensity_Params params;

	params.NewIntensity = NewIntensity;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UVisualLoggerKismetLibrary::RedirectVislog(class UObject* SourceOwner, class UObject* DestinationOwner) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.VisualLoggerKismetLibrary.RedirectVislog");
	UVisualLoggerKismetLibrary_RedirectVislog_Params params;

	params.SourceOwner = SourceOwner;
	params.DestinationOwner = DestinationOwner;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UVisualLoggerKismetLibrary::LogText(class UObject* WorldContextObject, const class FString& Text, const struct FName& LogCategory, bool bAddToMessageLog) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.VisualLoggerKismetLibrary.LogText");
	UVisualLoggerKismetLibrary_LogText_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Text = Text;
	params.LogCategory = LogCategory;
	params.bAddToMessageLog = bAddToMessageLog;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UVisualLoggerKismetLibrary::LogSegment(class UObject* WorldContextObject, const struct FVector& SegmentStart, const struct FVector& SegmentEnd, const class FString& Text, const struct FLinearColor& ObjectColor, float Thickness, const struct FName& CategoryName, bool bAddToMessageLog) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.VisualLoggerKismetLibrary.LogSegment");
	UVisualLoggerKismetLibrary_LogSegment_Params params;

	params.WorldContextObject = WorldContextObject;
	params.SegmentStart = SegmentStart;
	params.SegmentEnd = SegmentEnd;
	params.Text = Text;
	params.ObjectColor = ObjectColor;
	params.Thickness = Thickness;
	params.CategoryName = CategoryName;
	params.bAddToMessageLog = bAddToMessageLog;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UVisualLoggerKismetLibrary::LogLocation(class UObject* WorldContextObject, const struct FVector& Location, const class FString& Text, const struct FLinearColor& ObjectColor, float Radius, const struct FName& LogCategory, bool bAddToMessageLog) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.VisualLoggerKismetLibrary.LogLocation");
	UVisualLoggerKismetLibrary_LogLocation_Params params;

	params.WorldContextObject = WorldContextObject;
	params.Location = Location;
	params.Text = Text;
	params.ObjectColor = ObjectColor;
	params.Radius = Radius;
	params.LogCategory = LogCategory;
	params.bAddToMessageLog = bAddToMessageLog;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UVisualLoggerKismetLibrary::LogBox(class UObject* WorldContextObject, const struct FBox& BoxShape, const class FString& Text, const struct FLinearColor& ObjectColor, const struct FName& LogCategory, bool bAddToMessageLog) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.VisualLoggerKismetLibrary.LogBox");
	UVisualLoggerKismetLibrary_LogBox_Params params;

	params.WorldContextObject = WorldContextObject;
	params.BoxShape = BoxShape;
	params.Text = Text;
	params.ObjectColor = ObjectColor;
	params.LogCategory = LogCategory;
	params.bAddToMessageLog = bAddToMessageLog;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UVisualLoggerKismetLibrary::EnableRecording(bool bEnabled) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.VisualLoggerKismetLibrary.EnableRecording");
	UVisualLoggerKismetLibrary_EnableRecording_Params params;

	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UVOIPTalker::RegisterWithPlayerState(class APlayerState* OwningState) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.VOIPTalker.RegisterWithPlayerState");
	UVOIPTalker_RegisterWithPlayerState_Params params;

	params.OwningState = OwningState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

float UVOIPTalker::GetVoiceLevel() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.VOIPTalker.GetVoiceLevel");
	UVOIPTalker_GetVoiceLevel_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

class UVOIPTalker* UVOIPTalker::CreateTalkerForPlayer(class APlayerState* OwningState) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.VOIPTalker.CreateTalkerForPlayer");
	UVOIPTalker_CreateTalkerForPlayer_Params params;

	params.OwningState = OwningState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
	return params.ReturnValue;
}

void UVOIPTalker::BPOnTalkingEnd() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.VOIPTalker.BPOnTalkingEnd");
	UVOIPTalker_BPOnTalkingEnd_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UVOIPTalker::BPOnTalkingBegin(class UAudioComponent* AudioComponent) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.VOIPTalker.BPOnTalkingBegin");
	UVOIPTalker_BPOnTalkingBegin_Params params;

	params.AudioComponent = AudioComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UVOIPStatics::SetMicThreshold(float InThreshold) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.VOIPStatics.SetMicThreshold");
	UVOIPStatics_SetMicThreshold_Params params;

	params.InThreshold = InThreshold;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UWindDirectionalSourceComponent::SetWindType(EWindSourceType InNewType) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.WindDirectionalSourceComponent.SetWindType");
	UWindDirectionalSourceComponent_SetWindType_Params params;

	params.InNewType = InNewType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UWindDirectionalSourceComponent::SetStrength(float InNewStrength) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.WindDirectionalSourceComponent.SetStrength");
	UWindDirectionalSourceComponent_SetStrength_Params params;

	params.InNewStrength = InNewStrength;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UWindDirectionalSourceComponent::SetSpeed(float InNewSpeed) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.WindDirectionalSourceComponent.SetSpeed");
	UWindDirectionalSourceComponent_SetSpeed_Params params;

	params.InNewSpeed = InNewSpeed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UWindDirectionalSourceComponent::SetRadius(float InNewRadius) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.WindDirectionalSourceComponent.SetRadius");
	UWindDirectionalSourceComponent_SetRadius_Params params;

	params.InNewRadius = InNewRadius;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UWindDirectionalSourceComponent::SetMinimumGustAmount(float InNewMinGust) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.WindDirectionalSourceComponent.SetMinimumGustAmount");
	UWindDirectionalSourceComponent_SetMinimumGustAmount_Params params;

	params.InNewMinGust = InNewMinGust;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void UWindDirectionalSourceComponent::SetMaximumGustAmount(float InNewMaxGust) {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.WindDirectionalSourceComponent.SetMaximumGustAmount");
	UWindDirectionalSourceComponent_SetMaximumGustAmount_Params params;

	params.InNewMaxGust = InNewMaxGust;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}

void AWorldSettings::OnRep_WorldGravityZ() {
	static auto fn = (UFunction*)UObject::Find("Function", "/Script/Engine.WorldSettings.OnRep_WorldGravityZ");
	AWorldSettings_OnRep_WorldGravityZ_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;
	static auto defaultObj = StaticClass()->CreateDefaultObject();
	UnrealSDK::ProcessEvent(defaultObj, fn, &params);
	fn->FunctionFlags = flags;
}


#ifdef _MSC_VER 
#pragma pack(pop)
#endif

#endif